/**
 * CKEditor editor.
 */
/*
Config.
 */
/*
Colors.
 */
/*
Grid.
 */
/*
Spacers.
 */
/*
Border.
 */
/*
Text.
 */
/*
Navs.
 */
/*
Navbar.
 */
/*
Breadcrumbs.
 */
/*
Alert.
 */
/*
Card.
 */
/*
Input.
 */
/*
List group.
 */
/*
Title.
 */
/*
Panel.
 */
/*
Lists.
 */
/*
Buttons.
 */
/*
Forms.
 */
/*
Tables.
 */
/*
Pagination.
*/
/*
Badge.
 */
/*
Datepicker
 */
/*
Colors.
 */
/*
Grid.
 */
/*
Spacers.
 */
/*
Body.
 */
/*
Border.
 */
/*
Text.
 */
/*
Navs.
 */
/*
Navbar.
 */
/*
Breadcrumbs.
 */
/*
Alert.
 */
/*
Card.
 */
/*
Grid view.
 */
/*
Buttons.
 */
/*
Input.
 */
/*
List group.
 */
/*
Tables.
 */
/*
Pagination.
 */
/*
Dropdown.
 */
/*
Badge.
 */
/*
Tooltip.
 */
/**
Thumbnail.
 */
/*
Icon.
 */
/*
Datepicker.
 */
/**
 * CKEditor dialog.
 */
/*
Colors.
 */
/*
Grid.
 */
/*
Spacers.
 */
/*
Body.
 */
/*
Border.
 */
/*
Text.
 */
/*
Navs.
 */
/*
Navbar.
 */
/*
Breadcrumbs.
 */
/*
Alert.
 */
/*
Card.
 */
/*
Grid view.
 */
/*
Buttons.
 */
/*
Input.
 */
/*
List group.
 */
/*
Tables.
 */
/*
Pagination.
 */
/*
Dropdown.
 */
/*
Badge.
 */
/*
Tooltip.
 */
/**
Thumbnail.
 */
/*
Icon.
 */
/*
Datepicker.
 */
/*
Main.
 */
/*
Toolbar.
 */
/*
Panel.
 */
/*
Content.
 */
/*
Dialog.
 */
/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or http://ckeditor.com/license
*/
/*
mainui.css (part of editor.css)
=================================

This file styles the basic structure of the CKEditor user interface - the box
that holds everything.

CKEditor offers two main editing modes. The main UI blocks that compose these
modes are:

    For "Theme UI" mode, the one most generally used:

    +-- .cke_chrome ----------------------+
    |+-- .cke_inner ---------------------+|
    || +-- .cke_top -------------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    || +-- .cke_contents --------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    || +-- .cke_bottom ----------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    |+-----------------------------------+|
    +-------------------------------------+

    For "Inline Editing" mode:

    +-- .cke_chrome .cke_float------------+
    |+-- .cke_inner ---------------------+|
    || +-- .cke_top -------------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    |+-----------------------------------+|
    +-------------------------------------+

Special outer level classes used in this file:

    .cke_hc: Available when the editor is rendered on "High Contrast".

*/
.cke_chrome {
  display: block;
  width: 100%;
  padding: 0;
  font-size: 14px;
  line-height: 1.4;
  background-color: transparent;
  border: 0;
  border-radius: 0;
  visibility: inherit;
}

.cke_inner {
  display: block;
  -webkit-touch-callout: none;
  background: transparent;
  padding: 0;
}

.cke_top, .cke_contents, .cke_bottom {
  display: block;
  overflow: hidden;
}

.cke_top {
  color: #000;
  background-color: #fff;
  border-bottom: 0;
  padding: 1px 0 0;
  white-space: normal;
}

.cke_bottom {
  position: relative;
}

/* On iOS we need to manually enable scrolling in the contents block. (#9945) */
.cke_browser_ios .cke_contents {
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
}

.cke_ltr {
  overflow-y: hidden;
}

/* For accessibility purposes, several "voice labels" are present in the UI.
   These are usually <span> elements that show not be visible, but that are
   used by screen-readers to announce other elements. Here, we hide these
   <spans>, in fact. */
.cke_voice_label {
  display: none;
}

.cke_resizer {
  display: none;
}

/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or http://ckeditor.com/license
*/
/*
toolbar.css (part of editor.css)
==================================

This files styles the CKEditor toolbar and its buttons. For toolbar combo
styles, check richcombo.css.

The toolbar is rendered as a big container (called toolbox), which contains
smaller "toolbars". Each toolbar represents a group of items that cannot be
separated. The following is the visual representation of the toolbox.

+-- .cke_toolbox ----------------------------------------------------------+
| +-- .cke_toolbar --+ +-- .cke_toolbar --+ ... +-- .cke_toolbar_break --+ |
| |                  | |                  |     |                        | |
| +------------------+ +------------------+     +------------------------+ |
| +-- .cke_toolbar --+ +-- .cke_toolbar --+ ...                            |
| |                  | |                  |                                |
| +------------------+ +------------------+                                |
+--------------------------------------------------------------------------+

The following instead is the visual representation of a single toolbar:

+-- .cke_toolbar ----------------------------------------------------------------+
| +-- .cke_toolbar_start --+ +-- .cke_toolgroup (*) --+ +-- .cke_toolbar_end --+ |
| |                        | |                        | |                      | |
| +------------------------+ +------------------------+ +----------------------+ |
+--------------------------------------------------------------------------------+
(*) .cke_toolgroup is available only when the toolbar items can be grouped
    (buttons). If the items can't be group (combos), this box is not available
    and the items are rendered straight in that place.

This file also styles toolbar buttons, which are rendered inside the above
.cke_toolgroup containers. This is the visual representation of a button:

+-- .cke_button -------------------------------------+
| +-- .cke_button_icon --+ +-- .cke_button_label --+ |
| |                      | |                       | |
| +----------------------+ +-----------------------+ |
+----------------------------------------------------+

Special outer level classes used in this file:

    .cke_hc: Available when the editor is rendered on "High Contrast".
    .cke_rtl: Available when the editor UI is on RTL.
*/
.cke_toolbox, .cke_toolbar {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap;
}

.cke_toolgroup {
  float: left;
  margin: 0;
  padding: 0;
  border: 0;
  border-radius: 0;
}

.cke_button {
  display: block;
  margin: 0 1px 0 0;
  padding: 12px 12px;
  outline: none;
  cursor: default;
  float: left;
  border: 1px solid transparent;
  border-radius: 0;
  background: #fff;
  text-decoration: none !important;
}

/* This class is applied to the button when it is "active" (pushed).
   This style indicates that the feature associated with the button is active
   i.e. currently writing in bold or when spell checking is enabled. */
.cke_button_on {
  background: #eee;
  border-color: transparent;
}

/* This class is applied to the button when the feature associated with the
   button cannot be used (grayed-out).
   i.e. paste button remains disabled when there is nothing in the clipboard to
   be pasted. */
.cke_button_disabled .cke_button_icon {
  opacity: 0.3;
}

.cke_button_off:hover, .cke_button_off:focus, .cke_button_off:active, .cke_button_disabled:hover, .cke_button_disabled:focus, .cke_button_disabled:active {
  background: #eee;
  border-color: #f5f5f5;
}

/* The icon which is a visual representation of the button. */
.cke_button_icon {
  display: block;
  margin: 0;
  width: 16px;
  height: 16px;
  cursor: inherit;
  background-repeat: no-repeat;
}

/* The label of the button that stores the name of the feature. By default,
   labels are invisible. They can be revealed on demand though. */
.cke_button_label {
  display: none;
}

/* The small arrow available on buttons that can be expanded
   (e.g. the color buttons). */
/* The vertical separator which is used within a single toolbar to split
   buttons into sub-groups. */
/* The button, which when clicked hides (collapses) all the toolbars. */
/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or http://ckeditor.com/license
*/
/*
panel.css (part of editor.css)
================================

Panels are floating elements that can hold different types of contents.
The following are common uses of it:

    - The element that toolbar combos display when opening them.
    - The context menu.
    - The list of items displayed by "menu buttons" (e.g. scayt).
    - The panel shown when opening "panel buttons" (e.g. color buttons).

Panel contents are wrapped into an iframe, so it is possible to have additional
CSS loaded inside them (e.g. to have more accurate preview on the styles combo).

The following is a visual representation of the outer elements of a panel:

+-- .cke_panel(*) ---------------------+
| +-- IFRAME.cke_panel_frame --------+ |
| | +-- HTML.cke_panel_container --+ | |
| | | +-- .cke_panel_block ------+ | | |
| | | |                          | | | |
| | | |     (contents here)      | | | |
| | | |                          | | | |
| | | +--------------------------+ | | |
| | +------------------------------+ | |
| +----------------------------------+ |
+--------------------------------------+

(*) All kinds of panel share the above structure. Menu panels adds the
    .cke_menu_panel class to the outer element, while toolbar combos add the
    .cke_combopanel class.

This file also defines styles for panel lists (used by combos). For menu-like
panel contents and color panels check menu.css and colorpanel.css.
*/
/* The box that holds an IFRAME. It's inserted into a host document and positioned
   absolutely by the application. It floats above the host document/editor. */
.cke_panel {
  visibility: visible;
  width: 120px;
  height: 100px;
  margin: 5px 0 0;
  overflow: hidden;
  background-color: #fff;
  border: 0 solid #000;
  border-radius: 0;
}

/* This class represents panels which are used as context menus. */
.cke_menu_panel {
  padding: 0;
  margin: 0;
}

/* This class represents panels which are used by rich combos. */
.cke_combopanel {
  width: 150px;
  height: 110px;
}

/* The IFRAME the panel is wrapped into. */
.cke_panel_frame {
  width: 100%;
  height: 100%;
  overflow: auto;
  overflow-x: hidden;
}

/* The HTML document which is a direct descendant of the IFRAME */
.cke_panel_container {
  overflow-y: auto;
  overflow-x: hidden;
}

/*
Here we start the definition of panel lists (e.g. combo panels). The following
is its visual representation:

+-- .cke_panel_block -----------------+
| +-- .cke_panel_grouptitle --------+ |
| |                                 | |
| +---------------------------------+ |
| +-- .cke_panel_list --------------+ |
| | +-- .cke_panel_listItem ------+ | |
| | | +-- a --------------------+ | | |
| | | | +-- span -------------+ | | | |
| | | | |                     | | | | |
| | | | +---------------------+ | | | |
| | | +-------------------------+ | | |
| | +-----------------------------+ | |
| | +-- .cke_panel_listItem ------+ | |
| | | +-- a --------------------+ | | |
| | | | +-- span -------------+ | | | |
| | | | |                     | | | | |
| | | | +---------------------+ | | | |
| | | +-------------------------+ | | |
| | +-----------------------------+ | |
| | ...                             | |
| +---------------------------------+ |
+-------------------------------------+
*/
/* The list of panel items. */
.cke_panel_list {
  list-style-type: none;
  margin: 0;
  padding: 0;
  white-space: nowrap;
}

/* The item of .cke_panel_list */
.cke_panel_listItem {
  margin: 0;
  padding: 0;
}

/* The child of .cke_panel_listItem. These elements contain spans which are
   to display a real name of the property which is visible for an end-user. */
.cke_panel_listItem a {
  padding: 6px 10px;
  display: block;
  color: inherit;
  text-decoration: none;
  overflow: hidden;
  text-overflow: ellipsis;
}

.cke_panel_listItem a:hover, .cke_panel_listItem a:focus, .cke_panel_listItem a:active {
  background-color: #ddd;
  outline: 0;
}

.cke_panel_listItem a > * {
  font-size: inherit !important;
  font-weight: inherit !important;
}

.cke_panel_listItem.cke_selected a {
  background-color: #ddd;
  outline: none;
}

.cke_hc .cke_panel_listItem a {
  border-style: none;
}

/* The title of the entire panel which is visible on top of the list. */
.cke_panel_grouptitle {
  display: none;
}

/* The following styles set defaults of the elements used by the Paragraph
   Format panel. */
.cke_panel_listItem p, .cke_panel_listItem h1, .cke_panel_listItem h2, .cke_panel_listItem h3, .cke_panel_listItem h4, .cke_panel_listItem h5, .cke_panel_listItem h6, .cke_panel_listItem pre {
  margin-top: 0;
  margin-bottom: 0;
}

/**
 * CKEditor config.
 */
.cke_editable {
  padding: 12px 12px;
  font-size: 0.875rem;
  font-weight: 400;
  line-height: 1.4;
  color: #000;
  background-color: transparent;
  border: 0;
  background-clip: padding-box;
  height: 100%;
  outline: 0;
}

.cke_focus .cke_editable {
  color: #000;
}

.cke_editable a {
  color: #000;
  text-decoration: none;
}

.cke_editable blockquote {
  padding: 12px;
  background-color: #f5f5f5;
}

.cke_editable h1 {
  font-size: 24px;
}

.cke_editable h2 {
  font-size: 22px;
}

.cke_editable h3 {
  font-size: 20px;
}

.cke_editable h4 {
  font-size: 18px;
}

.cke_editable h5 {
  font-size: 16px;
}

.cke_editable p:last-child {
  margin-bottom: 0;
}

.cke_editable table {
  margin-bottom: 1em;
  width: 100%;
}

.cke_editable td {
  vertical-align: top;
  padding: .5em;
  border: 1px dotted #ddd;
}

.cke_source {
  font-family: 'Courier New', monospace;
  font-size: small;
  background-color: #fff;
  white-space: pre;
}

.cke_editable {
  -webkit-box-shadow: inset 2px 2px 6px 0 rgba(0, 0, 0, 0.13) !important;
          box-shadow: inset 2px 2px 6px 0 rgba(0, 0, 0, 0.13) !important;
}

.cke_editable a {
  color: #74bcd1;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9ja2VkaXRvci1ib290c3RyYXAvc2Nzcy9lZGl0b3Iuc2NzcyIsImFzc2V0cy9ja2VkaXRvci1ib290c3RyYXAvc2Nzcy9lZGl0b3IuY3NzIiwiYXNzZXRzL2FuYWtpbi9zY3NzL2luY2x1ZGVzL192YXJpYWJsZXMuc2NzcyIsIi4uL3lpaTItc2tlbGV0b24vYXNzZXRzL2FkbWluL3Njc3MvaW5jbHVkZXMvX3ZhcmlhYmxlcy5zY3NzIiwiLi4veWlpMi1za2VsZXRvbi9hc3NldHMvY2tlZGl0b3ItYm9vdHN0cmFwL3Njc3MvZWRpdG9yLnNjc3MiLCIuLi95aWkyLXNrZWxldG9uL2Fzc2V0cy9ja2VkaXRvci1ib290c3RyYXAvc2Nzcy9pbmNsdWRlcy9fdmFyaWFibGVzLnNjc3MiLCIuLi95aWkyLXNrZWxldG9uL2Fzc2V0cy9ja2VkaXRvci1ib290c3RyYXAvc2Nzcy9pbmNsdWRlcy9fbGF5b3V0LnNjc3MiLCJhc3NldHMvY2tlZGl0b3ItYm9vdHN0cmFwL3Njc3MvaW5jbHVkZXMvX3ZhcmlhYmxlcy5zY3NzIiwiLi4veWlpMi1za2VsZXRvbi9hc3NldHMvY2tlZGl0b3ItYm9vdHN0cmFwL3Njc3MvaW5jbHVkZXMvX3Rvb2xiYXIuc2NzcyIsIi4uL3lpaTItc2tlbGV0b24vYXNzZXRzL2NrZWRpdG9yLWJvb3RzdHJhcC9zY3NzL2luY2x1ZGVzL19wYW5lbC5zY3NzIiwiLi4veWlpMi1za2VsZXRvbi9hc3NldHMvY2tlZGl0b3ItYm9vdHN0cmFwL3Njc3MvaW5jbHVkZXMvX2NvbnRlbnQuc2NzcyIsIi4uLy4uL25wbS1hc3NldC9ib290c3RyYXAvc2Nzcy92ZW5kb3IvX3Jmcy5zY3NzIiwiLi4vLi4vbnBtLWFzc2V0L2Jvb3RzdHJhcC9zY3NzL192YXJpYWJsZXMuc2NzcyIsIi4uLy4uL25wbS1hc3NldC9ib290c3RyYXAvc2Nzcy9taXhpbnMvX2JveC1zaGFkb3cuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7RUNFRTtBQ0ZGOztFREtFO0FDQUY7O0VER0U7QUNjRjs7RURYRTtBQ2NGOztFRFhFO0FDb0JGOztFRGpCRTtBQ3dCRjs7RURyQkU7QUM0QkY7O0VEekJFO0FDZ0NGOztFRDdCRTtBQzRDRjs7RUR6Q0U7QUNpREY7O0VEOUNFO0FDbURGOztFRGhERTtBQzRERjs7RUR6REU7QUNxRUY7O0VEbEVFO0FDd0VGOztFRHJFRTtBQzBFRjs7RUR2RUU7QUNrRkY7O0VEL0VFO0FDcUZGOztFRGxGRTtBQ3VGRjs7RURwRkU7QUNpR0Y7O0VEOUZFO0FDbUdGOztDRGhHQztBQ3VHRDs7RURwR0U7QUM4R0Y7O0VEM0dFO0FFcEVGOztFRnVFRTtBRW5DRjs7RUZzQ0U7QUV6QkY7O0VGNEJFO0FFcEJGOztFRnVCRTtBRWpCRjs7RUZvQkU7QUVWRjs7RUZhRTtBRWNGOztFRlhFO0FFc0JGOztFRm5CRTtBRXNDRjs7RUZuQ0U7QUVnREY7O0VGN0NFO0FFb0RGOztFRmpERTtBRW1FRjs7RUZoRUU7QUV1RUY7O0VGcEVFO0FFMEZGOztFRnZGRTtBRTBIRjs7RUZ2SEU7QUU4SEY7O0VGM0hFO0FFMElGOztFRnZJRTtBRXdKRjs7RUZySkU7QUU0S0Y7O0VGektFO0FFc0xGOztFRm5MRTtBRXlMRjs7RUZ0TEU7QUU0TEY7O0VGekxFO0FFOExGOztFRjNMRTtBR3pJRjs7RUg0SUU7QUU1SUY7O0VGK0lFO0FFM0dGOztFRjhHRTtBRWpHRjs7RUZvR0U7QUU1RkY7O0VGK0ZFO0FFekZGOztFRjRGRTtBRWxGRjs7RUZxRkU7QUUxREY7O0VGNkRFO0FFbERGOztFRnFERTtBRWxDRjs7RUZxQ0U7QUV4QkY7O0VGMkJFO0FFcEJGOztFRnVCRTtBRUxGOztFRlFFO0FFREY7O0VGSUU7QUVrQkY7O0VGZkU7QUVrREY7O0VGL0NFO0FFc0RGOztFRm5ERTtBRWtFRjs7RUYvREU7QUVnRkY7O0VGN0VFO0FFb0dGOztFRmpHRTtBRThHRjs7RUYzR0U7QUVpSEY7O0VGOUdFO0FFb0hGOztFRmpIRTtBRXNIRjs7RUZuSEU7QUlqTkY7O0VKb05FO0FJeE1GOztFSjJNRTtBSXhMRjs7RUoyTEU7QUkxS0Y7O0VKNktFO0FJeEpGOztFSjJKRTtBS2hPRjs7O0NMb09DO0FLL05EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NMd1FDO0FLL05EO0VBQ0UsY0FBYztFQUNkLFdBQVc7RUFDWCxVQUFVO0VBQ1YsZUg2Qm1CO0VHNUJuQixnQkgrQm9CO0VHOUJwQiw2QkNwRGtCO0VEcURsQixTQ3BEWTtFRHFEWixnQkpqQmU7RUlrQmYsbUJBQW1CO0FMaU9yQjs7QUs5TkE7RUFDRSxjQUFjO0VBQ2QsMkJBQTJCO0VBQzNCLHVCQUF1QjtFQUN2QixVQUFVO0FMaU9aOztBSzlOQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUxpT2xCOztBSzlOQTtFQUNFLFdKMURjO0VJMkRkLHNCSjBFeUI7RUl6RXpCLGdCQ3JFdUI7RURzRXZCLGdCQ3ZFdUI7RUR3RXZCLG1CQUFtQjtBTGlPckI7O0FLOU5BO0VBQ0Usa0JBQWtCO0FMaU9wQjs7QUs5TkEsK0VBQUE7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixpQ0FBaUM7QUxpT25DOztBSzlOQTtFQUNFLGtCQUFrQjtBTGlPcEI7O0FLOU5BOzs7c0JMbU9zQjtBSy9OdEI7RUFDRSxhQUFhO0FMaU9mOztBSzlOQTtFQUNFLGFBQWE7QUxpT2Y7O0FPdFVBOzs7Q1AyVUM7QU90VUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NQbVhDO0FPclVEO0VBQ0Usb0JBQWE7RUFBYixvQkFBYTtFQUFiLGFBQWE7RUFDYiw4QkFBbUI7RUFBbkIsNkJBQW1CO01BQW5CLHVCQUFtQjtVQUFuQixtQkFBbUI7QVB1VXJCOztBT25VQTtFQUNFLFdBQVc7RUFDWCxTSDVDb0I7RUc2Q3BCLFVBQVU7RUFDVixTQUFTO0VBQ1QsZ0JOekJlO0FEK1ZqQjs7QU9uVUE7RUFDRSxjQUFjO0VBQ2QsaUJIakRtQztFR2tEbkMsa0JOOEJ3QjtFTTdCeEIsYUFBYTtFQUNiLGVBQWU7RUFDZixXQUFXO0VBQ1gsNkJIcEQrQztFR3FEL0MsZ0JOcENlO0VNcUNmLGdCTHJFVTtFS3NFVixnQ0FBZ0M7QVBzVWxDOztBT25VQTs7c0VQdVVzRTtBT3BVdEU7RUFDRSxnQkx2RWE7RUt3RWIseUJOOEQ4QjtBRHdRaEM7O0FPblVBOzs7ZVB3VWU7QU9wVWY7RUFDRSxZQUFZO0FQc1VkOztBT2xVQTtFQUVJLGdCTHRGVztFS3VGWCxxQkx4RmM7QUY0WmxCOztBT2hVQSw2REFBQTtBQUNBO0VBQ0UsY0FBYztFQUNkLFNIOUVnQztFRytFaEMsV0g5RWtDO0VHK0VsQyxZSDlFbUM7RUcrRW5DLGVBQWU7RUFDZiw0QkFBNEI7QVBtVTlCOztBTy9UQTtpRVBrVWlFO0FPaFVqRTtFQUNFLGFBQWE7QVBrVWY7O0FPL1RBOzhCUGtVOEI7QU9uVDlCOzZCUHFUNkI7QU81UzdCLHVFQUFBO0FDL0lBOzs7Q1JnY0M7QVEzYkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NSK2RDO0FRMWJEOzZFUjRiNkU7QVExYjdFO0VBQ0UsbUJBQW1CO0VBQ25CLFlKWnFCO0VJYXJCLGFKWnNCO0VJYXRCLGVKWndCO0VJYXhCLGdCQUFnQjtFQUVoQixzQk45Q1U7RU0rQ1Ysb0JQc0NzQjtFT3JDdEIsZ0JQaEJlO0FEMmNqQjs7QVF4YkEsa0VBQUE7QUFDQTtFQUNFLFVBQVU7RUFDVixTQUFTO0FSMmJYOztBUXhiQSxnRUFBQTtBQUNBO0VBQ0UsWUpuQjJCO0VJb0IzQixhSm5CNEI7QUo4YzlCOztBUXhiQSwwQ0FBQTtBQUNBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixjQUFjO0VBQ2Qsa0JBQWtCO0FSMmJwQjs7QVF4YkEsaUVBQUE7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixrQkFBa0I7QVIyYnBCOztBUXhiQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q1JvZEM7QVF2YkQsNkJBQUE7QUFDQTtFQUNFLHFCQUFxQjtFQUNyQixTQUFTO0VBQ1QsVUFBVTtFQUNWLG1CQUFtQjtBUnlickI7O0FRdGJBLGdDQUFBO0FBQ0E7RUFDRSxTQUFTO0VBQ1QsVUFBVTtBUnliWjs7QVF0YkE7NkVSeWI2RTtBUXZiN0U7RUFDRSxpQkp2RitCO0VJd0YvQixjQUFjO0VBQ2QsY0FBYztFQUNkLHFCQUFxQjtFQUNyQixnQkFBZ0I7RUFDaEIsdUJBQXVCO0FSeWJ6Qjs7QVEvYkE7RUFTSSxzQk41SFc7RU02SFgsVUFBVTtBUjBiZDs7QVFwY0E7RUFjSSw2QkFBNkI7RUFDN0IsK0JBQStCO0FSMGJuQzs7QVFyYkE7RUFDRSxzQk54SWE7RU15SWIsYUFBYTtBUndiZjs7QVFyYkE7RUFDRSxrQkFBa0I7QVJ3YnBCOztBUXJiQSx1RUFBQTtBQUNBO0VBQ0UsYUFBYTtBUndiZjs7QVFyYkE7a0JSd2JrQjtBUXRibEI7RUFFSSxhQUFhO0VBQ2IsZ0JBQWdCO0FSdWJwQjs7QVM3bEJBOztFVGltQkU7QVM5bEJGO0VBQ0Usa0JSOEZ3QjtFUzZCcEIsbUJBdENZO0VEbEZoQixnQkVvUitCO0VGblIvQixnQlAwRW9CO0VPekVwQixXUkljO0VRSGQsNkJIUjBCO0VHUzFCLFNITm9CO0VHT3BCLDRCQUE0QjtFQUM1QixZQUFZO0VBQ1osVUFBVTtBVCtsQlo7O0FTN2xCRTtFQUNFLFdSSlk7QURvbUJoQjs7QVM5bUJBO0VBa0JJLFdSYlU7RVFjVixxQkVzSjBDO0FYMGM5Qzs7QVNubkJBO0VBdUJJLGFSd0VzQjtFUXZFdEIseUJQakJjO0FGaW5CbEI7O0FTeG5CQTtFQTRCSSxlQUFpQztBVGdtQnJDOztBUzVuQkE7RUFnQ0ksZUFBZ0M7QVRnbUJwQzs7QVNob0JBO0VBb0NJLGVBQWdDO0FUZ21CcEM7O0FTcG9CQTtFQXdDSSxlQUFnQztBVGdtQnBDOztBU3hvQkE7RUE0Q0ksZUFBZ0M7QVRnbUJwQzs7QVM1b0JBO0VBZ0RJLGdCQUFnQjtBVGdtQnBCOztBU2hwQkE7RUFvREksa0JBQWtCO0VBQ2xCLFdBQVc7QVRnbUJmOztBU3JwQkE7RUF5REksbUJBQW1CO0VBQ25CLGFBQWE7RUFDYix1QlBsRFc7QUZrcEJmOztBUzdsQkE7RUFDRSxxQ0FBcUM7RUFDckMsZ0JBQWdCO0VBQ2hCLHNCUC9EVTtFT2dFVixnQkFBZ0I7QVRnbUJsQjs7QUQzcEJBO0VhTU0sc0VYb0krRDtVV3BJL0QsOERYb0krRDtBRHFoQnJFOztBRC9wQkE7RUFJSSxjRUVzQjtBRDZwQjFCIiwiZmlsZSI6ImFzc2V0cy9ja2VkaXRvci1ib290c3RyYXAvc2Nzcy9lZGl0b3IuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENLRWRpdG9yIGVkaXRvci5cclxuICovXHJcbi8vIEFuYWtpbi5cclxuQGltcG9ydCBcIi4uLy4uL2FuYWtpbi9zY3NzL2luY2x1ZGVzL3ZhcmlhYmxlc1wiO1xyXG5AaW1wb3J0IFwiLi4vLi4vYW5ha2luL3Njc3MvaW5jbHVkZXMvbWl4aW5zXCI7XHJcbkBpbXBvcnQgXCJpbmNsdWRlcy92YXJpYWJsZXNcIjtcclxuQGltcG9ydCBcIi4uLy4uLy4uLy4uL3lpaTItc2tlbGV0b24vYXNzZXRzL2FkbWluL3Njc3MvaW5jbHVkZXMvdmFyaWFibGVzXCI7XHJcbkBpbXBvcnQgXCIuLi8uLi8uLi8uLi95aWkyLXNrZWxldG9uL2Fzc2V0cy9ja2VkaXRvci1ib290c3RyYXAvc2Nzcy9lZGl0b3JcIjtcclxuXHJcbi5ja2VfZWRpdGFibGUge1xyXG4gIEBpbmNsdWRlIGJveC1zaGFkb3coJGlucHV0LWJveC1zaGFkb3cpO1xyXG5cclxuICBhIHtcclxuICAgIGNvbG9yOiAkbGluay1ob3Zlci1jb2xvcjtcclxuICB9XHJcbn0iLCIvKipcclxuICogQ0tFZGl0b3IgZWRpdG9yLlxyXG4gKi9cbi8qXG5Db25maWcuXG4gKi9cbi8qXG5Db2xvcnMuXG4gKi9cbi8qXG5HcmlkLlxuICovXG4vKlxuU3BhY2Vycy5cbiAqL1xuLypcbkJvcmRlci5cbiAqL1xuLypcblRleHQuXG4gKi9cbi8qXG5OYXZzLlxuICovXG4vKlxuTmF2YmFyLlxuICovXG4vKlxuQnJlYWRjcnVtYnMuXG4gKi9cbi8qXG5BbGVydC5cbiAqL1xuLypcbkNhcmQuXG4gKi9cbi8qXG5JbnB1dC5cbiAqL1xuLypcbkxpc3QgZ3JvdXAuXG4gKi9cbi8qXG5UaXRsZS5cbiAqL1xuLypcblBhbmVsLlxuICovXG4vKlxuTGlzdHMuXG4gKi9cbi8qXG5CdXR0b25zLlxuICovXG4vKlxuRm9ybXMuXG4gKi9cbi8qXG5UYWJsZXMuXG4gKi9cbi8qXG5QYWdpbmF0aW9uLlxuKi9cbi8qXG5CYWRnZS5cbiAqL1xuLypcbkRhdGVwaWNrZXJcbiAqL1xuLypcbkNvbG9ycy5cbiAqL1xuLypcbkdyaWQuXG4gKi9cbi8qXG5TcGFjZXJzLlxuICovXG4vKlxuQm9keS5cbiAqL1xuLypcbkJvcmRlci5cbiAqL1xuLypcblRleHQuXG4gKi9cbi8qXG5OYXZzLlxuICovXG4vKlxuTmF2YmFyLlxuICovXG4vKlxuQnJlYWRjcnVtYnMuXG4gKi9cbi8qXG5BbGVydC5cbiAqL1xuLypcbkNhcmQuXG4gKi9cbi8qXG5HcmlkIHZpZXcuXG4gKi9cbi8qXG5CdXR0b25zLlxuICovXG4vKlxuSW5wdXQuXG4gKi9cbi8qXG5MaXN0IGdyb3VwLlxuICovXG4vKlxuVGFibGVzLlxuICovXG4vKlxuUGFnaW5hdGlvbi5cbiAqL1xuLypcbkRyb3Bkb3duLlxuICovXG4vKlxuQmFkZ2UuXG4gKi9cbi8qXG5Ub29sdGlwLlxuICovXG4vKipcblRodW1ibmFpbC5cbiAqL1xuLypcbkljb24uXG4gKi9cbi8qXG5EYXRlcGlja2VyLlxuICovXG4vKipcclxuICogQ0tFZGl0b3IgZGlhbG9nLlxyXG4gKi9cbi8qXG5Db2xvcnMuXG4gKi9cbi8qXG5HcmlkLlxuICovXG4vKlxuU3BhY2Vycy5cbiAqL1xuLypcbkJvZHkuXG4gKi9cbi8qXG5Cb3JkZXIuXG4gKi9cbi8qXG5UZXh0LlxuICovXG4vKlxuTmF2cy5cbiAqL1xuLypcbk5hdmJhci5cbiAqL1xuLypcbkJyZWFkY3J1bWJzLlxuICovXG4vKlxuQWxlcnQuXG4gKi9cbi8qXG5DYXJkLlxuICovXG4vKlxuR3JpZCB2aWV3LlxuICovXG4vKlxuQnV0dG9ucy5cbiAqL1xuLypcbklucHV0LlxuICovXG4vKlxuTGlzdCBncm91cC5cbiAqL1xuLypcblRhYmxlcy5cbiAqL1xuLypcblBhZ2luYXRpb24uXG4gKi9cbi8qXG5Ecm9wZG93bi5cbiAqL1xuLypcbkJhZGdlLlxuICovXG4vKlxuVG9vbHRpcC5cbiAqL1xuLyoqXG5UaHVtYm5haWwuXG4gKi9cbi8qXG5JY29uLlxuICovXG4vKlxuRGF0ZXBpY2tlci5cbiAqL1xuLypcbk1haW4uXG4gKi9cbi8qXG5Ub29sYmFyLlxuICovXG4vKlxuUGFuZWwuXG4gKi9cbi8qXG5Db250ZW50LlxuICovXG4vKlxuRGlhbG9nLlxuICovXG4vKlxyXG5Db3B5cmlnaHQgKGMpIDIwMDMtMjAxNCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cDovL2NrZWRpdG9yLmNvbS9saWNlbnNlXHJcbiovXG4vKlxyXG5tYWludWkuY3NzIChwYXJ0IG9mIGVkaXRvci5jc3MpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuVGhpcyBmaWxlIHN0eWxlcyB0aGUgYmFzaWMgc3RydWN0dXJlIG9mIHRoZSBDS0VkaXRvciB1c2VyIGludGVyZmFjZSAtIHRoZSBib3hcclxudGhhdCBob2xkcyBldmVyeXRoaW5nLlxyXG5cclxuQ0tFZGl0b3Igb2ZmZXJzIHR3byBtYWluIGVkaXRpbmcgbW9kZXMuIFRoZSBtYWluIFVJIGJsb2NrcyB0aGF0IGNvbXBvc2UgdGhlc2VcclxubW9kZXMgYXJlOlxyXG5cclxuICAgIEZvciBcIlRoZW1lIFVJXCIgbW9kZSwgdGhlIG9uZSBtb3N0IGdlbmVyYWxseSB1c2VkOlxyXG5cclxuICAgICstLSAuY2tlX2Nocm9tZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG4gICAgfCstLSAuY2tlX2lubmVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLSt8XHJcbiAgICB8fCArLS0gLmNrZV90b3AgLS0tLS0tLS0tLS0tLS0tLS0tLSsgfHxcclxuICAgIHx8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8fFxyXG4gICAgfHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8fCArLS0gLmNrZV9jb250ZW50cyAtLS0tLS0tLS0tLS0tLSsgfHxcclxuICAgIHx8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8fFxyXG4gICAgfHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8fCArLS0gLmNrZV9ib3R0b20gLS0tLS0tLS0tLS0tLS0tLSsgfHxcclxuICAgIHx8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8fFxyXG4gICAgfHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8Ky0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK3xcclxuICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG5cclxuICAgIEZvciBcIklubGluZSBFZGl0aW5nXCIgbW9kZTpcclxuXHJcbiAgICArLS0gLmNrZV9jaHJvbWUgLmNrZV9mbG9hdC0tLS0tLS0tLS0tLStcclxuICAgIHwrLS0gLmNrZV9pbm5lciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0rfFxyXG4gICAgfHwgKy0tIC5ja2VfdG9wIC0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8fCB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgfHxcclxuICAgIHx8ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8fFxyXG4gICAgfCstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSt8XHJcbiAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcclxuXHJcblNwZWNpYWwgb3V0ZXIgbGV2ZWwgY2xhc3NlcyB1c2VkIGluIHRoaXMgZmlsZTpcclxuXHJcbiAgICAuY2tlX2hjOiBBdmFpbGFibGUgd2hlbiB0aGUgZWRpdG9yIGlzIHJlbmRlcmVkIG9uIFwiSGlnaCBDb250cmFzdFwiLlxyXG5cclxuKi9cbi5ja2VfY2hyb21lIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAwO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci1yYWRpdXM6IDA7XG4gIHZpc2liaWxpdHk6IGluaGVyaXQ7XG59XG5cbi5ja2VfaW5uZXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgcGFkZGluZzogMDtcbn1cblxuLmNrZV90b3AsIC5ja2VfY29udGVudHMsIC5ja2VfYm90dG9tIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5ja2VfdG9wIHtcbiAgY29sb3I6ICMwMDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGJvcmRlci1ib3R0b206IDA7XG4gIHBhZGRpbmc6IDFweCAwIDA7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG59XG5cbi5ja2VfYm90dG9tIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4vKiBPbiBpT1Mgd2UgbmVlZCB0byBtYW51YWxseSBlbmFibGUgc2Nyb2xsaW5nIGluIHRoZSBjb250ZW50cyBibG9jay4gKCM5OTQ1KSAqL1xuLmNrZV9icm93c2VyX2lvcyAuY2tlX2NvbnRlbnRzIHtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xufVxuXG4uY2tlX2x0ciB7XG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcbn1cblxuLyogRm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMsIHNldmVyYWwgXCJ2b2ljZSBsYWJlbHNcIiBhcmUgcHJlc2VudCBpbiB0aGUgVUkuXHJcbiAgIFRoZXNlIGFyZSB1c3VhbGx5IDxzcGFuPiBlbGVtZW50cyB0aGF0IHNob3cgbm90IGJlIHZpc2libGUsIGJ1dCB0aGF0IGFyZVxyXG4gICB1c2VkIGJ5IHNjcmVlbi1yZWFkZXJzIHRvIGFubm91bmNlIG90aGVyIGVsZW1lbnRzLiBIZXJlLCB3ZSBoaWRlIHRoZXNlXHJcbiAgIDxzcGFucz4sIGluIGZhY3QuICovXG4uY2tlX3ZvaWNlX2xhYmVsIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmNrZV9yZXNpemVyIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLypcclxuQ29weXJpZ2h0IChjKSAyMDAzLTIwMTQsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kIG9yIGh0dHA6Ly9ja2VkaXRvci5jb20vbGljZW5zZVxyXG4qL1xuLypcclxudG9vbGJhci5jc3MgKHBhcnQgb2YgZWRpdG9yLmNzcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuVGhpcyBmaWxlcyBzdHlsZXMgdGhlIENLRWRpdG9yIHRvb2xiYXIgYW5kIGl0cyBidXR0b25zLiBGb3IgdG9vbGJhciBjb21ib1xyXG5zdHlsZXMsIGNoZWNrIHJpY2hjb21iby5jc3MuXHJcblxyXG5UaGUgdG9vbGJhciBpcyByZW5kZXJlZCBhcyBhIGJpZyBjb250YWluZXIgKGNhbGxlZCB0b29sYm94KSwgd2hpY2ggY29udGFpbnNcclxuc21hbGxlciBcInRvb2xiYXJzXCIuIEVhY2ggdG9vbGJhciByZXByZXNlbnRzIGEgZ3JvdXAgb2YgaXRlbXMgdGhhdCBjYW5ub3QgYmVcclxuc2VwYXJhdGVkLiBUaGUgZm9sbG93aW5nIGlzIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRvb2xib3guXHJcblxyXG4rLS0gLmNrZV90b29sYm94IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcbnwgKy0tIC5ja2VfdG9vbGJhciAtLSsgKy0tIC5ja2VfdG9vbGJhciAtLSsgLi4uICstLSAuY2tlX3Rvb2xiYXJfYnJlYWsgLS0rIHxcclxufCB8ICAgICAgICAgICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgfCAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgIHwgfFxyXG58ICstLS0tLS0tLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLS0tLS0tLS0rICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8XHJcbnwgKy0tIC5ja2VfdG9vbGJhciAtLSsgKy0tIC5ja2VfdG9vbGJhciAtLSsgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxufCB8ICAgICAgICAgICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG58ICstLS0tLS0tLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcclxuXHJcblRoZSBmb2xsb3dpbmcgaW5zdGVhZCBpcyB0aGUgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIHRvb2xiYXI6XHJcblxyXG4rLS0gLmNrZV90b29sYmFyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcbnwgKy0tIC5ja2VfdG9vbGJhcl9zdGFydCAtLSsgKy0tIC5ja2VfdG9vbGdyb3VwICgqKSAtLSsgKy0tIC5ja2VfdG9vbGJhcl9lbmQgLS0rIHxcclxufCB8ICAgICAgICAgICAgICAgICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgICAgIHwgfFxyXG58ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8XHJcbistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcclxuKCopIC5ja2VfdG9vbGdyb3VwIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4gdGhlIHRvb2xiYXIgaXRlbXMgY2FuIGJlIGdyb3VwZWRcclxuICAgIChidXR0b25zKS4gSWYgdGhlIGl0ZW1zIGNhbid0IGJlIGdyb3VwIChjb21ib3MpLCB0aGlzIGJveCBpcyBub3QgYXZhaWxhYmxlXHJcbiAgICBhbmQgdGhlIGl0ZW1zIGFyZSByZW5kZXJlZCBzdHJhaWdodCBpbiB0aGF0IHBsYWNlLlxyXG5cclxuVGhpcyBmaWxlIGFsc28gc3R5bGVzIHRvb2xiYXIgYnV0dG9ucywgd2hpY2ggYXJlIHJlbmRlcmVkIGluc2lkZSB0aGUgYWJvdmVcclxuLmNrZV90b29sZ3JvdXAgY29udGFpbmVycy4gVGhpcyBpcyB0aGUgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIGEgYnV0dG9uOlxyXG5cclxuKy0tIC5ja2VfYnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcbnwgKy0tIC5ja2VfYnV0dG9uX2ljb24gLS0rICstLSAuY2tlX2J1dHRvbl9sYWJlbCAtLSsgfFxyXG58IHwgICAgICAgICAgICAgICAgICAgICAgfCB8ICAgICAgICAgICAgICAgICAgICAgICB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8XHJcbistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG5cclxuU3BlY2lhbCBvdXRlciBsZXZlbCBjbGFzc2VzIHVzZWQgaW4gdGhpcyBmaWxlOlxyXG5cclxuICAgIC5ja2VfaGM6IEF2YWlsYWJsZSB3aGVuIHRoZSBlZGl0b3IgaXMgcmVuZGVyZWQgb24gXCJIaWdoIENvbnRyYXN0XCIuXHJcbiAgICAuY2tlX3J0bDogQXZhaWxhYmxlIHdoZW4gdGhlIGVkaXRvciBVSSBpcyBvbiBSVEwuXHJcbiovXG4uY2tlX3Rvb2xib3gsIC5ja2VfdG9vbGJhciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG59XG5cbi5ja2VfdG9vbGdyb3VwIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICBib3JkZXItcmFkaXVzOiAwO1xufVxuXG4uY2tlX2J1dHRvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDAgMXB4IDAgMDtcbiAgcGFkZGluZzogMTJweCAxMnB4O1xuICBvdXRsaW5lOiBub25lO1xuICBjdXJzb3I6IGRlZmF1bHQ7XG4gIGZsb2F0OiBsZWZ0O1xuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi8qIFRoaXMgY2xhc3MgaXMgYXBwbGllZCB0byB0aGUgYnV0dG9uIHdoZW4gaXQgaXMgXCJhY3RpdmVcIiAocHVzaGVkKS5cclxuICAgVGhpcyBzdHlsZSBpbmRpY2F0ZXMgdGhhdCB0aGUgZmVhdHVyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGJ1dHRvbiBpcyBhY3RpdmVcclxuICAgaS5lLiBjdXJyZW50bHkgd3JpdGluZyBpbiBib2xkIG9yIHdoZW4gc3BlbGwgY2hlY2tpbmcgaXMgZW5hYmxlZC4gKi9cbi5ja2VfYnV0dG9uX29uIHtcbiAgYmFja2dyb3VuZDogI2VlZTtcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLyogVGhpcyBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBidXR0b24gd2hlbiB0aGUgZmVhdHVyZSBhc3NvY2lhdGVkIHdpdGggdGhlXHJcbiAgIGJ1dHRvbiBjYW5ub3QgYmUgdXNlZCAoZ3JheWVkLW91dCkuXHJcbiAgIGkuZS4gcGFzdGUgYnV0dG9uIHJlbWFpbnMgZGlzYWJsZWQgd2hlbiB0aGVyZSBpcyBub3RoaW5nIGluIHRoZSBjbGlwYm9hcmQgdG9cclxuICAgYmUgcGFzdGVkLiAqL1xuLmNrZV9idXR0b25fZGlzYWJsZWQgLmNrZV9idXR0b25faWNvbiB7XG4gIG9wYWNpdHk6IDAuMztcbn1cblxuLmNrZV9idXR0b25fb2ZmOmhvdmVyLCAuY2tlX2J1dHRvbl9vZmY6Zm9jdXMsIC5ja2VfYnV0dG9uX29mZjphY3RpdmUsIC5ja2VfYnV0dG9uX2Rpc2FibGVkOmhvdmVyLCAuY2tlX2J1dHRvbl9kaXNhYmxlZDpmb2N1cywgLmNrZV9idXR0b25fZGlzYWJsZWQ6YWN0aXZlIHtcbiAgYmFja2dyb3VuZDogI2VlZTtcbiAgYm9yZGVyLWNvbG9yOiAjZjVmNWY1O1xufVxuXG4vKiBUaGUgaWNvbiB3aGljaCBpcyBhIHZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYnV0dG9uLiAqL1xuLmNrZV9idXR0b25faWNvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDA7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDE2cHg7XG4gIGN1cnNvcjogaW5oZXJpdDtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbn1cblxuLyogVGhlIGxhYmVsIG9mIHRoZSBidXR0b24gdGhhdCBzdG9yZXMgdGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUuIEJ5IGRlZmF1bHQsXHJcbiAgIGxhYmVscyBhcmUgaW52aXNpYmxlLiBUaGV5IGNhbiBiZSByZXZlYWxlZCBvbiBkZW1hbmQgdGhvdWdoLiAqL1xuLmNrZV9idXR0b25fbGFiZWwge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBUaGUgc21hbGwgYXJyb3cgYXZhaWxhYmxlIG9uIGJ1dHRvbnMgdGhhdCBjYW4gYmUgZXhwYW5kZWRcclxuICAgKGUuZy4gdGhlIGNvbG9yIGJ1dHRvbnMpLiAqL1xuLyogVGhlIHZlcnRpY2FsIHNlcGFyYXRvciB3aGljaCBpcyB1c2VkIHdpdGhpbiBhIHNpbmdsZSB0b29sYmFyIHRvIHNwbGl0XHJcbiAgIGJ1dHRvbnMgaW50byBzdWItZ3JvdXBzLiAqL1xuLyogVGhlIGJ1dHRvbiwgd2hpY2ggd2hlbiBjbGlja2VkIGhpZGVzIChjb2xsYXBzZXMpIGFsbCB0aGUgdG9vbGJhcnMuICovXG4vKlxyXG5Db3B5cmlnaHQgKGMpIDIwMDMtMjAxNCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cDovL2NrZWRpdG9yLmNvbS9saWNlbnNlXHJcbiovXG4vKlxyXG5wYW5lbC5jc3MgKHBhcnQgb2YgZWRpdG9yLmNzcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblBhbmVscyBhcmUgZmxvYXRpbmcgZWxlbWVudHMgdGhhdCBjYW4gaG9sZCBkaWZmZXJlbnQgdHlwZXMgb2YgY29udGVudHMuXHJcblRoZSBmb2xsb3dpbmcgYXJlIGNvbW1vbiB1c2VzIG9mIGl0OlxyXG5cclxuICAgIC0gVGhlIGVsZW1lbnQgdGhhdCB0b29sYmFyIGNvbWJvcyBkaXNwbGF5IHdoZW4gb3BlbmluZyB0aGVtLlxyXG4gICAgLSBUaGUgY29udGV4dCBtZW51LlxyXG4gICAgLSBUaGUgbGlzdCBvZiBpdGVtcyBkaXNwbGF5ZWQgYnkgXCJtZW51IGJ1dHRvbnNcIiAoZS5nLiBzY2F5dCkuXHJcbiAgICAtIFRoZSBwYW5lbCBzaG93biB3aGVuIG9wZW5pbmcgXCJwYW5lbCBidXR0b25zXCIgKGUuZy4gY29sb3IgYnV0dG9ucykuXHJcblxyXG5QYW5lbCBjb250ZW50cyBhcmUgd3JhcHBlZCBpbnRvIGFuIGlmcmFtZSwgc28gaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBhZGRpdGlvbmFsXHJcbkNTUyBsb2FkZWQgaW5zaWRlIHRoZW0gKGUuZy4gdG8gaGF2ZSBtb3JlIGFjY3VyYXRlIHByZXZpZXcgb24gdGhlIHN0eWxlcyBjb21ibykuXHJcblxyXG5UaGUgZm9sbG93aW5nIGlzIGEgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvdXRlciBlbGVtZW50cyBvZiBhIHBhbmVsOlxyXG5cclxuKy0tIC5ja2VfcGFuZWwoKikgLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG58ICstLSBJRlJBTUUuY2tlX3BhbmVsX2ZyYW1lIC0tLS0tLS0tKyB8XHJcbnwgfCArLS0gSFRNTC5ja2VfcGFuZWxfY29udGFpbmVyIC0tKyB8IHxcclxufCB8IHwgKy0tIC5ja2VfcGFuZWxfYmxvY2sgLS0tLS0tKyB8IHwgfFxyXG58IHwgfCB8ICAgICAgICAgICAgICAgICAgICAgICAgICB8IHwgfCB8XHJcbnwgfCB8IHwgICAgIChjb250ZW50cyBoZXJlKSAgICAgIHwgfCB8IHxcclxufCB8IHwgfCAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8IHwgfFxyXG58IHwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHwgfCB8XHJcbnwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxyXG4rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcblxyXG4oKikgQWxsIGtpbmRzIG9mIHBhbmVsIHNoYXJlIHRoZSBhYm92ZSBzdHJ1Y3R1cmUuIE1lbnUgcGFuZWxzIGFkZHMgdGhlXHJcbiAgICAuY2tlX21lbnVfcGFuZWwgY2xhc3MgdG8gdGhlIG91dGVyIGVsZW1lbnQsIHdoaWxlIHRvb2xiYXIgY29tYm9zIGFkZCB0aGVcclxuICAgIC5ja2VfY29tYm9wYW5lbCBjbGFzcy5cclxuXHJcblRoaXMgZmlsZSBhbHNvIGRlZmluZXMgc3R5bGVzIGZvciBwYW5lbCBsaXN0cyAodXNlZCBieSBjb21ib3MpLiBGb3IgbWVudS1saWtlXHJcbnBhbmVsIGNvbnRlbnRzIGFuZCBjb2xvciBwYW5lbHMgY2hlY2sgbWVudS5jc3MgYW5kIGNvbG9ycGFuZWwuY3NzLlxyXG4qL1xuLyogVGhlIGJveCB0aGF0IGhvbGRzIGFuIElGUkFNRS4gSXQncyBpbnNlcnRlZCBpbnRvIGEgaG9zdCBkb2N1bWVudCBhbmQgcG9zaXRpb25lZFxyXG4gICBhYnNvbHV0ZWx5IGJ5IHRoZSBhcHBsaWNhdGlvbi4gSXQgZmxvYXRzIGFib3ZlIHRoZSBob3N0IGRvY3VtZW50L2VkaXRvci4gKi9cbi5ja2VfcGFuZWwge1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICB3aWR0aDogMTIwcHg7XG4gIGhlaWdodDogMTAwcHg7XG4gIG1hcmdpbjogNXB4IDAgMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgYm9yZGVyOiAwIHNvbGlkICMwMDA7XG4gIGJvcmRlci1yYWRpdXM6IDA7XG59XG5cbi8qIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBwYW5lbHMgd2hpY2ggYXJlIHVzZWQgYXMgY29udGV4dCBtZW51cy4gKi9cbi5ja2VfbWVudV9wYW5lbCB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbn1cblxuLyogVGhpcyBjbGFzcyByZXByZXNlbnRzIHBhbmVscyB3aGljaCBhcmUgdXNlZCBieSByaWNoIGNvbWJvcy4gKi9cbi5ja2VfY29tYm9wYW5lbCB7XG4gIHdpZHRoOiAxNTBweDtcbiAgaGVpZ2h0OiAxMTBweDtcbn1cblxuLyogVGhlIElGUkFNRSB0aGUgcGFuZWwgaXMgd3JhcHBlZCBpbnRvLiAqL1xuLmNrZV9wYW5lbF9mcmFtZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi8qIFRoZSBIVE1MIGRvY3VtZW50IHdoaWNoIGlzIGEgZGlyZWN0IGRlc2NlbmRhbnQgb2YgdGhlIElGUkFNRSAqL1xuLmNrZV9wYW5lbF9jb250YWluZXIge1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi8qXHJcbkhlcmUgd2Ugc3RhcnQgdGhlIGRlZmluaXRpb24gb2YgcGFuZWwgbGlzdHMgKGUuZy4gY29tYm8gcGFuZWxzKS4gVGhlIGZvbGxvd2luZ1xyXG5pcyBpdHMgdmlzdWFsIHJlcHJlc2VudGF0aW9uOlxyXG5cclxuKy0tIC5ja2VfcGFuZWxfYmxvY2sgLS0tLS0tLS0tLS0tLS0tLS0rXHJcbnwgKy0tIC5ja2VfcGFuZWxfZ3JvdXB0aXRsZSAtLS0tLS0tLSsgfFxyXG58IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8XHJcbnwgKy0tIC5ja2VfcGFuZWxfbGlzdCAtLS0tLS0tLS0tLS0tLSsgfFxyXG58IHwgKy0tIC5ja2VfcGFuZWxfbGlzdEl0ZW0gLS0tLS0tKyB8IHxcclxufCB8IHwgKy0tIGEgLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHwgfCB8XHJcbnwgfCB8IHwgKy0tIHNwYW4gLS0tLS0tLS0tLS0tLSsgfCB8IHwgfFxyXG58IHwgfCB8IHwgICAgICAgICAgICAgICAgICAgICB8IHwgfCB8IHxcclxufCB8IHwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHwgfCB8XHJcbnwgfCB8ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHwgfFxyXG58IHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHxcclxufCB8ICstLSAuY2tlX3BhbmVsX2xpc3RJdGVtIC0tLS0tLSsgfCB8XHJcbnwgfCB8ICstLSBhIC0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHwgfFxyXG58IHwgfCB8ICstLSBzcGFuIC0tLS0tLS0tLS0tLS0rIHwgfCB8IHxcclxufCB8IHwgfCB8ICAgICAgICAgICAgICAgICAgICAgfCB8IHwgfCB8XHJcbnwgfCB8IHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfCB8IHwgfFxyXG58IHwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfCB8IHxcclxufCB8ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfCB8XHJcbnwgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgfFxyXG58ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHxcclxuKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcbiovXG4vKiBUaGUgbGlzdCBvZiBwYW5lbCBpdGVtcy4gKi9cbi5ja2VfcGFuZWxfbGlzdCB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuXG4vKiBUaGUgaXRlbSBvZiAuY2tlX3BhbmVsX2xpc3QgKi9cbi5ja2VfcGFuZWxfbGlzdEl0ZW0ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qIFRoZSBjaGlsZCBvZiAuY2tlX3BhbmVsX2xpc3RJdGVtLiBUaGVzZSBlbGVtZW50cyBjb250YWluIHNwYW5zIHdoaWNoIGFyZVxyXG4gICB0byBkaXNwbGF5IGEgcmVhbCBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3aGljaCBpcyB2aXNpYmxlIGZvciBhbiBlbmQtdXNlci4gKi9cbi5ja2VfcGFuZWxfbGlzdEl0ZW0gYSB7XG4gIHBhZGRpbmc6IDZweCAxMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgY29sb3I6IGluaGVyaXQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG59XG5cbi5ja2VfcGFuZWxfbGlzdEl0ZW0gYTpob3ZlciwgLmNrZV9wYW5lbF9saXN0SXRlbSBhOmZvY3VzLCAuY2tlX3BhbmVsX2xpc3RJdGVtIGE6YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcbiAgb3V0bGluZTogMDtcbn1cblxuLmNrZV9wYW5lbF9saXN0SXRlbSBhID4gKiB7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdCAhaW1wb3J0YW50O1xuICBmb250LXdlaWdodDogaW5oZXJpdCAhaW1wb3J0YW50O1xufVxuXG4uY2tlX3BhbmVsX2xpc3RJdGVtLmNrZV9zZWxlY3RlZCBhIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcbiAgb3V0bGluZTogbm9uZTtcbn1cblxuLmNrZV9oYyAuY2tlX3BhbmVsX2xpc3RJdGVtIGEge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG59XG5cbi8qIFRoZSB0aXRsZSBvZiB0aGUgZW50aXJlIHBhbmVsIHdoaWNoIGlzIHZpc2libGUgb24gdG9wIG9mIHRoZSBsaXN0LiAqL1xuLmNrZV9wYW5lbF9ncm91cHRpdGxlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogVGhlIGZvbGxvd2luZyBzdHlsZXMgc2V0IGRlZmF1bHRzIG9mIHRoZSBlbGVtZW50cyB1c2VkIGJ5IHRoZSBQYXJhZ3JhcGhcclxuICAgRm9ybWF0IHBhbmVsLiAqL1xuLmNrZV9wYW5lbF9saXN0SXRlbSBwLCAuY2tlX3BhbmVsX2xpc3RJdGVtIGgxLCAuY2tlX3BhbmVsX2xpc3RJdGVtIGgyLCAuY2tlX3BhbmVsX2xpc3RJdGVtIGgzLCAuY2tlX3BhbmVsX2xpc3RJdGVtIGg0LCAuY2tlX3BhbmVsX2xpc3RJdGVtIGg1LCAuY2tlX3BhbmVsX2xpc3RJdGVtIGg2LCAuY2tlX3BhbmVsX2xpc3RJdGVtIHByZSB7XG4gIG1hcmdpbi10b3A6IDA7XG4gIG1hcmdpbi1ib3R0b206IDA7XG59XG5cbi8qKlxuICogQ0tFZGl0b3IgY29uZmlnLlxuICovXG4uY2tlX2VkaXRhYmxlIHtcbiAgcGFkZGluZzogMTJweCAxMnB4O1xuICBmb250LXNpemU6IDAuODc1cmVtO1xuICBmb250LXdlaWdodDogNDAwO1xuICBsaW5lLWhlaWdodDogMS40O1xuICBjb2xvcjogIzAwMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogMDtcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdXRsaW5lOiAwO1xufVxuXG4uY2tlX2ZvY3VzIC5ja2VfZWRpdGFibGUge1xuICBjb2xvcjogIzAwMDtcbn1cblxuLmNrZV9lZGl0YWJsZSBhIHtcbiAgY29sb3I6ICMwMDA7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuLmNrZV9lZGl0YWJsZSBibG9ja3F1b3RlIHtcbiAgcGFkZGluZzogMTJweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbn1cblxuLmNrZV9lZGl0YWJsZSBoMSB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbn1cblxuLmNrZV9lZGl0YWJsZSBoMiB7XG4gIGZvbnQtc2l6ZTogMjJweDtcbn1cblxuLmNrZV9lZGl0YWJsZSBoMyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbn1cblxuLmNrZV9lZGl0YWJsZSBoNCB7XG4gIGZvbnQtc2l6ZTogMThweDtcbn1cblxuLmNrZV9lZGl0YWJsZSBoNSB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbn1cblxuLmNrZV9lZGl0YWJsZSBwOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4uY2tlX2VkaXRhYmxlIHRhYmxlIHtcbiAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmNrZV9lZGl0YWJsZSB0ZCB7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIHBhZGRpbmc6IC41ZW07XG4gIGJvcmRlcjogMXB4IGRvdHRlZCAjZGRkO1xufVxuXG4uY2tlX3NvdXJjZSB7XG4gIGZvbnQtZmFtaWx5OiAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogc21hbGw7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIHdoaXRlLXNwYWNlOiBwcmU7XG59XG5cbi5ja2VfZWRpdGFibGUge1xuICBib3gtc2hhZG93OiBpbnNldCAycHggMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4xMykgIWltcG9ydGFudDtcbn1cblxuLmNrZV9lZGl0YWJsZSBhIHtcbiAgY29sb3I6ICM3NGJjZDE7XG59XG4iLCIvKlxuQ29uZmlnLlxuICovXG4kZW5hYmxlLXNoYWRvd3M6IHRydWU7XG5cbi8qXG5Db2xvcnMuXG4gKi9cbiRwcmltYXJ5OiAjMDAwO1xuJHN1Y2Nlc3M6ICM3NGJjZDE7XG4kZGFuZ2VyOiAjZmZiN2JiO1xuJGluZm86ICNlZGUyNmI7XG5cbiRib2R5LXRleHQ6ICMwMDA7XG4kYm9keS1iZzogI2ZmZjtcblxuJGxpbmstaG92ZXItY29sb3I6ICM3NGJjZDE7XG4kYW5ha2luLXN1Y2Nlc3MtYmc6ICNkMWU4ZWY7XG4kYXBwLWluZm8tdGV4dDogJGJvZHktdGV4dDtcblxuJGJ0bi1wcmltYXJ5LWJnOiAjMDAwO1xuXG4vKlxuR3JpZC5cbiAqL1xuLypcblNwYWNlcnMuXG4gKi9cbiRhcHAtbWFyZ2luLWJvdHRvbTogNDBweDtcbiRhcHAtcGFkZGluZy15OiAxNXB4O1xuJGFwcC1wYWRkaW5nLXg6IDA7XG4kYXBwLWJvZHktcGFkZGluZzogMTEwcHggMCA1MHB4O1xuJGFwcC1oZWFkZXItbWFyZ2luOiA0MHB4IDAgMjBweDtcblxuLypcbkJvcmRlci5cbiAqL1xuJGJvcmRlci1yYWRpdXM6IDA7XG4kYm9yZGVyLXdpZHRoOiAwO1xuJGJvcmRlci1jb2xvcjogI2ViZWJlYjtcblxuLypcblRleHQuXG4gKi9cbiRmb250LWZhbWlseS1iYXNlOiAnQVRDIE92ZXJsb29rJywgc2Fucy1zZXJpZjtcbiRoZWFkaW5ncy1mb250LXdlaWdodDogNzAwO1xuJGxpbmstaG92ZXItZGVjb3JhdGlvbjogbm9uZTtcblxuLypcbk5hdnMuXG4gKi9cbiRuYXYtbGluay1wYWRkaW5nLXk6IDEwcHg7XG4kbmF2LWxpbmstcGFkZGluZy14OiAxNXB4O1xuJGFwcC1zdWJtZW51LWxpbmstbWFyZ2luOiAwIDVweCAxMHB4O1xuXG4vKlxuTmF2YmFyLlxuICovXG4kYXBwLW5hdmJhci1uYXYtbGluay1wYWRkaW5nLXk6IDIwcHg7XG4kbmF2YmFyLW5hdi1saW5rLXBhZGRpbmcteDogMjBweDtcbiRhcHAtbmF2YmFyLWJhY2tncm91bmQ6ICRib2R5LWJnO1xuJGFwcC1uYXZiYXItZGFyay1ob3Zlci1iZzogJGJvcmRlci1jb2xvcjtcbiRuYXZiYXItZGFyay1hY3RpdmUtYmc6ICRib2R5LXRleHQ7XG4kbmF2YmFyLWRhcmstY29sb3I6ICRib2R5LXRleHQ7XG4kbmF2YmFyLWRhcmstaG92ZXItY29sb3I6ICRib2R5LXRleHQ7XG4kbmF2YmFyLWRhcmstYWN0aXZlLWNvbG9yOiAkYm9keS1iZztcbiRhbmFraW4tbmF2YmFyLWRhcmstYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yO1xuJG5hdmJhci1ib3JkZXI6IDFweCBzb2xpZCAkYW5ha2luLW5hdmJhci1kYXJrLWJvcmRlci1jb2xvcjtcblxuXG4vKlxuQnJlYWRjcnVtYnMuXG4gKi9cbiRicmVhZGNydW1iLWJnOiB0cmFuc3BhcmVudDtcbiRicmVhZGNydW1iLWNvbG9yOiAkYm9keS10ZXh0O1xuJGJyZWFkY3J1bWItcGFkZGluZy15OiAwO1xuJGJyZWFkY3J1bWItZGl2aWRlci1jb2xvcjogJGJvZHktdGV4dDtcblxuLypcbkFsZXJ0LlxuICovXG4kYWxlcnQtcGFkZGluZy14OiAxNXB4O1xuXG4vKlxuQ2FyZC5cbiAqL1xuJGNhcmQtc3BhY2VyLXg6IDE1cHg7XG4kY2FyZC1zcGFjZXIteTogMTVweDtcbiRjYXJkLWNhcC1iZzogdHJhbnNwYXJlbnQ7XG4kY2FyZC1ib3JkZXItd2lkdGg6IDA7XG4kY2FyZC1ib3JkZXItY29sb3I6ICMwMDA7XG4kY2FyZC1kYW5nZXItYmc6ICRjYXJkLWNhcC1iZztcbiRjYXJkLWRhbmdlci1ib3JkZXI6ICRkYW5nZXI7XG5cblxuLypcbklucHV0LlxuICovXG4kaW5wdXQtYnRuLXBhZGRpbmcteTogMTJweDtcbiRpbnB1dC1idG4tcGFkZGluZy14OiAyMHB4O1xuJGFwcC1mb3JtLWxhYmVsLWZvbnQtd2VpZ2h0OiBub3JtYWw7XG5cbiRpbnB1dC1wYWRkaW5nLXk6ICRpbnB1dC1idG4tcGFkZGluZy15O1xuJGlucHV0LXBhZGRpbmcteDogJGlucHV0LWJ0bi1wYWRkaW5nLXk7XG4kaW5wdXQtaGVpZ2h0OiA0NXB4O1xuXG5cbi8qXG5MaXN0IGdyb3VwLlxuICovXG4kbGlzdC1ncm91cC1pdGVtLXBhZGRpbmcteDogMTVweDtcbiRsaXN0LWdyb3VwLWFjdGlvbi1jb2xvcjogJGJvZHktdGV4dDtcblxuLypcblRpdGxlLlxuICovXG4kYXBwLWhlYWRlci1ib3JkZXItYm90dG9tOiB0cmFuc3BhcmVudDtcblxuLypcblBhbmVsLlxuICovXG4kcGFuZWwtYm9keS1wYWRkaW5nOiAxNXB4IDA7XG4kcGFuZWwtaGVhZGluZy1wYWRkaW5nOiAxNXB4IDA7XG5cbiRwYW5lbC1kZWZhdWx0LXRleHQ6ICRib2R5LXRleHQ7XG4kcGFuZWwtZGVmYXVsdC1ib3JkZXI6ICRib2R5LXRleHQ7XG4kcGFuZWwtZGVmYXVsdC1oZWFkaW5nLWJnOiB0cmFuc3BhcmVudDtcbiRwYW5lbC1kYW5nZXItaGVhZGluZy1iZzogdHJhbnNwYXJlbnQ7XG5cbi8qXG5MaXN0cy5cbiAqL1xuJGxpc3QtZ3JvdXAtYm9yZGVyOiAjZWJlYmViO1xuJGxpc3QtZ3JvdXAtbGluay1jb2xvcjogJGJvZHktdGV4dDtcblxuLypcbkJ1dHRvbnMuXG4gKi9cbiRidG4tYm94LXNoYWRvdzogbm9uZTtcblxuLypcbkZvcm1zLlxuICovXG4kaW5wdXQtY29sb3I6ICRib2R5LXRleHQ7XG4kaW5wdXQtYm9yZGVyLXdpZHRoOiAxcHg7XG4kaW5wdXQtYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiRpbnB1dC1ncm91cC1hZGRvbi1iZzogI2ZmZjtcbiRpbnB1dC1jb2xvci1wbGFjZWhvbGRlcjogIzlmOWY5ZjtcbiRpbnB1dC1ib3gtc2hhZG93OiBpbnNldCAycHggMnB4IDZweCAwIHJnYmEoMCwgMCwgMCwgMC4xMykgIWltcG9ydGFudDtcblxuJGhyLWJvcmRlci13aWR0aDogMXB4O1xuJGhyLWJvcmRlcjogI2ViZWJlYjtcblxuLypcblRhYmxlcy5cbiAqL1xuJHRhYmxlLWNlbGwtcGFkZGluZzogMTVweDtcblxuLypcblBhZ2luYXRpb24uXG4qL1xuJHBhZ2luYXRpb24taG92ZXItY29sb3I6ICRib2R5LXRleHQ7XG4kZHJvcGRvd24tc3BhY2VyOiAwO1xuXG5cbi8qXG5CYWRnZS5cbiAqL1xuJGFwcC1iYWRnZS1iZzogdHJhbnNwYXJlbnQ7XG4kYXBwLWJhZGdlLWNvbG9yOiAjMDAwICFpbXBvcnRhbnQ7XG4kYmFkZ2UtZm9udC13ZWlnaHQ6IDcwMDtcbiRiYWRnZS1wYWRkaW5nLXk6IDNweDtcbiRiYWRnZS1wYWRkaW5nLXg6IDVweDtcbiRiYWRnZS1ib3JkZXItcmFkaXVzOiAwO1xuXG4vKlxuRGF0ZXBpY2tlclxuICovXG4kZGF0ZXBpY2tlci10ZC1ib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiIsIi8qXG5Db2xvcnMuXG4gKi9cbiRncmVlbjogIzVjYjg1YyAhZGVmYXVsdDtcbiRyZWQ6ICNkOTUzNGYgIWRlZmF1bHQ7XG4kd2hpdGU6ICNmZmYgIWRlZmF1bHQ7XG4kYmxhY2s6ICMwMDAgIWRlZmF1bHQ7XG4kY3lhbjogI2Q5ZWRmNyAhZGVmYXVsdDtcblxuJGdyYXktMTAwOiAjZjlmOWY5ICFkZWZhdWx0O1xuJGdyYXktMjAwOiAjZjVmNWY1ICFkZWZhdWx0O1xuJGdyYXktMzAwOiAjZWVlICFkZWZhdWx0O1xuJGdyYXktNDAwOiAjZGRkICFkZWZhdWx0O1xuJGdyYXktNTAwOiAjY2NjICFkZWZhdWx0O1xuJGdyYXktNjAwOiAjOWQ5ZDlkICFkZWZhdWx0O1xuJGdyYXktNzAwOiAjNTU1ICFkZWZhdWx0O1xuJGdyYXktODAwOiAjMzMzICFkZWZhdWx0O1xuJGdyYXktOTAwOiAjMjIyICFkZWZhdWx0O1xuXG4kYm9keS1iZzogJGdyYXktMTAwICFkZWZhdWx0O1xuJGJvZHktdGV4dDogJGdyYXktOTAwICFkZWZhdWx0O1xuXG4kcHJpbWFyeTogJGdyYXktOTAwICFkZWZhdWx0O1xuJHNlY29uZGFyeTogJGdyYXktNDAwICFkZWZhdWx0O1xuXG4kZGFyazogJHByaW1hcnkgIWRlZmF1bHQ7XG4keWlxLXRleHQtZGFyazogJHByaW1hcnkgIWRlZmF1bHQ7XG4kZGFuZ2VyOiAkcmVkICFkZWZhdWx0O1xuJGVycm9yOiAkcmVkICFkZWZhdWx0O1xuJHN1Y2Nlc3M6ICRncmVlbiAhZGVmYXVsdDtcbiRpbmZvOiAkY3lhbiAhZGVmYXVsdDtcbiRhcHAtaW5mby10ZXh0OiAjMzE3MDhmICFkZWZhdWx0O1xuXG4kY29tcG9uZW50LWFjdGl2ZS1iZzogJHByaW1hcnkgIWRlZmF1bHQ7XG4kY29tcG9uZW50LWFjdGl2ZS1jb2xvcjogJHdoaXRlICFkZWZhdWx0O1xuXG4vKlxuR3JpZC5cbiAqL1xuJGdyaWQtYnJlYWtwb2ludHM6IChcbiAgICAgICAgeHM6IDAsXG4gICAgICAgIG1kOiA3NjhweCxcbiAgICAgICAgbGc6IDEwMjRweFxuKSAhZGVmYXVsdDtcblxuJGNvbnRhaW5lci1tYXgtd2lkdGhzOiAoXG4gICAgICAgIHhsOiAxNDAwcHhcbikgIWRlZmF1bHQ7XG5cbi8qXG5TcGFjZXJzLlxuICovXG4kYXBwLW1hcmdpbi1ib3R0b206IDIwcHggIWRlZmF1bHQ7XG4kYXBwLXBhZGRpbmcteTogMTBweCAhZGVmYXVsdDtcbiRhcHAtcGFkZGluZy14OiAxNXB4ICFkZWZhdWx0O1xuJGFwcC1ib2R5LXBhZGRpbmc6IDcwcHggMCAhZGVmYXVsdDtcblxuLypcbkJvZHkuXG4gKi9cbiRib2R5LWJnOiAkd2hpdGUgIWRlZmF1bHQ7XG4kYm9keS1jb2xvcjogIzAwMCAhZGVmYXVsdDtcblxuLypcbkJvcmRlci5cbiAqL1xuJGJvcmRlci1yYWRpdXM6IDNweCAhZGVmYXVsdDtcbiRib3JkZXItcmFkaXVzLXNtOiAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcblxuJGJvcmRlci13aWR0aDogMXB4ICFkZWZhdWx0O1xuJGJvcmRlci1zdHlsZTogc29saWQgIWRlZmF1bHQ7XG4kYm9yZGVyLWNvbG9yOiAkZ3JheS00MDAgIWRlZmF1bHQ7XG5cbi8qXG5UZXh0LlxuICovXG4kZm9udC1mYW1pbHktYmFzZTogXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZiAhZGVmYXVsdDtcbiRhcHAtZGVmYXVsdC1mb250OiBcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmO1xuXG4kZm9udC1zaXplLWJhc2U6IDE0cHggIWRlZmF1bHQ7XG4kZm9udC1zaXplLXNtOiAxMnB4ICFkZWZhdWx0O1xuJGZvbnQtc2l6ZS1sZzogMTZweCAhZGVmYXVsdDtcbiRsaW5lLWhlaWdodC1iYXNlOiAxLjQgIWRlZmF1bHQ7XG5cbiRoMS1mb250LXNpemU6IDM2cHggIWRlZmF1bHQ7XG4kaDItZm9udC1zaXplOiAxOHB4ICFkZWZhdWx0O1xuJHNtYWxsLWZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1zbSAhZGVmYXVsdDtcblxuJGFwcC1oZWFkZXItbWFyZ2luOiA0MHB4IDAgJGFwcC1tYXJnaW4tYm90dG9tICFkZWZhdWx0O1xuJGFwcC1oZWFkZXItcGFkZGluZy1ib3R0b206IDEwcHggIWRlZmF1bHQ7XG4kYXBwLWhlYWRlci10ZXh0LWFsaWduOiBjZW50ZXIgIWRlZmF1bHQ7XG4kYXBwLWhlYWRlci1ib3JkZXItYm90dG9tOiAxcHggc29saWQgJGdyYXktMzAwICFkZWZhdWx0O1xuXG4kbGluay1jb2xvcjogJHByaW1hcnkgIWRlZmF1bHQ7XG5cbiRtYXJrLWJnOiAkc3VjY2VzcyAhZGVmYXVsdDtcbiRtYXJrLXBhZGRpbmc6IDAgIWRlZmF1bHQ7XG5cbiRjYXJldC13aWR0aDogNHB4ICFkZWZhdWx0O1xuXG4vKlxuTmF2cy5cbiAqL1xuJG5hdi1saW5rLXBhZGRpbmcteTogMTBweCAhZGVmYXVsdDtcbiRuYXYtbGluay1wYWRkaW5nLXg6ICRhcHAtcGFkZGluZy14ICFkZWZhdWx0O1xuJGFwcC1zdWJtZW51LWxpbmstbWFyZ2luOiAwIDJweCAxMHB4ICFkZWZhdWx0O1xuJGFwcC1zdWJtZW51LW1hcmdpbi1ib3R0b206ICRhcHAtbWFyZ2luLWJvdHRvbSAhZGVmYXVsdDtcbiRhcHAtc3VibWVudS1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhZGVmYXVsdDtcbiRhcHAtc3VibWVudS1ob3Zlci1iZzogJGdyYXktMzAwICFkZWZhdWx0O1xuJGFwcC1zdWJtZW51LWhvdmVyLWNvbG9yOiAkYm9keS10ZXh0ICFkZWZhdWx0O1xuXG4vKlxuTmF2YmFyLlxuICovXG4kYXBwLW5hdmJhci1leHBhbmQtYnJlYWtwb2ludDogbWQgIWRlZmF1bHQ7XG4kbmF2YmFyLXBhZGRpbmcteTogMCAhZGVmYXVsdDtcbiRuYXZiYXItcGFkZGluZy14OiAwICFkZWZhdWx0O1xuJGFwcC1uYXZiYXItbmF2LWxpbmstcGFkZGluZy15OiAxNXB4ICFkZWZhdWx0O1xuJG5hdmJhci1uYXYtbGluay1wYWRkaW5nLXg6IDEycHggIWRlZmF1bHQ7XG4kbmF2YmFyLWRhcmstY29sb3I6ICRncmF5LTUwMCAhZGVmYXVsdDtcbiRhcHAtbmF2YmFyLWJhY2tncm91bmQ6ICRkYXJrICFkZWZhdWx0O1xuJG5hdmJhci1kYXJrLWhvdmVyLWNvbG9yOiAkd2hpdGUgIWRlZmF1bHQ7XG4kYXBwLW5hdmJhci1kYXJrLWhvdmVyLWJnOiAjMDkwOTA5ICFkZWZhdWx0O1xuJG5hdmJhci1kYXJrLWFjdGl2ZS1iZzogJGFwcC1uYXZiYXItZGFyay1ob3Zlci1iZyAhZGVmYXVsdDtcbiRuYXZiYXItYm9yZGVyOiAxcHggc29saWQgJG5hdmJhci1kYXJrLWFjdGl2ZS1iZyAhZGVmYXVsdDtcblxuJG5hdmJhci10b2dnbGVyLXBhZGRpbmcteTogNXB4ICFkZWZhdWx0O1xuJG5hdmJhci10b2dnbGVyLXBhZGRpbmcteDogNXB4ICFkZWZhdWx0O1xuJG5hdmJhci1kYXJrLXRvZ2dsZXItYm9yZGVyOiAwICFkZWZhdWx0O1xuXG4vKlxuQnJlYWRjcnVtYnMuXG4gKi9cbiRicmVhZGNydW1iLXBhZGRpbmcteTogJGFwcC1wYWRkaW5nLXkgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1wYWRkaW5nLXg6ICRhcHAtcGFkZGluZy14ICFkZWZhdWx0O1xuJGJyZWFkY3J1bWItbWFyZ2luLWJvdHRvbTogJGFwcC1tYXJnaW4tYm90dG9tICFkZWZhdWx0O1xuJGJyZWFkY3J1bWItaXRlbS1wYWRkaW5nOiA1cHggIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1iZzogJGdyYXktMjAwICFkZWZhdWx0O1xuJGJyZWFkY3J1bWItZGl2aWRlci1jb2xvcjogJGdyYXktNDAwICFkZWZhdWx0O1xuXG4kaHItbWFyZ2luLXk6IDE1cHggIWRlZmF1bHQ7XG4kaHItYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4vKlxuQWxlcnQuXG4gKi9cbiRhbGVydC1wYWRkaW5nLXk6ICRhcHAtcGFkZGluZy15ICFkZWZhdWx0O1xuJGFsZXJ0LXBhZGRpbmcteDogJGFwcC1wYWRkaW5nLXggIWRlZmF1bHQ7XG4kYWxlcnQtbWFyZ2luLWJvdHRvbTogJGFwcC1tYXJnaW4tYm90dG9tICFkZWZhdWx0O1xuXG4vKlxuQ2FyZC5cbiAqL1xuJGNhcmQtYmc6ICR3aGl0ZSAhZGVmYXVsdDtcbiRjYXJkLWNvbG9yOiAkYm9keS1jb2xvciAhZGVmYXVsdDtcbiRjYXJkLXNwYWNlci15OiAkYXBwLXBhZGRpbmcteSAhZGVmYXVsdDtcbiRjYXJkLXNwYWNlci14OiAkYXBwLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRjYXJkLWNhcC1jb2xvcjogbnVsbCAhZGVmYXVsdDtcbiRjYXJkLWNhcC1iZzogJGdyYXktMjAwICFkZWZhdWx0O1xuJGNhcmQtYm9yZGVyLXdpZHRoOiAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuJGNhcmQtYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGNhcmQtaW5uZXItYm9yZGVyLXJhZGl1czogMCAhZGVmYXVsdDtcbiRhcHAtY2FyZC1tYXJnaW4tYm90dG9tOiAkYXBwLW1hcmdpbi1ib3R0b20gIWRlZmF1bHQ7XG5cbiRjYXJkLWRhbmdlci1iZzogI2YyZGVkZSAhZGVmYXVsdDtcbiRjYXJkLWRhbmdlci1ib3JkZXI6ICNlYmNjZDEgIWRlZmF1bHQ7XG4kY2FyZC1kYW5nZXItY29sb3I6ICRkYW5nZXIgIWRlZmF1bHQ7XG5cbi8qXG5HcmlkIHZpZXcuXG4gKi9cbiRhcHAtZ3JpZC12aWV3LW1hcmdpbi15OiAxNXB4ICFkZWZhdWx0O1xuJGFwcC1ncmlkLXZpZXctYm9yZGVyOiAxcHggc29saWQgJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRhcHAtZ3JpZC12aWV3LWJ1dHRvbnMtdG9wOiA2cHggIWRlZmF1bHQ7XG5cbi8qXG5CdXR0b25zLlxuICovXG4kYnRuLXByaW1hcnktYmc6ICRwcmltYXJ5ICFkZWZhdWx0O1xuJGJ0bi1wcmltYXJ5LWhvdmVyLWJnOiBkYXJrZW4oJGJ0bi1wcmltYXJ5LWJnLCA3LjUlKSAhZGVmYXVsdDtcbiRidG4tcHJpbWFyeS1hY3RpdmUtYmc6IGRhcmtlbigkYnRuLXByaW1hcnktYmcsIDEwJSkgIWRlZmF1bHQ7XG4kYnRuLXByaW1hcnktYm9yZGVyLWNvbG9yOiAkcHJpbWFyeSAhZGVmYXVsdDtcbiRidG4tcHJpbWFyeS1ob3Zlci1ib3JkZXItY29sb3I6ICRidG4tcHJpbWFyeS1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kYnRuLXByaW1hcnktYWN0aXZlLWJvcmRlci1jb2xvcjogJGJ0bi1wcmltYXJ5LWJvcmRlci1jb2xvciAhZGVmYXVsdDtcblxuJGJ0bi1zZWNvbmRhcnktYmc6ICR3aGl0ZSAhZGVmYXVsdDtcbiRidG4tc2Vjb25kYXJ5LWhvdmVyLWJnOiAkZ3JheS0yMDAgIWRlZmF1bHQ7XG4kYnRuLXNlY29uZGFyeS1hY3RpdmUtYmc6ICRncmF5LTMwMCAhZGVmYXVsdDtcbiRidG4tc2Vjb25kYXJ5LWJvcmRlci1jb2xvcjogJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRidG4tc2Vjb25kYXJ5LWhvdmVyLWJvcmRlci1jb2xvcjogJGJ0bi1zZWNvbmRhcnktYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGJ0bi1zZWNvbmRhcnktYWN0aXZlLWJvcmRlci1jb2xvcjogJGJ0bi1zZWNvbmRhcnktYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4kYnRuLXBhZGRpbmcteS1zbTogNHB4ICFkZWZhdWx0O1xuJGJ0bi1wYWRkaW5nLXgtc206IDZweCAhZGVmYXVsdDtcbiRidG4tbGluZS1oZWlnaHQtc206IDEgIWRlZmF1bHQ7XG5cblxuLypcbklucHV0LlxuICovXG4kZm9ybS1ncm91cC1tYXJnaW4tYm90dG9tOiAxNXB4ICFkZWZhdWx0O1xuJGFwcC1mb3JtLWdyb3VwLWJ1dHRvbnMtbWFyZ2luLXRvcDogMjBweCAhZGVmYXVsdDtcbiRmb3JtLXRleHQtbWFyZ2luLXRvcDogNnB4ICFkZWZhdWx0O1xuXG4kZm9ybS1jaGVjay1pbmxpbmUtbWFyZ2luLXg6IDIwcHggIWRlZmF1bHQ7XG4kZm9ybS1jaGVjay1pbmxpbmUtaW5wdXQtbWFyZ2luLXg6IDEwcHggIWRlZmF1bHQ7XG5cbiRpbnB1dC1idG4tcGFkZGluZy15OiA4cHggIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLXBhZGRpbmcteDogMTJweCAhZGVmYXVsdDtcbiRpbnB1dC1oZWlnaHQ6IDM0cHggIWRlZmF1bHQ7XG5cbiRpbnB1dC1idG4tZm9jdXMtd2lkdGg6IDFweCAhZGVmYXVsdDtcbiRpbnB1dC1idG4tcGFkZGluZy15LXNtOiAkaW5wdXQtYnRuLXBhZGRpbmcteSAhZGVmYXVsdDtcbiRpbnB1dC1idG4tcGFkZGluZy14LXNtOiAkaW5wdXQtYnRuLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRpbnB1dC1idG4tcGFkZGluZy15LWxnOiAkaW5wdXQtYnRuLXBhZGRpbmcteSAhZGVmYXVsdDtcbiRpbnB1dC1idG4tcGFkZGluZy14LWxnOiAkaW5wdXQtYnRuLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRpbnB1dC1idG4tYm9yZGVyLXdpZHRoOiAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuXG4kY3VzdG9tLXNlbGVjdC1pbmRpY2F0b3ItcGFkZGluZzogMTBweDtcblxuJGlucHV0LXBhZGRpbmcteTogJGlucHV0LWJ0bi1wYWRkaW5nLXkgIWRlZmF1bHQ7XG4kaW5wdXQtcGFkZGluZy14OiAkaW5wdXQtYnRuLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRpbnB1dC1jb2xvcjogJGdyYXktNzAwICFkZWZhdWx0O1xuJGlucHV0LWJvcmRlci13aWR0aDogJGlucHV0LWJ0bi1ib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kaW5wdXQtYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgLjA3NSkgIWRlZmF1bHQ7XG4kaW5wdXQtZm9jdXMtY29sb3I6ICRib2R5LXRleHQgIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLWZvY3VzLXdpZHRoOiAxcHggIWRlZmF1bHQ7XG4kaW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yOiAjNjZhZmU5ICFkZWZhdWx0O1xuXG4kYXBwLWZvcm0tbGFiZWwtcGFkZGluZy10b3A6ICRpbnB1dC1wYWRkaW5nLXkgKyAkaW5wdXQtYm9yZGVyLXdpZHRoO1xuJGFwcC1mb3JtLWxhYmVsLWZvbnQtd2VpZ2h0OiBib2xkICFkZWZhdWx0O1xuXG4vKlxuTGlzdCBncm91cC5cbiAqL1xuJGxpc3QtZ3JvdXAtYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGxpc3QtZ3JvdXAtaXRlbS1wYWRkaW5nLXk6ICRhcHAtcGFkZGluZy15ICFkZWZhdWx0O1xuJGxpc3QtZ3JvdXAtaXRlbS1wYWRkaW5nLXg6ICRhcHAtcGFkZGluZy14ICFkZWZhdWx0O1xuXG4vKlxuVGFibGVzLlxuICovXG4kYXBwLXRhYmxlLW1hcmdpbi1ib3R0b206IDAgIWRlZmF1bHQ7XG4kdGFibGUtYm9yZGVyLXdpZHRoOiAxcHggIWRlZmF1bHQ7XG4kdGFibGUtYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCAhZGVmYXVsdDtcbiRhcHAtdGFibGUtdGgtYm9yZGVyLXdpZHRoOiAxcHggIWRlZmF1bHQ7XG4kYXBwLXRhYmxlLXRoLWJvcmRlci1jb2xvcjogJHRhYmxlLWJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiR0YWJsZS1jZWxsLXBhZGRpbmc6IDEycHggIWRlZmF1bHQ7XG4kdGFibGUtYWNjZW50LWJnOiAkZ3JheS0yMDAgIWRlZmF1bHQ7XG4kdGFibGUtaG92ZXItYmc6ICRncmF5LTMwMCAhZGVmYXVsdDtcbiRhcHAtdGFibGUtdGgtYWN0aXZlLWZvbnQtc3R5bGU6IG5vcm1hbCAhZGVmYXVsdDtcbiRhcHAtdGFibGUtdGgtYWN0aXZlLXRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lICFkZWZhdWx0O1xuJGFwcC10YWJsZS10aC1zZWxlY3RlZC1iZzogJGluZm8gIWRlZmF1bHQ7XG5cbi8qXG5QYWdpbmF0aW9uLlxuICovXG4kYXBwLXBhZ2luYXRpb24tanVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWRlZmF1bHQ7XG4kYXBwLXBhZ2luYXRpb24tbWFyZ2luOiAzMHB4IDAgMCAhZGVmYXVsdDtcbiRhcHAtcGFnaW5hdGlvbi1wYWRkaW5nOiAyMHB4IDAgMTBweCAhZGVmYXVsdDtcbiRhcHAtcGFnaW5hdGlvbi1ib3JkZXItdG9wOiAxcHggc29saWQgJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcblxuJHBhZ2luYXRpb24tcGFkZGluZy15OiAkaW5wdXQtYnRuLXBhZGRpbmcteSAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLXBhZGRpbmcteDogJGlucHV0LWJ0bi1wYWRkaW5nLXggIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1saW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LWJhc2UgIWRlZmF1bHQ7XG5cbiRwYWdpbmF0aW9uLWJvcmRlci1jb2xvcjogJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLWhvdmVyLWJvcmRlci1jb2xvcjogJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcblxuJHBhZ2luYXRpb24tZm9jdXMtYm94LXNoYWRvdzogbm9uZSAhZGVmYXVsdDtcblxuLypcbkRyb3Bkb3duLlxuICovXG4kZHJvcGRvd24tbWluLXdpZHRoOiAxNjBweCAhZGVmYXVsdDtcbiRkcm9wZG93bi1wYWRkaW5nLXk6IDVweCAhZGVmYXVsdDtcbiRkcm9wZG93bi1zcGFjZXI6IDJweCAhZGVmYXVsdDtcbiRkcm9wZG93bi1iZzogI2ZmZiAhZGVmYXVsdDtcbiRkcm9wZG93bi1ib3JkZXItY29sb3I6ICRib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kZHJvcGRvd24tZGl2aWRlci1iZzogJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcblxuJGFwcC1kcm9wZG93bi1idXR0b24tYmc6ICRncmF5LTEwMCAhZGVmYXVsdDtcbiRhcHAtZHJvcGRvd24tYnV0dG9uLWNvbG9yOiAkYm9keS10ZXh0ICFkZWZhdWx0O1xuJGFwcC1kcm9wZG93bi1idXR0b24tYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4kYXBwLWRyb3Bkb3duLWJ1dHRvbi1hY3RpdmUtYmc6ICRncmF5LTMwMCAhZGVmYXVsdDtcbiRhcHAtZHJvcGRvd24tYnV0dG9uLWFjdGl2ZS1jb2xvcjogJGFwcC1kcm9wZG93bi1idXR0b24tY29sb3IgIWRlZmF1bHQ7XG4kYXBwLWRyb3Bkb3duLWJ1dHRvbi1hY3RpdmUtYm9yZGVyLWNvbG9yOiAkYXBwLWRyb3Bkb3duLWJ1dHRvbi1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG5cbiRkcm9wZG93bi1saW5rLWNvbG9yOiAkbGluay1jb2xvciAhZGVmYXVsdDtcbiRkcm9wZG93bi1saW5rLWhvdmVyLWNvbG9yOiAkbGluay1jb2xvciAhZGVmYXVsdDtcbiRkcm9wZG93bi1pdGVtLXBhZGRpbmcteTogJGlucHV0LWJ0bi1wYWRkaW5nLXkgIWRlZmF1bHQ7XG4kZHJvcGRvd24taXRlbS1wYWRkaW5nLXg6ICRpbnB1dC1idG4tcGFkZGluZy14ICFkZWZhdWx0O1xuXG4vKlxuQmFkZ2UuXG4gKi9cbiRiYWRnZS1mb250LXNpemU6IDEycHggIWRlZmF1bHQ7XG4kYXBwLWJhZGdlLWJnOiAkZ3JheS02MDAgIWRlZmF1bHQ7XG4kYXBwLWJhZGdlLWNvbG9yOiAkd2hpdGUgIWltcG9ydGFudCAhZGVmYXVsdDtcbiRhcHAtYmFkZ2UtYWN0aXZlLWJnOiAkY29tcG9uZW50LWFjdGl2ZS1jb2xvciAhZGVmYXVsdDtcbiRhcHAtYmFkZ2UtYWN0aXZlLWNvbG9yOiAkY29tcG9uZW50LWFjdGl2ZS1iZyAhaW1wb3J0YW50ICFkZWZhdWx0O1xuJGJhZGdlLWZvbnQtd2VpZ2h0OiBub3JtYWwgIWRlZmF1bHQ7XG4kYmFkZ2UtcGFkZGluZy15OiAzcHggIWRlZmF1bHQ7XG4kYmFkZ2UtcGFkZGluZy14OiA3cHggIWRlZmF1bHQ7XG4kYmFkZ2UtYm9yZGVyLXJhZGl1czogMTBweCAhZGVmYXVsdDtcblxuLypcblRvb2x0aXAuXG4gKi9cbiR0b29sdGlwLW1heC13aWR0aDogMjAwcHggIWRlZmF1bHQ7XG4kdG9vbHRpcC1taW4td2lkdGg6IDgwcHggIWRlZmF1bHQ7XG5cbi8qKlxuVGh1bWJuYWlsLlxuICovXG4kdGh1bWJuYWlsLXBhZGRpbmc6ICRhcHAtcGFkZGluZy15ICFkZWZhdWx0O1xuJHRodW1ibmFpbC1jYXB0aW9uLXBhZGRpbmc6ICRhcHAtcGFkZGluZy14ICFkZWZhdWx0O1xuXG4vKlxuSWNvbi5cbiAqL1xuJGFwcC1pY29uLW1hcmdpbi14OiA2cHggIWRlZmF1bHQ7XG5cbi8qXG5EYXRlcGlja2VyLlxuICovXG4kZGF0ZXBpY2tlci1zcGFjZXIteTogJGNhcmQtc3BhY2VyLXkgIWRlZmF1bHQ7XG4kZGF0ZXBpY2tlci1zcGFjZXIteDogJGNhcmQtc3BhY2VyLXggIWRlZmF1bHQ7XG4kZGF0ZXBpY2tlci1zcGFjZXI6ICRkYXRlcGlja2VyLXNwYWNlci15ICRkYXRlcGlja2VyLXNwYWNlci14ICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItY29sb3I6ICRjYXJkLWNvbG9yICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItaGVhZGVyLW1hcmdpbjogLTEwcHggLTE1cHggMTBweCAhZGVmYXVsdDtcbiRkYXRlcGlja2VyLWhlYWRlci1wYWRkaW5nOiAkZGF0ZXBpY2tlci1zcGFjZXIgIWRlZmF1bHQ7XG4kZGF0ZXBpY2tlci1ib3JkZXI6ICRjYXJkLWJvcmRlci13aWR0aCBzb2xpZCAkY2FyZC1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kZGF0ZXBpY2tlci1oZWFkZXItYmc6ICRjYXJkLWNhcC1iZyAhZGVmYXVsdDtcbiRkYXRlcGlja2VyLWhlYWRlci1jb2xvcjogJGNhcmQtY2FwLWNvbG9yICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItdGQtcGFkZGluZzogMCAhZGVmYXVsdDtcbiRkYXRlcGlja2VyLXRkLWJvcmRlcjogJGNhcmQtYm9yZGVyLXdpZHRoIHNvbGlkICRjYXJkLWJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRkYXRlcGlja2VyLWxpbmstcGFkZGluZzogNnB4ICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItbGluay1iZzogJGdyYXktMjAwICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItbGluay1jb2xvcjogJGlucHV0LWNvbG9yICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItbGluay1ob3Zlci1iZzogJGdyYXktMzAwICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItbGluay1ob3Zlci1jb2xvcjogJGRhdGVwaWNrZXItbGluay1jb2xvciAhZGVmYXVsdDtcbiRkYXRlcGlja2VyLWxpbmstY3VycmVudC1iZzogJGdyYXktOTAwICFkZWZhdWx0O1xuJGRhdGVwaWNrZXItbGluay1jdXJyZW50LWNvbG9yOiAkd2hpdGUgIWRlZmF1bHQ7XG4kZGF0ZXBpY2tlci1saW5rLXRvZGF5LWJnOiAkZ3JheS01MDAgIWRlZmF1bHQ7XG4kZGF0ZXBpY2tlci1saW5rLXRvZGF5LWNvbG9yOiAkZGF0ZXBpY2tlci1saW5rLWNvbG9yICFkZWZhdWx0O1xuIiwiLyoqXHJcbiAqIENLRWRpdG9yIGRpYWxvZy5cclxuICovXHJcbkBpbXBvcnQgXCIuLi8uLi9hZG1pbi9zY3NzL2luY2x1ZGVzL3ZhcmlhYmxlc1wiO1xyXG5AaW1wb3J0IFwiLi4vLi4vLi4vLi4vLi4vbnBtLWFzc2V0L2Jvb3RzdHJhcC9zY3NzL2Z1bmN0aW9uc1wiO1xyXG5AaW1wb3J0IFwiLi4vLi4vLi4vLi4vLi4vbnBtLWFzc2V0L2Jvb3RzdHJhcC9zY3NzL3ZhcmlhYmxlc1wiO1xyXG5AaW1wb3J0IFwiLi4vLi4vLi4vLi4vLi4vbnBtLWFzc2V0L2Jvb3RzdHJhcC9zY3NzL21peGluc1wiO1xyXG5AaW1wb3J0IFwiaW5jbHVkZXMvdmFyaWFibGVzXCI7XHJcbkBpbXBvcnQgXCJpbmNsdWRlcy9sYXlvdXRcIjtcclxuQGltcG9ydCBcImluY2x1ZGVzL3Rvb2xiYXJcIjtcclxuQGltcG9ydCBcImluY2x1ZGVzL3BhbmVsXCI7XHJcbi8vQGltcG9ydCBcImluY2x1ZGVzL3JpY2hjb21ib1wiO1xyXG5AaW1wb3J0IFwiaW5jbHVkZXMvY29udGVudFwiO1xyXG4iLCIvKlxuTWFpbi5cbiAqL1xuJGNrZS1iZzogJGlucHV0LWJnICFkZWZhdWx0O1xuJGNrZS1ib3JkZXI6ICRpbnB1dC1ib3JkZXItd2lkdGggc29saWQgJGlucHV0LWJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRja2UtYm9yZGVyLXJhZGl1czogJGlucHV0LWJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG5cbiRja2UtdG9wLXBhZGRpbmc6ICRpbnB1dC1wYWRkaW5nLXkgMCAkaW5wdXQtcGFkZGluZy15ICRpbnB1dC1wYWRkaW5nLXggIWRlZmF1bHQ7XG4kY2tlLXRvcC1jb2xvcjogJGlucHV0LWNvbG9yICFkZWZhdWx0O1xuJGNrZS10b3AtYmc6ICRpbnB1dC1ncm91cC1hZGRvbi1iZyAhZGVmYXVsdDtcbiRja2UtdG9wLWJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkaW5wdXQtZ3JvdXAtYWRkb24tYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4vKlxuVG9vbGJhci5cbiAqL1xuJGNrZS10b29sYmFyLW1hcmdpbjogMCAhZGVmYXVsdDtcbiRja2UtdG9vbGJhci1ib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcblxuJGNrZS10b29sYmFyLWJ1dHRvbi1tYXJnaW46IDAgMXB4IDAgMCAhZGVmYXVsdDtcbiRja2UtdG9vbGJhci1idXR0b24tcGFkZGluZzogJGlucHV0LXBhZGRpbmcteSAkaW5wdXQtcGFkZGluZy14ICFkZWZhdWx0O1xuJGNrZS10b29sYmFyLWJ1dHRvbi1ib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudCAhZGVmYXVsdDtcbiRja2UtdG9vbGJhci1idXR0b24tYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG4kY2tlLXRvb2xiYXItYnV0dG9uLWJnOiAkYnRuLXNlY29uZGFyeS1iZyAhZGVmYXVsdDtcbiRja2UtdG9vbGJhci1idXR0b24tYWN0aXZlLWJnOiAkZ3JheS0zMDAgIWRlZmF1bHQ7XG4kY2tlLXRvb2xiYXItYnV0dG9uLWFjdGl2ZS1ib3JkZXItY29sb3I6ICRpbnB1dC1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kY2tlLXRvb2xiYXItYnV0dG9uLWhvdmVyLWJnOiAkZ3JheS0zMDAgIWRlZmF1bHQ7XG4kY2tlLXRvb2xiYXItYnV0dG9uLWhvdmVyLWJvcmRlci1jb2xvcjogJGdyYXktMjAwICFkZWZhdWx0O1xuJGNrZS10b29sYmFyLWJ1dHRvbi1pY29uLW1hcmdpbjogMCAhZGVmYXVsdDtcbiRja2UtdG9vbGJhci1idXR0b24taWNvbi13aWR0aDogMTZweCAhZGVmYXVsdDtcbiRja2UtdG9vbGJhci1idXR0b24taWNvbi1oZWlnaHQ6IDE2cHggIWRlZmF1bHQ7XG5cbi8qXG5QYW5lbC5cbiAqL1xuJGNrZS1wYW5lbC13aWR0aDogMTIwcHggIWRlZmF1bHQ7XG4kY2tlLXBhbmVsLWhlaWdodDogMTAwcHggIWRlZmF1bHQ7XG4kY2tlLXBhbmVsLW1hcmdpbjogNXB4IDAgMCAhZGVmYXVsdDtcbiRja2UtcGFuZWwtYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xuJGNrZS1wYW5lbC1ib3JkZXI6ICRjYXJkLWJvcmRlci13aWR0aCBzb2xpZCAkY2FyZC1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kY2tlLXBhbmVsLWJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzICFkZWZhdWx0O1xuXG4kY2tlLXBhbmVsLWl0ZW0tcGFkZGluZzogNnB4IDEwcHggIWRlZmF1bHQ7XG4kY2tlLXBhbmVsLWl0ZW0tYWN0aXZlLWJnOiAkc2Vjb25kYXJ5ICFkZWZhdWx0O1xuJGNrZS1wYW5lbC1pdGVtLXNlbGVjdGVkLWJnOiAkY2tlLXBhbmVsLWl0ZW0tYWN0aXZlLWJnICFkZWZhdWx0O1xuXG4kY2tlLWNvbWJvLXBhbmVsLXdpZHRoOiAxNTBweCAhZGVmYXVsdDtcbiRja2UtY29tYm8tcGFuZWwtaGVpZ2h0OiAxMTBweCAhZGVmYXVsdDtcblxuLypcbkNvbnRlbnQuXG4gKi9cbiRja2UtY29udGVudC1wYWRkaW5nOiAkaW5wdXQtcGFkZGluZy15ICRpbnB1dC1wYWRkaW5nLXggIWRlZmF1bHQ7XG4kY2tlLWNvbnRlbnQtZm9udC1mYW1pbHk6ICRpbnB1dC1mb250LWZhbWlseSAhZGVmYXVsdDtcbiRja2UtY29udGVudC1mb250LXNpemU6ICRpbnB1dC1mb250LXNpemUgIWRlZmF1bHQ7XG4kY2tlLWNvbnRlbnQtbGluay1jb2xvcjogJGxpbmstY29sb3IgIWRlZmF1bHQ7XG4kY2tlLWNvbnRlbnQtZm9udC13ZWlnaHQ6ICRpbnB1dC1mb250LXdlaWdodCAhZGVmYXVsdDtcbiRja2UtY29udGVudC1saW5lLWhlaWdodDogJGlucHV0LWxpbmUtaGVpZ2h0ICFkZWZhdWx0O1xuJGNrZS1jb250ZW50LWNvbG9yOiAkaW5wdXQtY29sb3IgIWRlZmF1bHQ7XG4kY2tlLWNvbnRlbnQtYmc6ICRpbnB1dC1iZyAhZGVmYXVsdDtcbiRja2UtY29udGVudC1ib3JkZXI6ICRpbnB1dC1ib3JkZXItd2lkdGggc29saWQgJGlucHV0LWJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRja2UtY29udGVudC1saW5rLWRlY29yYXRpb246ICRsaW5rLWRlY29yYXRpb24gIWRlZmF1bHQ7XG5cbiRja2UtYmxvY2txdW90ZS1wYWRkaW5nOiAkaW5wdXQtcGFkZGluZy14ICFkZWZhdWx0O1xuJGNrZS1ibG9ja3F1b3RlLWNvbG9yOiAkZ3JheS0yMDAgIWRlZmF1bHQ7XG5cbiRja2UtdGFibGUtYm9yZGVyOiAxcHggZG90dGVkICRncmF5LTQwMCAhZGVmYXVsdDtcblxuJGNrZS1zb3VyY2UtYmc6ICR3aGl0ZSAhZGVmYXVsdDtcblxuLypcbkRpYWxvZy5cbiAqL1xuJGNrZS1kaWFsb2ctYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctYm9yZGVyOiAkY2FyZC1ib3JkZXItd2lkdGggc29saWQgJGNhcmQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctYm9yZGVyLXJhZGl1czogJGNhcmQtYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLXBhZGRpbmc6ICRjYXJkLXNwYWNlci15ICRjYXJkLXNwYWNlci14ICFkZWZhdWx0O1xuXG4kY2tlLWRpYWxvZy10aXRsZS1mb250LXdlaWdodDogJGZvbnQtd2VpZ2h0LWJvbGQgIWRlZmF1bHQ7XG4kY2tlLWRpYWxvZy10aXRsZS1iZzogJGNhcmQtY2FwLWJnICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctdGl0bGUtY29sb3I6ICRjYXJkLWNhcC1jb2xvciAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLXRpdGxlLXBhZGRpbmc6ICRja2UtZGlhbG9nLXBhZGRpbmcgIWRlZmF1bHQ7XG4kY2tlLWRpYWxvZy10aXRsZS1ib3JkZXItYm90dG9tOiAkY2FyZC1ib3JkZXItd2lkdGggc29saWQgJGNhcmQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4kY2tlLWRpYWxvZy1jb250ZW50cy1wYWRkaW5nOiAkY2tlLWRpYWxvZy1wYWRkaW5nICFkZWZhdWx0O1xuXG4kY2tlLWRpYWxvZy1mb290ZXItcGFkZGluZzogJGNrZS1kaWFsb2ctcGFkZGluZyAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLWZvb3Rlci1iZzogJGNhcmQtY2FwLWJnICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctZm9vdGVyLWJvcmRlci1yYWRpdXM6IDAgMCAkYm9yZGVyLXJhZGl1cyAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLWZvb3Rlci1ib3JkZXItdG9wOiAkY2FyZC1ib3JkZXItd2lkdGggc29saWQgJGNhcmQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4kY2tlLWRpYWxvZy10YWJzLW1hcmdpbjogMCAkY2FyZC1zcGFjZXIteCAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLXRhYi1tYXJnaW46ICRjYXJkLXNwYWNlci15IDNweCAkY2FyZC1zcGFjZXIteSAwICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctdGFiLXBhZGRpbmc6ICRuYXYtbGluay1wYWRkaW5nLXkgJG5hdi1saW5rLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLXRhYi1jb2xvcjogJG5hdmJhci1kYXJrLWNvbG9yICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctdGFiLWJvcmRlci1yYWRpdXM6ICRuYXYtcGlsbHMtYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRja2UtZGlhbG9nLXRhYi1ob3Zlci1jb2xvcjogJGFwcC1zdWJtZW51LWhvdmVyLWNvbG9yICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctdGFiLWhvdmVyLWJnOiAkYXBwLXN1Ym1lbnUtaG92ZXItYmcgIWRlZmF1bHQ7XG4kY2tlLWRpYWxvZy10YWItYWN0aXZlLWNvbG9yOiAkbmF2LXBpbGxzLWxpbmstYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xuJGNrZS1kaWFsb2ctdGFiLWFjdGl2ZS1iZzogJG5hdi1waWxscy1saW5rLWFjdGl2ZS1iZyAhZGVmYXVsdDsiLCIvKlxyXG5Db3B5cmlnaHQgKGMpIDIwMDMtMjAxNCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cDovL2NrZWRpdG9yLmNvbS9saWNlbnNlXHJcbiovXHJcblxyXG4vKlxyXG5tYWludWkuY3NzIChwYXJ0IG9mIGVkaXRvci5jc3MpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuVGhpcyBmaWxlIHN0eWxlcyB0aGUgYmFzaWMgc3RydWN0dXJlIG9mIHRoZSBDS0VkaXRvciB1c2VyIGludGVyZmFjZSAtIHRoZSBib3hcclxudGhhdCBob2xkcyBldmVyeXRoaW5nLlxyXG5cclxuQ0tFZGl0b3Igb2ZmZXJzIHR3byBtYWluIGVkaXRpbmcgbW9kZXMuIFRoZSBtYWluIFVJIGJsb2NrcyB0aGF0IGNvbXBvc2UgdGhlc2VcclxubW9kZXMgYXJlOlxyXG5cclxuICAgIEZvciBcIlRoZW1lIFVJXCIgbW9kZSwgdGhlIG9uZSBtb3N0IGdlbmVyYWxseSB1c2VkOlxyXG5cclxuICAgICstLSAuY2tlX2Nocm9tZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG4gICAgfCstLSAuY2tlX2lubmVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLSt8XHJcbiAgICB8fCArLS0gLmNrZV90b3AgLS0tLS0tLS0tLS0tLS0tLS0tLSsgfHxcclxuICAgIHx8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8fFxyXG4gICAgfHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8fCArLS0gLmNrZV9jb250ZW50cyAtLS0tLS0tLS0tLS0tLSsgfHxcclxuICAgIHx8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8fFxyXG4gICAgfHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8fCArLS0gLmNrZV9ib3R0b20gLS0tLS0tLS0tLS0tLS0tLSsgfHxcclxuICAgIHx8IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8fFxyXG4gICAgfHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8Ky0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK3xcclxuICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG5cclxuICAgIEZvciBcIklubGluZSBFZGl0aW5nXCIgbW9kZTpcclxuXHJcbiAgICArLS0gLmNrZV9jaHJvbWUgLmNrZV9mbG9hdC0tLS0tLS0tLS0tLStcclxuICAgIHwrLS0gLmNrZV9pbm5lciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0rfFxyXG4gICAgfHwgKy0tIC5ja2VfdG9wIC0tLS0tLS0tLS0tLS0tLS0tLS0rIHx8XHJcbiAgICB8fCB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgfHxcclxuICAgIHx8ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8fFxyXG4gICAgfCstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSt8XHJcbiAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcclxuXHJcblNwZWNpYWwgb3V0ZXIgbGV2ZWwgY2xhc3NlcyB1c2VkIGluIHRoaXMgZmlsZTpcclxuXHJcbiAgICAuY2tlX2hjOiBBdmFpbGFibGUgd2hlbiB0aGUgZWRpdG9yIGlzIHJlbmRlcmVkIG9uIFwiSGlnaCBDb250cmFzdFwiLlxyXG5cclxuKi9cclxuLmNrZV9jaHJvbWUge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgZm9udC1zaXplOiAkZm9udC1zaXplLWJhc2U7XHJcbiAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC1iYXNlO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICRja2UtYmc7XHJcbiAgYm9yZGVyOiAkY2tlLWJvcmRlcjtcclxuICBib3JkZXItcmFkaXVzOiAkY2tlLWJvcmRlci1yYWRpdXM7XHJcbiAgdmlzaWJpbGl0eTogaW5oZXJpdDtcclxufVxyXG5cclxuLmNrZV9pbm5lciB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xyXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gIHBhZGRpbmc6IDA7XHJcbn1cclxuXHJcbi5ja2VfdG9wLCAuY2tlX2NvbnRlbnRzLCAuY2tlX2JvdHRvbSB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG5cclxuLmNrZV90b3Age1xyXG4gIGNvbG9yOiAkY2tlLXRvcC1jb2xvcjtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tlLXRvcC1iZztcclxuICBib3JkZXItYm90dG9tOiAkY2tlLXRvcC1ib3JkZXItYm90dG9tO1xyXG4gIHBhZGRpbmc6ICRja2UtdG9wLXBhZGRpbmc7XHJcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLy8gQWxsb3cgYnJlYWtpbmcgdG9vbGJhcnMgd2hlbiBpbiBhIG5hcnJvdyBlZGl0b3IuICgjOTk0NylcclxufVxyXG5cclxuLmNrZV9ib3R0b20ge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG5cclxuLyogT24gaU9TIHdlIG5lZWQgdG8gbWFudWFsbHkgZW5hYmxlIHNjcm9sbGluZyBpbiB0aGUgY29udGVudHMgYmxvY2suICgjOTk0NSkgKi9cclxuLmNrZV9icm93c2VyX2lvcyAuY2tlX2NvbnRlbnRzIHtcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcclxufVxyXG5cclxuLmNrZV9sdHJ7XHJcbiAgb3ZlcmZsb3cteTogaGlkZGVuOyAvLyBEcm9wZG93bnMuXHJcbn1cclxuXHJcbi8qIEZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLCBzZXZlcmFsIFwidm9pY2UgbGFiZWxzXCIgYXJlIHByZXNlbnQgaW4gdGhlIFVJLlxyXG4gICBUaGVzZSBhcmUgdXN1YWxseSA8c3Bhbj4gZWxlbWVudHMgdGhhdCBzaG93IG5vdCBiZSB2aXNpYmxlLCBidXQgdGhhdCBhcmVcclxuICAgdXNlZCBieSBzY3JlZW4tcmVhZGVycyB0byBhbm5vdW5jZSBvdGhlciBlbGVtZW50cy4gSGVyZSwgd2UgaGlkZSB0aGVzZVxyXG4gICA8c3BhbnM+LCBpbiBmYWN0LiAqL1xyXG4uY2tlX3ZvaWNlX2xhYmVsIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4uY2tlX3Jlc2l6ZXJ7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufSIsIiRja2UtYmc6IHRyYW5zcGFyZW50O1xuJGNrZS1ib3JkZXI6IDA7XG4kY2tlLWNvbnRlbnQtYmc6IHRyYW5zcGFyZW50O1xuJGNrZS10b3AtcGFkZGluZzogMXB4IDAgMDtcbiRja2UtdG9wLWJvcmRlci1ib3R0b206IDA7XG4kY2tlLWNvbnRlbnQtYm9yZGVyOiAwOyIsIi8qXHJcbkNvcHlyaWdodCAoYykgMjAwMy0yMDE0LCBDS1NvdXJjZSAtIEZyZWRlcmljbyBLbmFiYmVuLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5Gb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwOi8vY2tlZGl0b3IuY29tL2xpY2Vuc2VcclxuKi9cclxuXHJcbi8qXHJcbnRvb2xiYXIuY3NzIChwYXJ0IG9mIGVkaXRvci5jc3MpXHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblRoaXMgZmlsZXMgc3R5bGVzIHRoZSBDS0VkaXRvciB0b29sYmFyIGFuZCBpdHMgYnV0dG9ucy4gRm9yIHRvb2xiYXIgY29tYm9cclxuc3R5bGVzLCBjaGVjayByaWNoY29tYm8uY3NzLlxyXG5cclxuVGhlIHRvb2xiYXIgaXMgcmVuZGVyZWQgYXMgYSBiaWcgY29udGFpbmVyIChjYWxsZWQgdG9vbGJveCksIHdoaWNoIGNvbnRhaW5zXHJcbnNtYWxsZXIgXCJ0b29sYmFyc1wiLiBFYWNoIHRvb2xiYXIgcmVwcmVzZW50cyBhIGdyb3VwIG9mIGl0ZW1zIHRoYXQgY2Fubm90IGJlXHJcbnNlcGFyYXRlZC4gVGhlIGZvbGxvd2luZyBpcyB0aGUgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0b29sYm94LlxyXG5cclxuKy0tIC5ja2VfdG9vbGJveCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG58ICstLSAuY2tlX3Rvb2xiYXIgLS0rICstLSAuY2tlX3Rvb2xiYXIgLS0rIC4uLiArLS0gLmNrZV90b29sYmFyX2JyZWFrIC0tKyB8XHJcbnwgfCAgICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tKyArLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxyXG58ICstLSAuY2tlX3Rvb2xiYXIgLS0rICstLSAuY2tlX3Rvb2xiYXIgLS0rIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbnwgfCAgICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tKyArLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcblxyXG5UaGUgZm9sbG93aW5nIGluc3RlYWQgaXMgdGhlIHZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSB0b29sYmFyOlxyXG5cclxuKy0tIC5ja2VfdG9vbGJhciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG58ICstLSAuY2tlX3Rvb2xiYXJfc3RhcnQgLS0rICstLSAuY2tlX3Rvb2xncm91cCAoKikgLS0rICstLSAuY2tlX3Rvb2xiYXJfZW5kIC0tKyB8XHJcbnwgfCAgICAgICAgICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgICAgICB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxyXG4rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcbigqKSAuY2tlX3Rvb2xncm91cCBpcyBhdmFpbGFibGUgb25seSB3aGVuIHRoZSB0b29sYmFyIGl0ZW1zIGNhbiBiZSBncm91cGVkXHJcbiAgICAoYnV0dG9ucykuIElmIHRoZSBpdGVtcyBjYW4ndCBiZSBncm91cCAoY29tYm9zKSwgdGhpcyBib3ggaXMgbm90IGF2YWlsYWJsZVxyXG4gICAgYW5kIHRoZSBpdGVtcyBhcmUgcmVuZGVyZWQgc3RyYWlnaHQgaW4gdGhhdCBwbGFjZS5cclxuXHJcblRoaXMgZmlsZSBhbHNvIHN0eWxlcyB0b29sYmFyIGJ1dHRvbnMsIHdoaWNoIGFyZSByZW5kZXJlZCBpbnNpZGUgdGhlIGFib3ZlXHJcbi5ja2VfdG9vbGdyb3VwIGNvbnRhaW5lcnMuIFRoaXMgaXMgdGhlIHZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiBhIGJ1dHRvbjpcclxuXHJcbistLSAuY2tlX2J1dHRvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG58ICstLSAuY2tlX2J1dHRvbl9pY29uIC0tKyArLS0gLmNrZV9idXR0b25fbGFiZWwgLS0rIHxcclxufCB8ICAgICAgICAgICAgICAgICAgICAgIHwgfCAgICAgICAgICAgICAgICAgICAgICAgfCB8XHJcbnwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxyXG4rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcclxuXHJcblNwZWNpYWwgb3V0ZXIgbGV2ZWwgY2xhc3NlcyB1c2VkIGluIHRoaXMgZmlsZTpcclxuXHJcbiAgICAuY2tlX2hjOiBBdmFpbGFibGUgd2hlbiB0aGUgZWRpdG9yIGlzIHJlbmRlcmVkIG9uIFwiSGlnaCBDb250cmFzdFwiLlxyXG4gICAgLmNrZV9ydGw6IEF2YWlsYWJsZSB3aGVuIHRoZSBlZGl0b3IgVUkgaXMgb24gUlRMLlxyXG4qL1xyXG5cclxuLmNrZV90b29sYm94LCAuY2tlX3Rvb2xiYXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcclxufVxyXG5cclxuXHJcbi5ja2VfdG9vbGdyb3VwIHtcclxuICBmbG9hdDogbGVmdDtcclxuICBtYXJnaW46ICRja2UtdG9vbGJhci1tYXJnaW47XHJcbiAgcGFkZGluZzogMDtcclxuICBib3JkZXI6IDA7XHJcbiAgYm9yZGVyLXJhZGl1czogJGNrZS10b29sYmFyLWJvcmRlci1yYWRpdXM7XHJcbn1cclxuXHJcbi5ja2VfYnV0dG9uIHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBtYXJnaW46ICRja2UtdG9vbGJhci1idXR0b24tbWFyZ2luO1xyXG4gIHBhZGRpbmc6ICRja2UtdG9vbGJhci1idXR0b24tcGFkZGluZztcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuICBmbG9hdDogbGVmdDtcclxuICBib3JkZXI6ICRja2UtdG9vbGJhci1idXR0b24tYm9yZGVyO1xyXG4gIGJvcmRlci1yYWRpdXM6ICRja2UtdG9vbGJhci1idXR0b24tYm9yZGVyLXJhZGl1cztcclxuICBiYWNrZ3JvdW5kOiAkY2tlLXRvb2xiYXItYnV0dG9uLWJnO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4vKiBUaGlzIGNsYXNzIGlzIGFwcGxpZWQgdG8gdGhlIGJ1dHRvbiB3aGVuIGl0IGlzIFwiYWN0aXZlXCIgKHB1c2hlZCkuXHJcbiAgIFRoaXMgc3R5bGUgaW5kaWNhdGVzIHRoYXQgdGhlIGZlYXR1cmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBidXR0b24gaXMgYWN0aXZlXHJcbiAgIGkuZS4gY3VycmVudGx5IHdyaXRpbmcgaW4gYm9sZCBvciB3aGVuIHNwZWxsIGNoZWNraW5nIGlzIGVuYWJsZWQuICovXHJcbi5ja2VfYnV0dG9uX29uIHtcclxuICBiYWNrZ3JvdW5kOiAkY2tlLXRvb2xiYXItYnV0dG9uLWFjdGl2ZS1iZztcclxuICBib3JkZXItY29sb3I6ICRja2UtdG9vbGJhci1idXR0b24tYWN0aXZlLWJvcmRlci1jb2xvcjtcclxufVxyXG5cclxuLyogVGhpcyBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBidXR0b24gd2hlbiB0aGUgZmVhdHVyZSBhc3NvY2lhdGVkIHdpdGggdGhlXHJcbiAgIGJ1dHRvbiBjYW5ub3QgYmUgdXNlZCAoZ3JheWVkLW91dCkuXHJcbiAgIGkuZS4gcGFzdGUgYnV0dG9uIHJlbWFpbnMgZGlzYWJsZWQgd2hlbiB0aGVyZSBpcyBub3RoaW5nIGluIHRoZSBjbGlwYm9hcmQgdG9cclxuICAgYmUgcGFzdGVkLiAqL1xyXG4uY2tlX2J1dHRvbl9kaXNhYmxlZCAuY2tlX2J1dHRvbl9pY29uIHtcclxuICBvcGFjaXR5OiAwLjM7XHJcbn1cclxuXHJcblxyXG4uY2tlX2J1dHRvbl9vZmYsIC5ja2VfYnV0dG9uX2Rpc2FibGVkIHtcclxuICAmOmhvdmVyLCAmOmZvY3VzLCAmOmFjdGl2ZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAkY2tlLXRvb2xiYXItYnV0dG9uLWhvdmVyLWJnO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAkY2tlLXRvb2xiYXItYnV0dG9uLWhvdmVyLWJvcmRlci1jb2xvcjtcclxuICB9XHJcbn1cclxuXHJcbi8qIFRoZSBpY29uIHdoaWNoIGlzIGEgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBidXR0b24uICovXHJcbi5ja2VfYnV0dG9uX2ljb24ge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIG1hcmdpbjogJGNrZS10b29sYmFyLWJ1dHRvbi1pY29uLW1hcmdpbjtcclxuICB3aWR0aDogJGNrZS10b29sYmFyLWJ1dHRvbi1pY29uLXdpZHRoO1xyXG4gIGhlaWdodDogJGNrZS10b29sYmFyLWJ1dHRvbi1pY29uLWhlaWdodDtcclxuICBjdXJzb3I6IGluaGVyaXQ7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxufVxyXG5cclxuXHJcbi8qIFRoZSBsYWJlbCBvZiB0aGUgYnV0dG9uIHRoYXQgc3RvcmVzIHRoZSBuYW1lIG9mIHRoZSBmZWF0dXJlLiBCeSBkZWZhdWx0LFxyXG4gICBsYWJlbHMgYXJlIGludmlzaWJsZS4gVGhleSBjYW4gYmUgcmV2ZWFsZWQgb24gZGVtYW5kIHRob3VnaC4gKi9cclxuLmNrZV9idXR0b25fbGFiZWwge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8qIFRoZSBzbWFsbCBhcnJvdyBhdmFpbGFibGUgb24gYnV0dG9ucyB0aGF0IGNhbiBiZSBleHBhbmRlZFxyXG4gICAoZS5nLiB0aGUgY29sb3IgYnV0dG9ucykuICovXHJcbi8vLmNrZV9idXR0b25fYXJyb3cge1xyXG4vLyAgLyogQXJyb3cgaW4gQ1NTICovXHJcbi8vICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vICBtYXJnaW46IDhweCAwIDAgMXB4O1xyXG4vLyAgd2lkdGg6IDA7XHJcbi8vICBoZWlnaHQ6IDA7XHJcbi8vICBjdXJzb3I6IGRlZmF1bHQ7XHJcbi8vICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4vLyAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuLy8gIGJvcmRlci1yaWdodDogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4vLyAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICM0NzQ3NDc7XHJcbi8vfVxyXG5cclxuLyogVGhlIHZlcnRpY2FsIHNlcGFyYXRvciB3aGljaCBpcyB1c2VkIHdpdGhpbiBhIHNpbmdsZSB0b29sYmFyIHRvIHNwbGl0XHJcbiAgIGJ1dHRvbnMgaW50byBzdWItZ3JvdXBzLiAqL1xyXG4vLy5ja2VfdG9vbGJhcl9zZXBhcmF0b3Ige1xyXG4vLyAgYmFja2dyb3VuZC1jb2xvcjogJGlucHV0LWJvcmRlci1jb2xvcjtcclxuLy8gIG1hcmdpbjogNHB4IDJweCAwO1xyXG4vLyAgaGVpZ2h0OiAxNnB4O1xyXG4vLyAgd2lkdGg6IDFweDtcclxuLy99XHJcblxyXG4vKiBUaGUgYnV0dG9uLCB3aGljaCB3aGVuIGNsaWNrZWQgaGlkZXMgKGNvbGxhcHNlcykgYWxsIHRoZSB0b29sYmFycy4gKi9cclxuLy8uY2tlX3Rvb2xib3hfY29sbGFwc2VyIHtcclxuLy8gIHdpZHRoOiAxMnB4O1xyXG4vLyAgaGVpZ2h0OiAxMXB4O1xyXG4vLyAgZmxvYXQ6IHJpZ2h0O1xyXG4vLyAgbWFyZ2luOiAxMXB4IDAgMDtcclxuLy8gIGZvbnQtc2l6ZTogMDtcclxuLy8gIGN1cnNvcjogZGVmYXVsdDtcclxuLy8gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuLy9cclxuLy8gIGJvcmRlcjogMXB4IHNvbGlkICNhNmE2YTY7XHJcbi8vICBib3JkZXItYm90dG9tLWNvbG9yOiAjOTc5Nzk3O1xyXG4vL1xyXG4vLyAgYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXM7XHJcbi8vXHJcbi8vICBiYWNrZ3JvdW5kOiAjZTRlNGU0O1xyXG4vL1xyXG4vLyAgJjpob3ZlciB7XHJcbi8vICAgIGJhY2tncm91bmQ6ICNjY2M7XHJcbi8vICB9XHJcbi8vXHJcbi8vICAmLmNrZV90b29sYm94X2NvbGxhcHNlcl9taW4ge1xyXG4vLyAgICBtYXJnaW46IDAgMnB4IDRweDtcclxuLy9cclxuLy8gICAgLmNrZV9hcnJvdyB7XHJcbi8vICAgICAgbWFyZ2luLXRvcDogNHB4O1xyXG4vLyAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50O1xyXG4vLyAgICAgIGJvcmRlci10b3AtY29sb3I6ICM0NzQ3NDc7XHJcbi8vICAgIH1cclxuLy8gIH1cclxuLy9cclxuLy8gIC8qIFRoZSBDU1MgYXJyb3csIHdoaWNoIGJlbG9uZ3MgdG8gdGhlIHRvb2xiYXIgY29sbGFwc2VyLiAqL1xyXG4vLyAgLmNrZV9hcnJvdyB7XHJcbi8vICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy9cclxuLy8gICAgLyogUHVyZSBDU1MgQXJyb3cgKi9cclxuLy8gICAgaGVpZ2h0OiAwO1xyXG4vLyAgICB3aWR0aDogMDtcclxuLy8gICAgZm9udC1zaXplOiAwO1xyXG4vLyAgICBtYXJnaW4tdG9wOiAxcHg7XHJcbi8vICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbi8vICAgIGJvcmRlci1yaWdodDogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4vLyAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzQ3NDc0NztcclxuLy8gICAgYm9yZGVyLXRvcDogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4vLyAgfVxyXG4vL30iLCIvKlxyXG5Db3B5cmlnaHQgKGMpIDIwMDMtMjAxNCwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuRm9yIGxpY2Vuc2luZywgc2VlIExJQ0VOU0UubWQgb3IgaHR0cDovL2NrZWRpdG9yLmNvbS9saWNlbnNlXHJcbiovXHJcblxyXG4vKlxyXG5wYW5lbC5jc3MgKHBhcnQgb2YgZWRpdG9yLmNzcylcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblBhbmVscyBhcmUgZmxvYXRpbmcgZWxlbWVudHMgdGhhdCBjYW4gaG9sZCBkaWZmZXJlbnQgdHlwZXMgb2YgY29udGVudHMuXHJcblRoZSBmb2xsb3dpbmcgYXJlIGNvbW1vbiB1c2VzIG9mIGl0OlxyXG5cclxuICAgIC0gVGhlIGVsZW1lbnQgdGhhdCB0b29sYmFyIGNvbWJvcyBkaXNwbGF5IHdoZW4gb3BlbmluZyB0aGVtLlxyXG4gICAgLSBUaGUgY29udGV4dCBtZW51LlxyXG4gICAgLSBUaGUgbGlzdCBvZiBpdGVtcyBkaXNwbGF5ZWQgYnkgXCJtZW51IGJ1dHRvbnNcIiAoZS5nLiBzY2F5dCkuXHJcbiAgICAtIFRoZSBwYW5lbCBzaG93biB3aGVuIG9wZW5pbmcgXCJwYW5lbCBidXR0b25zXCIgKGUuZy4gY29sb3IgYnV0dG9ucykuXHJcblxyXG5QYW5lbCBjb250ZW50cyBhcmUgd3JhcHBlZCBpbnRvIGFuIGlmcmFtZSwgc28gaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBhZGRpdGlvbmFsXHJcbkNTUyBsb2FkZWQgaW5zaWRlIHRoZW0gKGUuZy4gdG8gaGF2ZSBtb3JlIGFjY3VyYXRlIHByZXZpZXcgb24gdGhlIHN0eWxlcyBjb21ibykuXHJcblxyXG5UaGUgZm9sbG93aW5nIGlzIGEgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvdXRlciBlbGVtZW50cyBvZiBhIHBhbmVsOlxyXG5cclxuKy0tIC5ja2VfcGFuZWwoKikgLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xyXG58ICstLSBJRlJBTUUuY2tlX3BhbmVsX2ZyYW1lIC0tLS0tLS0tKyB8XHJcbnwgfCArLS0gSFRNTC5ja2VfcGFuZWxfY29udGFpbmVyIC0tKyB8IHxcclxufCB8IHwgKy0tIC5ja2VfcGFuZWxfYmxvY2sgLS0tLS0tKyB8IHwgfFxyXG58IHwgfCB8ICAgICAgICAgICAgICAgICAgICAgICAgICB8IHwgfCB8XHJcbnwgfCB8IHwgICAgIChjb250ZW50cyBoZXJlKSAgICAgIHwgfCB8IHxcclxufCB8IHwgfCAgICAgICAgICAgICAgICAgICAgICAgICAgfCB8IHwgfFxyXG58IHwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHwgfCB8XHJcbnwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfFxyXG4rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcblxyXG4oKikgQWxsIGtpbmRzIG9mIHBhbmVsIHNoYXJlIHRoZSBhYm92ZSBzdHJ1Y3R1cmUuIE1lbnUgcGFuZWxzIGFkZHMgdGhlXHJcbiAgICAuY2tlX21lbnVfcGFuZWwgY2xhc3MgdG8gdGhlIG91dGVyIGVsZW1lbnQsIHdoaWxlIHRvb2xiYXIgY29tYm9zIGFkZCB0aGVcclxuICAgIC5ja2VfY29tYm9wYW5lbCBjbGFzcy5cclxuXHJcblRoaXMgZmlsZSBhbHNvIGRlZmluZXMgc3R5bGVzIGZvciBwYW5lbCBsaXN0cyAodXNlZCBieSBjb21ib3MpLiBGb3IgbWVudS1saWtlXHJcbnBhbmVsIGNvbnRlbnRzIGFuZCBjb2xvciBwYW5lbHMgY2hlY2sgbWVudS5jc3MgYW5kIGNvbG9ycGFuZWwuY3NzLlxyXG4qL1xyXG5cclxuLyogVGhlIGJveCB0aGF0IGhvbGRzIGFuIElGUkFNRS4gSXQncyBpbnNlcnRlZCBpbnRvIGEgaG9zdCBkb2N1bWVudCBhbmQgcG9zaXRpb25lZFxyXG4gICBhYnNvbHV0ZWx5IGJ5IHRoZSBhcHBsaWNhdGlvbi4gSXQgZmxvYXRzIGFib3ZlIHRoZSBob3N0IGRvY3VtZW50L2VkaXRvci4gKi9cclxuLmNrZV9wYW5lbCB7XHJcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTsgLy8gUmVzdG9yZSB0aGUgbG9hZGluZyBoaWRlXHJcbiAgd2lkdGg6ICRja2UtcGFuZWwtd2lkdGg7XHJcbiAgaGVpZ2h0OiAkY2tlLXBhbmVsLWhlaWdodDtcclxuICBtYXJnaW46ICRja2UtcGFuZWwtbWFyZ2luO1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcblxyXG4gIGJhY2tncm91bmQtY29sb3I6ICRja2UtcGFuZWwtYmc7XHJcbiAgYm9yZGVyOiAkY2tlLXBhbmVsLWJvcmRlcjtcclxuICBib3JkZXItcmFkaXVzOiAkY2tlLXBhbmVsLWJvcmRlci1yYWRpdXM7XHJcbn1cclxuXHJcbi8qIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBwYW5lbHMgd2hpY2ggYXJlIHVzZWQgYXMgY29udGV4dCBtZW51cy4gKi9cclxuLmNrZV9tZW51X3BhbmVsIHtcclxuICBwYWRkaW5nOiAwO1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG5cclxuLyogVGhpcyBjbGFzcyByZXByZXNlbnRzIHBhbmVscyB3aGljaCBhcmUgdXNlZCBieSByaWNoIGNvbWJvcy4gKi9cclxuLmNrZV9jb21ib3BhbmVsIHtcclxuICB3aWR0aDogJGNrZS1jb21iby1wYW5lbC13aWR0aDtcclxuICBoZWlnaHQ6ICRja2UtY29tYm8tcGFuZWwtaGVpZ2h0O1xyXG59XHJcblxyXG4vKiBUaGUgSUZSQU1FIHRoZSBwYW5lbCBpcyB3cmFwcGVkIGludG8uICovXHJcbi5ja2VfcGFuZWxfZnJhbWUge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBvdmVyZmxvdzogYXV0bztcclxuICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbn1cclxuXHJcbi8qIFRoZSBIVE1MIGRvY3VtZW50IHdoaWNoIGlzIGEgZGlyZWN0IGRlc2NlbmRhbnQgb2YgdGhlIElGUkFNRSAqL1xyXG4uY2tlX3BhbmVsX2NvbnRhaW5lciB7XHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxuICBvdmVyZmxvdy14OiBoaWRkZW47XHJcbn1cclxuXHJcbi8qXHJcbkhlcmUgd2Ugc3RhcnQgdGhlIGRlZmluaXRpb24gb2YgcGFuZWwgbGlzdHMgKGUuZy4gY29tYm8gcGFuZWxzKS4gVGhlIGZvbGxvd2luZ1xyXG5pcyBpdHMgdmlzdWFsIHJlcHJlc2VudGF0aW9uOlxyXG5cclxuKy0tIC5ja2VfcGFuZWxfYmxvY2sgLS0tLS0tLS0tLS0tLS0tLS0rXHJcbnwgKy0tIC5ja2VfcGFuZWxfZ3JvdXB0aXRsZSAtLS0tLS0tLSsgfFxyXG58IHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHxcclxufCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8XHJcbnwgKy0tIC5ja2VfcGFuZWxfbGlzdCAtLS0tLS0tLS0tLS0tLSsgfFxyXG58IHwgKy0tIC5ja2VfcGFuZWxfbGlzdEl0ZW0gLS0tLS0tKyB8IHxcclxufCB8IHwgKy0tIGEgLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHwgfCB8XHJcbnwgfCB8IHwgKy0tIHNwYW4gLS0tLS0tLS0tLS0tLSsgfCB8IHwgfFxyXG58IHwgfCB8IHwgICAgICAgICAgICAgICAgICAgICB8IHwgfCB8IHxcclxufCB8IHwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHwgfCB8XHJcbnwgfCB8ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHwgfFxyXG58IHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHxcclxufCB8ICstLSAuY2tlX3BhbmVsX2xpc3RJdGVtIC0tLS0tLSsgfCB8XHJcbnwgfCB8ICstLSBhIC0tLS0tLS0tLS0tLS0tLS0tLS0tKyB8IHwgfFxyXG58IHwgfCB8ICstLSBzcGFuIC0tLS0tLS0tLS0tLS0rIHwgfCB8IHxcclxufCB8IHwgfCB8ICAgICAgICAgICAgICAgICAgICAgfCB8IHwgfCB8XHJcbnwgfCB8IHwgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfCB8IHwgfFxyXG58IHwgfCArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfCB8IHxcclxufCB8ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgfCB8XHJcbnwgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgfFxyXG58ICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rIHxcclxuKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXHJcbiovXHJcblxyXG5cclxuLyogVGhlIGxpc3Qgb2YgcGFuZWwgaXRlbXMuICovXHJcbi5ja2VfcGFuZWxfbGlzdCB7XHJcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nOiAwO1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuXHJcbi8qIFRoZSBpdGVtIG9mIC5ja2VfcGFuZWxfbGlzdCAqL1xyXG4uY2tlX3BhbmVsX2xpc3RJdGVtIHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxuLyogVGhlIGNoaWxkIG9mIC5ja2VfcGFuZWxfbGlzdEl0ZW0uIFRoZXNlIGVsZW1lbnRzIGNvbnRhaW4gc3BhbnMgd2hpY2ggYXJlXHJcbiAgIHRvIGRpc3BsYXkgYSByZWFsIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdoaWNoIGlzIHZpc2libGUgZm9yIGFuIGVuZC11c2VyLiAqL1xyXG4uY2tlX3BhbmVsX2xpc3RJdGVtIGEge1xyXG4gIHBhZGRpbmc6ICRja2UtcGFuZWwtaXRlbS1wYWRkaW5nO1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGNvbG9yOiBpbmhlcml0O1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG5cclxuICAmOmhvdmVyLCAmOmZvY3VzLCAmOmFjdGl2ZSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tlLXBhbmVsLWl0ZW0tYWN0aXZlLWJnO1xyXG4gICAgb3V0bGluZTogMDtcclxuICB9XHJcblxyXG4gICYgPiAqIHtcclxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdCAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGluaGVyaXQgIWltcG9ydGFudDtcclxuICB9XHJcbn1cclxuXHJcblxyXG4uY2tlX3BhbmVsX2xpc3RJdGVtLmNrZV9zZWxlY3RlZCBhIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2tlLXBhbmVsLWl0ZW0tc2VsZWN0ZWQtYmc7XHJcbiAgb3V0bGluZTogbm9uZTtcclxufVxyXG5cclxuLmNrZV9oYyAuY2tlX3BhbmVsX2xpc3RJdGVtIGEge1xyXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcclxufVxyXG5cclxuLyogVGhlIHRpdGxlIG9mIHRoZSBlbnRpcmUgcGFuZWwgd2hpY2ggaXMgdmlzaWJsZSBvbiB0b3Agb2YgdGhlIGxpc3QuICovXHJcbi5ja2VfcGFuZWxfZ3JvdXB0aXRsZSB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuLyogVGhlIGZvbGxvd2luZyBzdHlsZXMgc2V0IGRlZmF1bHRzIG9mIHRoZSBlbGVtZW50cyB1c2VkIGJ5IHRoZSBQYXJhZ3JhcGhcclxuICAgRm9ybWF0IHBhbmVsLiAqL1xyXG4uY2tlX3BhbmVsX2xpc3RJdGVtIHtcclxuICBwLCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwcmUge1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxuICogQ0tFZGl0b3IgY29uZmlnLlxuICovXG4uY2tlX2VkaXRhYmxlIHtcbiAgcGFkZGluZzogJGNrZS1jb250ZW50LXBhZGRpbmc7XG4gIGZvbnQtZmFtaWx5OiAkY2tlLWNvbnRlbnQtZm9udC1mYW1pbHk7XG4gIEBpbmNsdWRlIGZvbnQtc2l6ZSgkY2tlLWNvbnRlbnQtZm9udC1zaXplKTtcbiAgZm9udC13ZWlnaHQ6ICRja2UtY29udGVudC1mb250LXdlaWdodDtcbiAgbGluZS1oZWlnaHQ6ICRja2UtY29udGVudC1saW5lLWhlaWdodDtcbiAgY29sb3I6ICRja2UtY29udGVudC1jb2xvcjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNrZS1jb250ZW50LWJnO1xuICBib3JkZXI6ICRja2UtY29udGVudC1ib3JkZXI7XG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XG4gIGhlaWdodDogMTAwJTtcbiAgb3V0bGluZTogMDtcblxuICAuY2tlX2ZvY3VzICYge1xuICAgIGNvbG9yOiAkaW5wdXQtZm9jdXMtY29sb3I7XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJGNrZS1jb250ZW50LWxpbmstY29sb3I7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiAkY2tlLWNvbnRlbnQtbGluay1kZWNvcmF0aW9uO1xuICB9XG5cbiAgYmxvY2txdW90ZSB7XG4gICAgcGFkZGluZzogJGNrZS1ibG9ja3F1b3RlLXBhZGRpbmc7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNrZS1ibG9ja3F1b3RlLWNvbG9yO1xuICB9XG5cbiAgaDEge1xuICAgIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1iYXNlICsgMTBweDtcbiAgfVxuXG4gIGgyIHtcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtYmFzZSArIDhweDtcbiAgfVxuXG4gIGgzIHtcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtYmFzZSArIDZweDtcbiAgfVxuXG4gIGg0IHtcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtYmFzZSArIDRweDtcbiAgfVxuXG4gIGg1IHtcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtYmFzZSArIDJweDtcbiAgfVxuXG4gIHA6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxuXG4gIHRhYmxlIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICB0ZCB7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICBwYWRkaW5nOiAuNWVtO1xuICAgIGJvcmRlcjogJGNrZS10YWJsZS1ib3JkZXI7XG4gIH1cbn1cbi5ja2Vfc291cmNlIHtcbiAgZm9udC1mYW1pbHk6ICdDb3VyaWVyIE5ldycsIG1vbm9zcGFjZTtcbiAgZm9udC1zaXplOiBzbWFsbDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNrZS1zb3VyY2UtYmc7XG4gIHdoaXRlLXNwYWNlOiBwcmU7XG59IiwiLy8gc3R5bGVsaW50LWRpc2FibGUgcHJvcGVydHktYmxhY2tsaXN0LCBzY3NzL2RvbGxhci12YXJpYWJsZS1kZWZhdWx0XG5cbi8vIFNDU1MgUkZTIG1peGluXG4vL1xuLy8gQXV0b21hdGVkIGZvbnQtcmVzaXppbmdcbi8vXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvcmZzXG5cbi8vIENvbmZpZ3VyYXRpb25cblxuLy8gQmFzZSBmb250IHNpemVcbiRyZnMtYmFzZS1mb250LXNpemU6IDEuMjVyZW0gIWRlZmF1bHQ7XG4kcmZzLWZvbnQtc2l6ZS11bml0OiByZW0gIWRlZmF1bHQ7XG5cbi8vIEJyZWFrcG9pbnQgYXQgd2hlcmUgZm9udC1zaXplIHN0YXJ0cyBkZWNyZWFzaW5nIGlmIHNjcmVlbiB3aWR0aCBpcyBzbWFsbGVyXG4kcmZzLWJyZWFrcG9pbnQ6IDEyMDBweCAhZGVmYXVsdDtcbiRyZnMtYnJlYWtwb2ludC11bml0OiBweCAhZGVmYXVsdDtcblxuLy8gUmVzaXplIGZvbnQtc2l6ZSBiYXNlZCBvbiBzY3JlZW4gaGVpZ2h0IGFuZCB3aWR0aFxuJHJmcy10d28tZGltZW5zaW9uYWw6IGZhbHNlICFkZWZhdWx0O1xuXG4vLyBGYWN0b3Igb2YgZGVjcmVhc2VcbiRyZnMtZmFjdG9yOiAxMCAhZGVmYXVsdDtcblxuQGlmIHR5cGUtb2YoJHJmcy1mYWN0b3IpICE9IFwibnVtYmVyXCIgb3IgJHJmcy1mYWN0b3IgPD0gMSB7XG4gIEBlcnJvciBcImAjeyRyZnMtZmFjdG9yfWAgaXMgbm90IGEgdmFsaWQgICRyZnMtZmFjdG9yLCBpdCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxLlwiO1xufVxuXG4vLyBHZW5lcmF0ZSBlbmFibGUgb3IgZGlzYWJsZSBjbGFzc2VzLiBQb3NzaWJpbGl0aWVzOiBmYWxzZSwgXCJlbmFibGVcIiBvciBcImRpc2FibGVcIlxuJHJmcy1jbGFzczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIDEgcmVtID0gJHJmcy1yZW0tdmFsdWUgcHhcbiRyZnMtcmVtLXZhbHVlOiAxNiAhZGVmYXVsdDtcblxuLy8gU2FmYXJpIGlmcmFtZSByZXNpemUgYnVnOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9yZnMvaXNzdWVzLzE0XG4kcmZzLXNhZmFyaS1pZnJhbWUtcmVzaXplLWJ1Zy1maXg6IGZhbHNlICFkZWZhdWx0O1xuXG4vLyBEaXNhYmxlIFJGUyBieSBzZXR0aW5nICRlbmFibGUtcmVzcG9uc2l2ZS1mb250LXNpemVzIHRvIGZhbHNlXG4kZW5hYmxlLXJlc3BvbnNpdmUtZm9udC1zaXplczogdHJ1ZSAhZGVmYXVsdDtcblxuLy8gQ2FjaGUgJHJmcy1iYXNlLWZvbnQtc2l6ZSB1bml0XG4kcmZzLWJhc2UtZm9udC1zaXplLXVuaXQ6IHVuaXQoJHJmcy1iYXNlLWZvbnQtc2l6ZSk7XG5cbi8vIFJlbW92ZSBweC11bml0IGZyb20gJHJmcy1iYXNlLWZvbnQtc2l6ZSBmb3IgY2FsY3VsYXRpb25zXG5AaWYgJHJmcy1iYXNlLWZvbnQtc2l6ZS11bml0ID09IFwicHhcIiB7XG4gICRyZnMtYmFzZS1mb250LXNpemU6ICRyZnMtYmFzZS1mb250LXNpemUgLyAoJHJmcy1iYXNlLWZvbnQtc2l6ZSAqIDAgKyAxKTtcbn1cbkBlbHNlIGlmICRyZnMtYmFzZS1mb250LXNpemUtdW5pdCA9PSBcInJlbVwiIHtcbiAgJHJmcy1iYXNlLWZvbnQtc2l6ZTogJHJmcy1iYXNlLWZvbnQtc2l6ZSAvICgkcmZzLWJhc2UtZm9udC1zaXplICogMCArIDEgLyAkcmZzLXJlbS12YWx1ZSk7XG59XG5cbi8vIENhY2hlICRyZnMtYnJlYWtwb2ludCB1bml0IHRvIHByZXZlbnQgbXVsdGlwbGUgY2FsbHNcbiRyZnMtYnJlYWtwb2ludC11bml0LWNhY2hlOiB1bml0KCRyZnMtYnJlYWtwb2ludCk7XG5cbi8vIFJlbW92ZSB1bml0IGZyb20gJHJmcy1icmVha3BvaW50IGZvciBjYWxjdWxhdGlvbnNcbkBpZiAkcmZzLWJyZWFrcG9pbnQtdW5pdC1jYWNoZSA9PSBcInB4XCIge1xuICAkcmZzLWJyZWFrcG9pbnQ6ICRyZnMtYnJlYWtwb2ludCAvICgkcmZzLWJyZWFrcG9pbnQgKiAwICsgMSk7XG59XG5AZWxzZSBpZiAkcmZzLWJyZWFrcG9pbnQtdW5pdC1jYWNoZSA9PSBcInJlbVwiIG9yICRyZnMtYnJlYWtwb2ludC11bml0LWNhY2hlID09IFwiZW1cIiB7XG4gICRyZnMtYnJlYWtwb2ludDogJHJmcy1icmVha3BvaW50IC8gKCRyZnMtYnJlYWtwb2ludCAqIDAgKyAxIC8gJHJmcy1yZW0tdmFsdWUpO1xufVxuXG4vLyBSZXNwb25zaXZlIGZvbnQtc2l6ZSBtaXhpblxuQG1peGluIHJmcygkZnMsICRpbXBvcnRhbnQ6IGZhbHNlKSB7XG4gIC8vIENhY2hlICRmcyB1bml0XG4gICRmcy11bml0OiBpZih0eXBlLW9mKCRmcykgPT0gXCJudW1iZXJcIiwgdW5pdCgkZnMpLCBmYWxzZSk7XG5cbiAgLy8gQWRkICFpbXBvcnRhbnQgc3VmZml4IGlmIG5lZWRlZFxuICAkcmZzLXN1ZmZpeDogaWYoJGltcG9ydGFudCwgXCIgIWltcG9ydGFudFwiLCBcIlwiKTtcblxuICAvLyBJZiAkZnMgaXNuJ3QgYSBudW1iZXIgKGxpa2UgaW5oZXJpdCkgb3IgJGZzIGhhcyBhIHVuaXQgKG5vdCBweCBvciByZW0sIGxpa2UgMS41ZW0pIG9yICQgaXMgMCwganVzdCBwcmludCB0aGUgdmFsdWVcbiAgQGlmIG5vdCAkZnMtdW5pdCBvciAkZnMtdW5pdCAhPSBcIlwiIGFuZCAkZnMtdW5pdCAhPSBcInB4XCIgYW5kICRmcy11bml0ICE9IFwicmVtXCIgb3IgJGZzID09IDAge1xuICAgIGZvbnQtc2l6ZTogI3skZnN9I3skcmZzLXN1ZmZpeH07XG4gIH1cbiAgQGVsc2Uge1xuICAgIC8vIFZhcmlhYmxlcyBmb3Igc3RvcmluZyBzdGF0aWMgYW5kIGZsdWlkIHJlc2NhbGluZ1xuICAgICRyZnMtc3RhdGljOiBudWxsO1xuICAgICRyZnMtZmx1aWQ6IG51bGw7XG5cbiAgICAvLyBSZW1vdmUgcHgtdW5pdCBmcm9tICRmcyBmb3IgY2FsY3VsYXRpb25zXG4gICAgQGlmICRmcy11bml0ID09IFwicHhcIiB7XG4gICAgICAkZnM6ICRmcyAvICgkZnMgKiAwICsgMSk7XG4gICAgfVxuICAgIEBlbHNlIGlmICRmcy11bml0ID09IFwicmVtXCIge1xuICAgICAgJGZzOiAkZnMgLyAoJGZzICogMCArIDEgLyAkcmZzLXJlbS12YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGRlZmF1bHQgZm9udC1zaXplXG4gICAgQGlmICRyZnMtZm9udC1zaXplLXVuaXQgPT0gcmVtIHtcbiAgICAgICRyZnMtc3RhdGljOiAjeyRmcyAvICRyZnMtcmVtLXZhbHVlfXJlbSN7JHJmcy1zdWZmaXh9O1xuICAgIH1cbiAgICBAZWxzZSBpZiAkcmZzLWZvbnQtc2l6ZS11bml0ID09IHB4IHtcbiAgICAgICRyZnMtc3RhdGljOiAjeyRmc31weCN7JHJmcy1zdWZmaXh9O1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAZXJyb3IgXCJgI3skcmZzLWZvbnQtc2l6ZS11bml0fWAgaXMgbm90IGEgdmFsaWQgdW5pdCBmb3IgJHJmcy1mb250LXNpemUtdW5pdC4gVXNlIGBweGAgb3IgYHJlbWAuXCI7XG4gICAgfVxuXG4gICAgLy8gT25seSBhZGQgbWVkaWEgcXVlcnkgaWYgZm9udC1zaXplIGlzIGJpZ2dlciBhcyB0aGUgbWluaW11bSBmb250LXNpemVcbiAgICAvLyBJZiAkcmZzLWZhY3RvciA9PSAxLCBubyByZXNjYWxpbmcgd2lsbCB0YWtlIHBsYWNlXG4gICAgQGlmICRmcyA+ICRyZnMtYmFzZS1mb250LXNpemUgYW5kICRlbmFibGUtcmVzcG9uc2l2ZS1mb250LXNpemVzIHtcbiAgICAgICRtaW4td2lkdGg6IG51bGw7XG4gICAgICAkdmFyaWFibGUtdW5pdDogbnVsbDtcblxuICAgICAgLy8gQ2FsY3VsYXRlIG1pbmltdW0gZm9udC1zaXplIGZvciBnaXZlbiBmb250LXNpemVcbiAgICAgICRmcy1taW46ICRyZnMtYmFzZS1mb250LXNpemUgKyAoJGZzIC0gJHJmcy1iYXNlLWZvbnQtc2l6ZSkgLyAkcmZzLWZhY3RvcjtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGRpZmZlcmVuY2UgYmV0d2VlbiBnaXZlbiBmb250LXNpemUgYW5kIG1pbmltdW0gZm9udC1zaXplIGZvciBnaXZlbiBmb250LXNpemVcbiAgICAgICRmcy1kaWZmOiAkZnMgLSAkZnMtbWluO1xuXG4gICAgICAvLyBCYXNlIGZvbnQtc2l6ZSBmb3JtYXR0aW5nXG4gICAgICAvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB1bml0IGlzIHZhbGlkLCBiZWNhdXNlIHdlIGRpZCB0aGF0IGJlZm9yZVxuICAgICAgJG1pbi13aWR0aDogaWYoJHJmcy1mb250LXNpemUtdW5pdCA9PSByZW0sICN7JGZzLW1pbiAvICRyZnMtcmVtLXZhbHVlfXJlbSwgI3skZnMtbWlufXB4KTtcblxuICAgICAgLy8gSWYgdHdvLWRpbWVuc2lvbmFsLCB1c2Ugc21hbGxlc3Qgb2Ygc2NyZWVuIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICR2YXJpYWJsZS11bml0OiBpZigkcmZzLXR3by1kaW1lbnNpb25hbCwgdm1pbiwgdncpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIHZhcmlhYmxlIHdpZHRoIGJldHdlZW4gMCBhbmQgJHJmcy1icmVha3BvaW50XG4gICAgICAkdmFyaWFibGUtd2lkdGg6ICN7JGZzLWRpZmYgKiAxMDAgLyAkcmZzLWJyZWFrcG9pbnR9I3skdmFyaWFibGUtdW5pdH07XG5cbiAgICAgIC8vIFNldCB0aGUgY2FsY3VsYXRlZCBmb250LXNpemUuXG4gICAgICAkcmZzLWZsdWlkOiBjYWxjKCN7JG1pbi13aWR0aH0gKyAjeyR2YXJpYWJsZS13aWR0aH0pICN7JHJmcy1zdWZmaXh9O1xuICAgIH1cblxuICAgIC8vIFJlbmRlcmluZ1xuICAgIEBpZiAkcmZzLWZsdWlkID09IG51bGwge1xuICAgICAgLy8gT25seSByZW5kZXIgc3RhdGljIGZvbnQtc2l6ZSBpZiBubyBmbHVpZCBmb250LXNpemUgaXMgYXZhaWxhYmxlXG4gICAgICBmb250LXNpemU6ICRyZnMtc3RhdGljO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAkbXEtdmFsdWU6IG51bGw7XG5cbiAgICAgIC8vIFJGUyBicmVha3BvaW50IGZvcm1hdHRpbmdcbiAgICAgIEBpZiAkcmZzLWJyZWFrcG9pbnQtdW5pdCA9PSBlbSBvciAkcmZzLWJyZWFrcG9pbnQtdW5pdCA9PSByZW0ge1xuICAgICAgICAkbXEtdmFsdWU6ICN7JHJmcy1icmVha3BvaW50IC8gJHJmcy1yZW0tdmFsdWV9I3skcmZzLWJyZWFrcG9pbnQtdW5pdH07XG4gICAgICB9XG4gICAgICBAZWxzZSBpZiAkcmZzLWJyZWFrcG9pbnQtdW5pdCA9PSBweCB7XG4gICAgICAgICRtcS12YWx1ZTogI3skcmZzLWJyZWFrcG9pbnR9cHg7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIEBlcnJvciBcImAjeyRyZnMtYnJlYWtwb2ludC11bml0fWAgaXMgbm90IGEgdmFsaWQgdW5pdCBmb3IgJHJmcy1icmVha3BvaW50LXVuaXQuIFVzZSBgcHhgLCBgZW1gIG9yIGByZW1gLlwiO1xuICAgICAgfVxuXG4gICAgICBAaWYgJHJmcy1jbGFzcyA9PSBcImRpc2FibGVcIiB7XG4gICAgICAgIC8vIEFkZGluZyBhbiBleHRyYSBjbGFzcyBpbmNyZWFzZXMgc3BlY2lmaWNpdHksXG4gICAgICAgIC8vIHdoaWNoIHByZXZlbnRzIHRoZSBtZWRpYSBxdWVyeSB0byBvdmVycmlkZSB0aGUgZm9udCBzaXplXG4gICAgICAgICYsXG4gICAgICAgIC5kaXNhYmxlLXJlc3BvbnNpdmUtZm9udC1zaXplICYsXG4gICAgICAgICYuZGlzYWJsZS1yZXNwb25zaXZlLWZvbnQtc2l6ZSB7XG4gICAgICAgICAgZm9udC1zaXplOiAkcmZzLXN0YXRpYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBmb250LXNpemU6ICRyZnMtc3RhdGljO1xuICAgICAgfVxuXG4gICAgICBAaWYgJHJmcy10d28tZGltZW5zaW9uYWwge1xuICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogI3skbXEtdmFsdWV9KSwgKG1heC1oZWlnaHQ6ICN7JG1xLXZhbHVlfSkge1xuICAgICAgICAgIEBpZiAkcmZzLWNsYXNzID09IFwiZW5hYmxlXCIge1xuICAgICAgICAgICAgLmVuYWJsZS1yZXNwb25zaXZlLWZvbnQtc2l6ZSAmLFxuICAgICAgICAgICAgJi5lbmFibGUtcmVzcG9uc2l2ZS1mb250LXNpemUge1xuICAgICAgICAgICAgICBmb250LXNpemU6ICRyZnMtZmx1aWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEBlbHNlIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHJmcy1mbHVpZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBAaWYgJHJmcy1zYWZhcmktaWZyYW1lLXJlc2l6ZS1idWctZml4IHtcbiAgICAgICAgICAgIC8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBsZW5ndGgtemVyby1uby11bml0XG4gICAgICAgICAgICBtaW4td2lkdGg6IDB2dztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICN7JG1xLXZhbHVlfSkge1xuICAgICAgICAgIEBpZiAkcmZzLWNsYXNzID09IFwiZW5hYmxlXCIge1xuICAgICAgICAgICAgLmVuYWJsZS1yZXNwb25zaXZlLWZvbnQtc2l6ZSAmLFxuICAgICAgICAgICAgJi5lbmFibGUtcmVzcG9uc2l2ZS1mb250LXNpemUge1xuICAgICAgICAgICAgICBmb250LXNpemU6ICRyZnMtZmx1aWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEBlbHNlIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHJmcy1mbHVpZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBAaWYgJHJmcy1zYWZhcmktaWZyYW1lLXJlc2l6ZS1idWctZml4IHtcbiAgICAgICAgICAgIC8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBsZW5ndGgtemVyby1uby11bml0XG4gICAgICAgICAgICBtaW4td2lkdGg6IDB2dztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIGZvbnQtc2l6ZSAmIHJlc3BvbnNpdmUtZm9udC1zaXplIG1peGluIHVzZXMgUkZTIHRvIHJlc2NhbGUgZm9udCBzaXplc1xuQG1peGluIGZvbnQtc2l6ZSgkZnMsICRpbXBvcnRhbnQ6IGZhbHNlKSB7XG4gIEBpbmNsdWRlIHJmcygkZnMsICRpbXBvcnRhbnQpO1xufVxuXG5AbWl4aW4gcmVzcG9uc2l2ZS1mb250LXNpemUoJGZzLCAkaW1wb3J0YW50OiBmYWxzZSkge1xuICBAaW5jbHVkZSByZnMoJGZzLCAkaW1wb3J0YW50KTtcbn1cbiIsIi8vIFZhcmlhYmxlc1xuLy9cbi8vIFZhcmlhYmxlcyBzaG91bGQgZm9sbG93IHRoZSBgJGNvbXBvbmVudC1zdGF0ZS1wcm9wZXJ0eS1zaXplYCBmb3JtdWxhIGZvclxuLy8gY29uc2lzdGVudCBuYW1pbmcuIEV4OiAkbmF2LWxpbmstZGlzYWJsZWQtY29sb3IgYW5kICRtb2RhbC1jb250ZW50LWJveC1zaGFkb3cteHMuXG5cbi8vIENvbG9yIHN5c3RlbVxuXG4kd2hpdGU6ICAgICNmZmYgIWRlZmF1bHQ7XG4kZ3JheS0xMDA6ICNmOGY5ZmEgIWRlZmF1bHQ7XG4kZ3JheS0yMDA6ICNlOWVjZWYgIWRlZmF1bHQ7XG4kZ3JheS0zMDA6ICNkZWUyZTYgIWRlZmF1bHQ7XG4kZ3JheS00MDA6ICNjZWQ0ZGEgIWRlZmF1bHQ7XG4kZ3JheS01MDA6ICNhZGI1YmQgIWRlZmF1bHQ7XG4kZ3JheS02MDA6ICM2Yzc1N2QgIWRlZmF1bHQ7XG4kZ3JheS03MDA6ICM0OTUwNTcgIWRlZmF1bHQ7XG4kZ3JheS04MDA6ICMzNDNhNDAgIWRlZmF1bHQ7XG4kZ3JheS05MDA6ICMyMTI1MjkgIWRlZmF1bHQ7XG4kYmxhY2s6ICAgICMwMDAgIWRlZmF1bHQ7XG5cbiRncmF5czogKCkgIWRlZmF1bHQ7XG4vLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2Nzcy9kb2xsYXItdmFyaWFibGUtZGVmYXVsdFxuJGdyYXlzOiBtYXAtbWVyZ2UoXG4gIChcbiAgICBcIjEwMFwiOiAkZ3JheS0xMDAsXG4gICAgXCIyMDBcIjogJGdyYXktMjAwLFxuICAgIFwiMzAwXCI6ICRncmF5LTMwMCxcbiAgICBcIjQwMFwiOiAkZ3JheS00MDAsXG4gICAgXCI1MDBcIjogJGdyYXktNTAwLFxuICAgIFwiNjAwXCI6ICRncmF5LTYwMCxcbiAgICBcIjcwMFwiOiAkZ3JheS03MDAsXG4gICAgXCI4MDBcIjogJGdyYXktODAwLFxuICAgIFwiOTAwXCI6ICRncmF5LTkwMFxuICApLFxuICAkZ3JheXNcbik7XG5cbiRibHVlOiAgICAjMDA3YmZmICFkZWZhdWx0O1xuJGluZGlnbzogICM2NjEwZjIgIWRlZmF1bHQ7XG4kcHVycGxlOiAgIzZmNDJjMSAhZGVmYXVsdDtcbiRwaW5rOiAgICAjZTgzZThjICFkZWZhdWx0O1xuJHJlZDogICAgICNkYzM1NDUgIWRlZmF1bHQ7XG4kb3JhbmdlOiAgI2ZkN2UxNCAhZGVmYXVsdDtcbiR5ZWxsb3c6ICAjZmZjMTA3ICFkZWZhdWx0O1xuJGdyZWVuOiAgICMyOGE3NDUgIWRlZmF1bHQ7XG4kdGVhbDogICAgIzIwYzk5NyAhZGVmYXVsdDtcbiRjeWFuOiAgICAjMTdhMmI4ICFkZWZhdWx0O1xuXG4kY29sb3JzOiAoKSAhZGVmYXVsdDtcbi8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBzY3NzL2RvbGxhci12YXJpYWJsZS1kZWZhdWx0XG4kY29sb3JzOiBtYXAtbWVyZ2UoXG4gIChcbiAgICBcImJsdWVcIjogICAgICAgJGJsdWUsXG4gICAgXCJpbmRpZ29cIjogICAgICRpbmRpZ28sXG4gICAgXCJwdXJwbGVcIjogICAgICRwdXJwbGUsXG4gICAgXCJwaW5rXCI6ICAgICAgICRwaW5rLFxuICAgIFwicmVkXCI6ICAgICAgICAkcmVkLFxuICAgIFwib3JhbmdlXCI6ICAgICAkb3JhbmdlLFxuICAgIFwieWVsbG93XCI6ICAgICAkeWVsbG93LFxuICAgIFwiZ3JlZW5cIjogICAgICAkZ3JlZW4sXG4gICAgXCJ0ZWFsXCI6ICAgICAgICR0ZWFsLFxuICAgIFwiY3lhblwiOiAgICAgICAkY3lhbixcbiAgICBcIndoaXRlXCI6ICAgICAgJHdoaXRlLFxuICAgIFwiZ3JheVwiOiAgICAgICAkZ3JheS02MDAsXG4gICAgXCJncmF5LWRhcmtcIjogICRncmF5LTgwMFxuICApLFxuICAkY29sb3JzXG4pO1xuXG4kcHJpbWFyeTogICAgICAgJGJsdWUgIWRlZmF1bHQ7XG4kc2Vjb25kYXJ5OiAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xuJHN1Y2Nlc3M6ICAgICAgICRncmVlbiAhZGVmYXVsdDtcbiRpbmZvOiAgICAgICAgICAkY3lhbiAhZGVmYXVsdDtcbiR3YXJuaW5nOiAgICAgICAkeWVsbG93ICFkZWZhdWx0O1xuJGRhbmdlcjogICAgICAgICRyZWQgIWRlZmF1bHQ7XG4kbGlnaHQ6ICAgICAgICAgJGdyYXktMTAwICFkZWZhdWx0O1xuJGRhcms6ICAgICAgICAgICRncmF5LTgwMCAhZGVmYXVsdDtcblxuJHRoZW1lLWNvbG9yczogKCkgIWRlZmF1bHQ7XG4vLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2Nzcy9kb2xsYXItdmFyaWFibGUtZGVmYXVsdFxuJHRoZW1lLWNvbG9yczogbWFwLW1lcmdlKFxuICAoXG4gICAgXCJwcmltYXJ5XCI6ICAgICRwcmltYXJ5LFxuICAgIFwic2Vjb25kYXJ5XCI6ICAkc2Vjb25kYXJ5LFxuICAgIFwic3VjY2Vzc1wiOiAgICAkc3VjY2VzcyxcbiAgICBcImluZm9cIjogICAgICAgJGluZm8sXG4gICAgXCJ3YXJuaW5nXCI6ICAgICR3YXJuaW5nLFxuICAgIFwiZGFuZ2VyXCI6ICAgICAkZGFuZ2VyLFxuICAgIFwibGlnaHRcIjogICAgICAkbGlnaHQsXG4gICAgXCJkYXJrXCI6ICAgICAgICRkYXJrXG4gICksXG4gICR0aGVtZS1jb2xvcnNcbik7XG5cbi8vIFNldCBhIHNwZWNpZmljIGp1bXAgcG9pbnQgZm9yIHJlcXVlc3RpbmcgY29sb3IganVtcHNcbiR0aGVtZS1jb2xvci1pbnRlcnZhbDogICAgICA4JSAhZGVmYXVsdDtcblxuLy8gVGhlIHlpcSBsaWdodG5lc3MgdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZW4gdGhlIGxpZ2h0bmVzcyBvZiBjb2xvciBjaGFuZ2VzIGZyb20gXCJkYXJrXCIgdG8gXCJsaWdodFwiLiBBY2NlcHRhYmxlIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAyNTUuXG4keWlxLWNvbnRyYXN0ZWQtdGhyZXNob2xkOiAgMTUwICFkZWZhdWx0O1xuXG4vLyBDdXN0b21pemUgdGhlIGxpZ2h0IGFuZCBkYXJrIHRleHQgY29sb3JzIGZvciB1c2UgaW4gb3VyIFlJUSBjb2xvciBjb250cmFzdCBmdW5jdGlvbi5cbiR5aXEtdGV4dC1kYXJrOiAgICAgICAgICAgICAkZ3JheS05MDAgIWRlZmF1bHQ7XG4keWlxLXRleHQtbGlnaHQ6ICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuXG5cbi8vIE9wdGlvbnNcbi8vXG4vLyBRdWlja2x5IG1vZGlmeSBnbG9iYWwgc3R5bGluZyBieSBlbmFibGluZyBvciBkaXNhYmxpbmcgb3B0aW9uYWwgZmVhdHVyZXMuXG5cbiRlbmFibGUtY2FyZXQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlICFkZWZhdWx0O1xuJGVuYWJsZS1yb3VuZGVkOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUgIWRlZmF1bHQ7XG4kZW5hYmxlLXNoYWRvd3M6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgIWRlZmF1bHQ7XG4kZW5hYmxlLWdyYWRpZW50czogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgIWRlZmF1bHQ7XG4kZW5hYmxlLXRyYW5zaXRpb25zOiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSAhZGVmYXVsdDtcbiRlbmFibGUtcHJlZmVycy1yZWR1Y2VkLW1vdGlvbi1tZWRpYS1xdWVyeTogICB0cnVlICFkZWZhdWx0O1xuJGVuYWJsZS1ob3Zlci1tZWRpYS1xdWVyeTogICAgICAgICAgICAgICAgICAgIGZhbHNlICFkZWZhdWx0OyAvLyBEZXByZWNhdGVkLCBubyBsb25nZXIgYWZmZWN0cyBhbnkgY29tcGlsZWQgQ1NTXG4kZW5hYmxlLWdyaWQtY2xhc3NlczogICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSAhZGVmYXVsdDtcbiRlbmFibGUtcG9pbnRlci1jdXJzb3ItZm9yLWJ1dHRvbnM6ICAgICAgICAgICB0cnVlICFkZWZhdWx0O1xuJGVuYWJsZS1wcmludC1zdHlsZXM6ICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUgIWRlZmF1bHQ7XG4kZW5hYmxlLXJlc3BvbnNpdmUtZm9udC1zaXplczogICAgICAgICAgICAgICAgZmFsc2UgIWRlZmF1bHQ7XG4kZW5hYmxlLXZhbGlkYXRpb24taWNvbnM6ICAgICAgICAgICAgICAgICAgICAgdHJ1ZSAhZGVmYXVsdDtcbiRlbmFibGUtZGVwcmVjYXRpb24tbWVzc2FnZXM6ICAgICAgICAgICAgICAgICB0cnVlICFkZWZhdWx0O1xuXG5cbi8vIFNwYWNpbmdcbi8vXG4vLyBDb250cm9sIHRoZSBkZWZhdWx0IHN0eWxpbmcgb2YgbW9zdCBCb290c3RyYXAgZWxlbWVudHMgYnkgbW9kaWZ5aW5nIHRoZXNlXG4vLyB2YXJpYWJsZXMuIE1vc3RseSBmb2N1c2VkIG9uIHNwYWNpbmcuXG4vLyBZb3UgY2FuIGFkZCBtb3JlIGVudHJpZXMgdG8gdGhlICRzcGFjZXJzIG1hcCwgc2hvdWxkIHlvdSBuZWVkIG1vcmUgdmFyaWF0aW9uLlxuXG4kc3BhY2VyOiAxcmVtICFkZWZhdWx0O1xuJHNwYWNlcnM6ICgpICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNjc3MvZG9sbGFyLXZhcmlhYmxlLWRlZmF1bHRcbiRzcGFjZXJzOiBtYXAtbWVyZ2UoXG4gIChcbiAgICAwOiAwLFxuICAgIDE6ICgkc3BhY2VyICogLjI1KSxcbiAgICAyOiAoJHNwYWNlciAqIC41KSxcbiAgICAzOiAkc3BhY2VyLFxuICAgIDQ6ICgkc3BhY2VyICogMS41KSxcbiAgICA1OiAoJHNwYWNlciAqIDMpXG4gICksXG4gICRzcGFjZXJzXG4pO1xuXG4vLyBUaGlzIHZhcmlhYmxlIGFmZmVjdHMgdGhlIGAuaC0qYCBhbmQgYC53LSpgIGNsYXNzZXMuXG4kc2l6ZXM6ICgpICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNjc3MvZG9sbGFyLXZhcmlhYmxlLWRlZmF1bHRcbiRzaXplczogbWFwLW1lcmdlKFxuICAoXG4gICAgMjU6IDI1JSxcbiAgICA1MDogNTAlLFxuICAgIDc1OiA3NSUsXG4gICAgMTAwOiAxMDAlLFxuICAgIGF1dG86IGF1dG9cbiAgKSxcbiAgJHNpemVzXG4pO1xuXG5cbi8vIEJvZHlcbi8vXG4vLyBTZXR0aW5ncyBmb3IgdGhlIGA8Ym9keT5gIGVsZW1lbnQuXG5cbiRib2R5LWJnOiAgICAgICAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kYm9keS1jb2xvcjogICAgICAgICAgICAgICAgJGdyYXktOTAwICFkZWZhdWx0O1xuXG5cbi8vIExpbmtzXG4vL1xuLy8gU3R5bGUgYW5jaG9yIGVsZW1lbnRzLlxuXG4kbGluay1jb2xvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZS1jb2xvcihcInByaW1hcnlcIikgIWRlZmF1bHQ7XG4kbGluay1kZWNvcmF0aW9uOiAgICAgICAgICAgICAgICAgICAgICAgICBub25lICFkZWZhdWx0O1xuJGxpbmstaG92ZXItY29sb3I6ICAgICAgICAgICAgICAgICAgICAgICAgZGFya2VuKCRsaW5rLWNvbG9yLCAxNSUpICFkZWZhdWx0O1xuJGxpbmstaG92ZXItZGVjb3JhdGlvbjogICAgICAgICAgICAgICAgICAgdW5kZXJsaW5lICFkZWZhdWx0O1xuLy8gRGFya2VuIHBlcmNlbnRhZ2UgZm9yIGxpbmtzIHdpdGggYC50ZXh0LSpgIGNsYXNzIChlLmcuIGAudGV4dC1zdWNjZXNzYClcbiRlbXBoYXNpemVkLWxpbmstaG92ZXItZGFya2VuLXBlcmNlbnRhZ2U6IDE1JSAhZGVmYXVsdDtcblxuLy8gUGFyYWdyYXBoc1xuLy9cbi8vIFN0eWxlIHAgZWxlbWVudC5cblxuJHBhcmFncmFwaC1tYXJnaW4tYm90dG9tOiAgIDFyZW0gIWRlZmF1bHQ7XG5cblxuLy8gR3JpZCBicmVha3BvaW50c1xuLy9cbi8vIERlZmluZSB0aGUgbWluaW11bSBkaW1lbnNpb25zIGF0IHdoaWNoIHlvdXIgbGF5b3V0IHdpbGwgY2hhbmdlLFxuLy8gYWRhcHRpbmcgdG8gZGlmZmVyZW50IHNjcmVlbiBzaXplcywgZm9yIHVzZSBpbiBtZWRpYSBxdWVyaWVzLlxuXG4kZ3JpZC1icmVha3BvaW50czogKFxuICB4czogMCxcbiAgc206IDU3NnB4LFxuICBtZDogNzY4cHgsXG4gIGxnOiA5OTJweCxcbiAgeGw6IDEyMDBweFxuKSAhZGVmYXVsdDtcblxuQGluY2x1ZGUgX2Fzc2VydC1hc2NlbmRpbmcoJGdyaWQtYnJlYWtwb2ludHMsIFwiJGdyaWQtYnJlYWtwb2ludHNcIik7XG5AaW5jbHVkZSBfYXNzZXJ0LXN0YXJ0cy1hdC16ZXJvKCRncmlkLWJyZWFrcG9pbnRzLCBcIiRncmlkLWJyZWFrcG9pbnRzXCIpO1xuXG5cbi8vIEdyaWQgY29udGFpbmVyc1xuLy9cbi8vIERlZmluZSB0aGUgbWF4aW11bSB3aWR0aCBvZiBgLmNvbnRhaW5lcmAgZm9yIGRpZmZlcmVudCBzY3JlZW4gc2l6ZXMuXG5cbiRjb250YWluZXItbWF4LXdpZHRoczogKFxuICBzbTogNTQwcHgsXG4gIG1kOiA3MjBweCxcbiAgbGc6IDk2MHB4LFxuICB4bDogMTE0MHB4XG4pICFkZWZhdWx0O1xuXG5AaW5jbHVkZSBfYXNzZXJ0LWFzY2VuZGluZygkY29udGFpbmVyLW1heC13aWR0aHMsIFwiJGNvbnRhaW5lci1tYXgtd2lkdGhzXCIpO1xuXG5cbi8vIEdyaWQgY29sdW1uc1xuLy9cbi8vIFNldCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgYW5kIHNwZWNpZnkgdGhlIHdpZHRoIG9mIHRoZSBndXR0ZXJzLlxuXG4kZ3JpZC1jb2x1bW5zOiAgICAgICAgICAgICAgICAxMiAhZGVmYXVsdDtcbiRncmlkLWd1dHRlci13aWR0aDogICAgICAgICAgIDMwcHggIWRlZmF1bHQ7XG5cblxuLy8gQ29tcG9uZW50c1xuLy9cbi8vIERlZmluZSBjb21tb24gcGFkZGluZyBhbmQgYm9yZGVyIHJhZGl1cyBzaXplcyBhbmQgbW9yZS5cblxuJGxpbmUtaGVpZ2h0LWxnOiAgICAgICAgICAgICAgMS41ICFkZWZhdWx0O1xuJGxpbmUtaGVpZ2h0LXNtOiAgICAgICAgICAgICAgMS41ICFkZWZhdWx0O1xuXG4kYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgICAxcHggIWRlZmF1bHQ7XG4kYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICAgICAkZ3JheS0zMDAgIWRlZmF1bHQ7XG5cbiRib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAgIC4yNXJlbSAhZGVmYXVsdDtcbiRib3JkZXItcmFkaXVzLWxnOiAgICAgICAgICAgIC4zcmVtICFkZWZhdWx0O1xuJGJvcmRlci1yYWRpdXMtc206ICAgICAgICAgICAgLjJyZW0gIWRlZmF1bHQ7XG5cbiRyb3VuZGVkLXBpbGw6ICAgICAgICAgICAgICAgIDUwcmVtICFkZWZhdWx0O1xuXG4kYm94LXNoYWRvdy1zbTogICAgICAgICAgICAgICAwIC4xMjVyZW0gLjI1cmVtIHJnYmEoJGJsYWNrLCAuMDc1KSAhZGVmYXVsdDtcbiRib3gtc2hhZG93OiAgICAgICAgICAgICAgICAgIDAgLjVyZW0gMXJlbSByZ2JhKCRibGFjaywgLjE1KSAhZGVmYXVsdDtcbiRib3gtc2hhZG93LWxnOiAgICAgICAgICAgICAgIDAgMXJlbSAzcmVtIHJnYmEoJGJsYWNrLCAuMTc1KSAhZGVmYXVsdDtcblxuJGNvbXBvbmVudC1hY3RpdmUtY29sb3I6ICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGNvbXBvbmVudC1hY3RpdmUtYmc6ICAgICAgICAgdGhlbWUtY29sb3IoXCJwcmltYXJ5XCIpICFkZWZhdWx0O1xuXG4kY2FyZXQtd2lkdGg6ICAgICAgICAgICAgICAgICAuM2VtICFkZWZhdWx0O1xuJGNhcmV0LXZlcnRpY2FsLWFsaWduOiAgICAgICAgJGNhcmV0LXdpZHRoICogLjg1ICFkZWZhdWx0O1xuJGNhcmV0LXNwYWNpbmc6ICAgICAgICAgICAgICAgJGNhcmV0LXdpZHRoICogLjg1ICFkZWZhdWx0O1xuXG4kdHJhbnNpdGlvbi1iYXNlOiAgICAgICAgICAgICBhbGwgLjJzIGVhc2UtaW4tb3V0ICFkZWZhdWx0O1xuJHRyYW5zaXRpb24tZmFkZTogICAgICAgICAgICAgb3BhY2l0eSAuMTVzIGxpbmVhciAhZGVmYXVsdDtcbiR0cmFuc2l0aW9uLWNvbGxhcHNlOiAgICAgICAgIGhlaWdodCAuMzVzIGVhc2UgIWRlZmF1bHQ7XG5cbiRlbWJlZC1yZXNwb25zaXZlLWFzcGVjdC1yYXRpb3M6ICgpICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNjc3MvZG9sbGFyLXZhcmlhYmxlLWRlZmF1bHRcbiRlbWJlZC1yZXNwb25zaXZlLWFzcGVjdC1yYXRpb3M6IGpvaW4oXG4gIChcbiAgICAoMjEgOSksXG4gICAgKDE2IDkpLFxuICAgICg0IDMpLFxuICAgICgxIDEpLFxuICApLFxuICAkZW1iZWQtcmVzcG9uc2l2ZS1hc3BlY3QtcmF0aW9zXG4pO1xuXG4vLyBUeXBvZ3JhcGh5XG4vL1xuLy8gRm9udCwgbGluZS1oZWlnaHQsIGFuZCBjb2xvciBmb3IgYm9keSB0ZXh0LCBoZWFkaW5ncywgYW5kIG1vcmUuXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHZhbHVlLWtleXdvcmQtY2FzZVxuJGZvbnQtZmFtaWx5LXNhbnMtc2VyaWY6ICAgICAgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBBcmlhbCwgXCJOb3RvIFNhbnNcIiwgc2Fucy1zZXJpZiwgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCIsIFwiU2Vnb2UgVUkgU3ltYm9sXCIsIFwiTm90byBDb2xvciBFbW9qaVwiICFkZWZhdWx0O1xuJGZvbnQtZmFtaWx5LW1vbm9zcGFjZTogICAgICAgU0ZNb25vLVJlZ3VsYXIsIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZSAhZGVmYXVsdDtcbiRmb250LWZhbWlseS1iYXNlOiAgICAgICAgICAgICRmb250LWZhbWlseS1zYW5zLXNlcmlmICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWVuYWJsZSB2YWx1ZS1rZXl3b3JkLWNhc2VcblxuJGZvbnQtc2l6ZS1iYXNlOiAgICAgICAgICAgICAgMXJlbSAhZGVmYXVsdDsgLy8gQXNzdW1lcyB0aGUgYnJvd3NlciBkZWZhdWx0LCB0eXBpY2FsbHkgYDE2cHhgXG4kZm9udC1zaXplLWxnOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAxLjI1ICFkZWZhdWx0O1xuJGZvbnQtc2l6ZS1zbTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogLjg3NSAhZGVmYXVsdDtcblxuJGZvbnQtd2VpZ2h0LWxpZ2h0ZXI6ICAgICAgICAgbGlnaHRlciAhZGVmYXVsdDtcbiRmb250LXdlaWdodC1saWdodDogICAgICAgICAgIDMwMCAhZGVmYXVsdDtcbiRmb250LXdlaWdodC1ub3JtYWw6ICAgICAgICAgIDQwMCAhZGVmYXVsdDtcbiRmb250LXdlaWdodC1ib2xkOiAgICAgICAgICAgIDcwMCAhZGVmYXVsdDtcbiRmb250LXdlaWdodC1ib2xkZXI6ICAgICAgICAgIGJvbGRlciAhZGVmYXVsdDtcblxuJGZvbnQtd2VpZ2h0LWJhc2U6ICAgICAgICAgICAgJGZvbnQtd2VpZ2h0LW5vcm1hbCAhZGVmYXVsdDtcbiRsaW5lLWhlaWdodC1iYXNlOiAgICAgICAgICAgIDEuNSAhZGVmYXVsdDtcblxuJGgxLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMi41ICFkZWZhdWx0O1xuJGgyLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMiAhZGVmYXVsdDtcbiRoMy1mb250LXNpemU6ICAgICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuNzUgIWRlZmF1bHQ7XG4kaDQtZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAxLjUgIWRlZmF1bHQ7XG4kaDUtZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAxLjI1ICFkZWZhdWx0O1xuJGg2LWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICFkZWZhdWx0O1xuXG4kaGVhZGluZ3MtbWFyZ2luLWJvdHRvbTogICAgICAkc3BhY2VyIC8gMiAhZGVmYXVsdDtcbiRoZWFkaW5ncy1mb250LWZhbWlseTogICAgICAgIG51bGwgIWRlZmF1bHQ7XG4kaGVhZGluZ3MtZm9udC13ZWlnaHQ6ICAgICAgICA1MDAgIWRlZmF1bHQ7XG4kaGVhZGluZ3MtbGluZS1oZWlnaHQ6ICAgICAgICAxLjIgIWRlZmF1bHQ7XG4kaGVhZGluZ3MtY29sb3I6ICAgICAgICAgICAgICBudWxsICFkZWZhdWx0O1xuXG4kZGlzcGxheTEtc2l6ZTogICAgICAgICAgICAgICA2cmVtICFkZWZhdWx0O1xuJGRpc3BsYXkyLXNpemU6ICAgICAgICAgICAgICAgNS41cmVtICFkZWZhdWx0O1xuJGRpc3BsYXkzLXNpemU6ICAgICAgICAgICAgICAgNC41cmVtICFkZWZhdWx0O1xuJGRpc3BsYXk0LXNpemU6ICAgICAgICAgICAgICAgMy41cmVtICFkZWZhdWx0O1xuXG4kZGlzcGxheTEtd2VpZ2h0OiAgICAgICAgICAgICAzMDAgIWRlZmF1bHQ7XG4kZGlzcGxheTItd2VpZ2h0OiAgICAgICAgICAgICAzMDAgIWRlZmF1bHQ7XG4kZGlzcGxheTMtd2VpZ2h0OiAgICAgICAgICAgICAzMDAgIWRlZmF1bHQ7XG4kZGlzcGxheTQtd2VpZ2h0OiAgICAgICAgICAgICAzMDAgIWRlZmF1bHQ7XG4kZGlzcGxheS1saW5lLWhlaWdodDogICAgICAgICAkaGVhZGluZ3MtbGluZS1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRsZWFkLWZvbnQtc2l6ZTogICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuMjUgIWRlZmF1bHQ7XG4kbGVhZC1mb250LXdlaWdodDogICAgICAgICAgICAzMDAgIWRlZmF1bHQ7XG5cbiRzbWFsbC1mb250LXNpemU6ICAgICAgICAgICAgIDgwJSAhZGVmYXVsdDtcblxuJHRleHQtbXV0ZWQ6ICAgICAgICAgICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xuXG4kYmxvY2txdW90ZS1zbWFsbC1jb2xvcjogICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG4kYmxvY2txdW90ZS1zbWFsbC1mb250LXNpemU6ICAkc21hbGwtZm9udC1zaXplICFkZWZhdWx0O1xuJGJsb2NrcXVvdGUtZm9udC1zaXplOiAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICogMS4yNSAhZGVmYXVsdDtcblxuJGhyLWJvcmRlci1jb2xvcjogICAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4xKSAhZGVmYXVsdDtcbiRoci1ib3JkZXItd2lkdGg6ICAgICAgICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG5cbiRtYXJrLXBhZGRpbmc6ICAgICAgICAgICAgICAgIC4yZW0gIWRlZmF1bHQ7XG5cbiRkdC1mb250LXdlaWdodDogICAgICAgICAgICAgICRmb250LXdlaWdodC1ib2xkICFkZWZhdWx0O1xuXG4ka2JkLWJveC1zaGFkb3c6ICAgICAgICAgICAgICBpbnNldCAwIC0uMXJlbSAwIHJnYmEoJGJsYWNrLCAuMjUpICFkZWZhdWx0O1xuJG5lc3RlZC1rYmQtZm9udC13ZWlnaHQ6ICAgICAgJGZvbnQtd2VpZ2h0LWJvbGQgIWRlZmF1bHQ7XG5cbiRsaXN0LWlubGluZS1wYWRkaW5nOiAgICAgICAgIC41cmVtICFkZWZhdWx0O1xuXG4kbWFyay1iZzogICAgICAgICAgICAgICAgICAgICAjZmNmOGUzICFkZWZhdWx0O1xuXG4kaHItbWFyZ2luLXk6ICAgICAgICAgICAgICAgICAkc3BhY2VyICFkZWZhdWx0O1xuXG5cbi8vIFRhYmxlc1xuLy9cbi8vIEN1c3RvbWl6ZXMgdGhlIGAudGFibGVgIGNvbXBvbmVudCB3aXRoIGJhc2ljIHZhbHVlcywgZWFjaCB1c2VkIGFjcm9zcyBhbGwgdGFibGUgdmFyaWF0aW9ucy5cblxuJHRhYmxlLWNlbGwtcGFkZGluZzogICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xuJHRhYmxlLWNlbGwtcGFkZGluZy1zbTogICAgICAgLjNyZW0gIWRlZmF1bHQ7XG5cbiR0YWJsZS1jb2xvcjogICAgICAgICAgICAgICAgICRib2R5LWNvbG9yICFkZWZhdWx0O1xuJHRhYmxlLWJnOiAgICAgICAgICAgICAgICAgICAgbnVsbCAhZGVmYXVsdDtcbiR0YWJsZS1hY2NlbnQtYmc6ICAgICAgICAgICAgIHJnYmEoJGJsYWNrLCAuMDUpICFkZWZhdWx0O1xuJHRhYmxlLWhvdmVyLWNvbG9yOiAgICAgICAgICAgJHRhYmxlLWNvbG9yICFkZWZhdWx0O1xuJHRhYmxlLWhvdmVyLWJnOiAgICAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4wNzUpICFkZWZhdWx0O1xuJHRhYmxlLWFjdGl2ZS1iZzogICAgICAgICAgICAgJHRhYmxlLWhvdmVyLWJnICFkZWZhdWx0O1xuXG4kdGFibGUtYm9yZGVyLXdpZHRoOiAgICAgICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuJHRhYmxlLWJvcmRlci1jb2xvcjogICAgICAgICAgJGJvcmRlci1jb2xvciAhZGVmYXVsdDtcblxuJHRhYmxlLWhlYWQtYmc6ICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xuJHRhYmxlLWhlYWQtY29sb3I6ICAgICAgICAgICAgJGdyYXktNzAwICFkZWZhdWx0O1xuXG4kdGFibGUtZGFyay1jb2xvcjogICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kdGFibGUtZGFyay1iZzogICAgICAgICAgICAgICAkZ3JheS04MDAgIWRlZmF1bHQ7XG4kdGFibGUtZGFyay1hY2NlbnQtYmc6ICAgICAgICByZ2JhKCR3aGl0ZSwgLjA1KSAhZGVmYXVsdDtcbiR0YWJsZS1kYXJrLWhvdmVyLWNvbG9yOiAgICAgICR0YWJsZS1kYXJrLWNvbG9yICFkZWZhdWx0O1xuJHRhYmxlLWRhcmstaG92ZXItYmc6ICAgICAgICAgcmdiYSgkd2hpdGUsIC4wNzUpICFkZWZhdWx0O1xuJHRhYmxlLWRhcmstYm9yZGVyLWNvbG9yOiAgICAgbGlnaHRlbigkdGFibGUtZGFyay1iZywgNy41JSkgIWRlZmF1bHQ7XG4kdGFibGUtZGFyay1jb2xvcjogICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG5cbiR0YWJsZS1zdHJpcGVkLW9yZGVyOiAgICAgICAgIG9kZCAhZGVmYXVsdDtcblxuJHRhYmxlLWNhcHRpb24tY29sb3I6ICAgICAgICAgJHRleHQtbXV0ZWQgIWRlZmF1bHQ7XG5cbiR0YWJsZS1iZy1sZXZlbDogICAgICAgICAgICAgIC05ICFkZWZhdWx0O1xuJHRhYmxlLWJvcmRlci1sZXZlbDogICAgICAgICAgLTYgIWRlZmF1bHQ7XG5cblxuLy8gQnV0dG9ucyArIEZvcm1zXG4vL1xuLy8gU2hhcmVkIHZhcmlhYmxlcyB0aGF0IGFyZSByZWFzc2lnbmVkIHRvIGAkaW5wdXQtYCBhbmQgYCRidG4tYCBzcGVjaWZpYyB2YXJpYWJsZXMuXG5cbiRpbnB1dC1idG4tcGFkZGluZy15OiAgICAgICAgIC4zNzVyZW0gIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLXBhZGRpbmcteDogICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLWZvbnQtZmFtaWx5OiAgICAgICBudWxsICFkZWZhdWx0O1xuJGlucHV0LWJ0bi1mb250LXNpemU6ICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICFkZWZhdWx0O1xuJGlucHV0LWJ0bi1saW5lLWhlaWdodDogICAgICAgJGxpbmUtaGVpZ2h0LWJhc2UgIWRlZmF1bHQ7XG5cbiRpbnB1dC1idG4tZm9jdXMtd2lkdGg6ICAgICAgIC4ycmVtICFkZWZhdWx0O1xuJGlucHV0LWJ0bi1mb2N1cy1jb2xvcjogICAgICAgcmdiYSgkY29tcG9uZW50LWFjdGl2ZS1iZywgLjI1KSAhZGVmYXVsdDtcbiRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdzogIDAgMCAwICRpbnB1dC1idG4tZm9jdXMtd2lkdGggJGlucHV0LWJ0bi1mb2N1cy1jb2xvciAhZGVmYXVsdDtcblxuJGlucHV0LWJ0bi1wYWRkaW5nLXktc206ICAgICAgLjI1cmVtICFkZWZhdWx0O1xuJGlucHV0LWJ0bi1wYWRkaW5nLXgtc206ICAgICAgLjVyZW0gIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLWZvbnQtc2l6ZS1zbTogICAgICAkZm9udC1zaXplLXNtICFkZWZhdWx0O1xuJGlucHV0LWJ0bi1saW5lLWhlaWdodC1zbTogICAgJGxpbmUtaGVpZ2h0LXNtICFkZWZhdWx0O1xuXG4kaW5wdXQtYnRuLXBhZGRpbmcteS1sZzogICAgICAuNXJlbSAhZGVmYXVsdDtcbiRpbnB1dC1idG4tcGFkZGluZy14LWxnOiAgICAgIDFyZW0gIWRlZmF1bHQ7XG4kaW5wdXQtYnRuLWZvbnQtc2l6ZS1sZzogICAgICAkZm9udC1zaXplLWxnICFkZWZhdWx0O1xuJGlucHV0LWJ0bi1saW5lLWhlaWdodC1sZzogICAgJGxpbmUtaGVpZ2h0LWxnICFkZWZhdWx0O1xuXG4kaW5wdXQtYnRuLWJvcmRlci13aWR0aDogICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuXG5cbi8vIEJ1dHRvbnNcbi8vXG4vLyBGb3IgZWFjaCBvZiBCb290c3RyYXAncyBidXR0b25zLCBkZWZpbmUgdGV4dCwgYmFja2dyb3VuZCwgYW5kIGJvcmRlciBjb2xvci5cblxuJGJ0bi1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1wYWRkaW5nLXkgIWRlZmF1bHQ7XG4kYnRuLXBhZGRpbmcteDogICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRidG4tZm9udC1mYW1pbHk6ICAgICAgICAgICAgICRpbnB1dC1idG4tZm9udC1mYW1pbHkgIWRlZmF1bHQ7XG4kYnRuLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAkaW5wdXQtYnRuLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRidG4tbGluZS1oZWlnaHQ6ICAgICAgICAgICAgICRpbnB1dC1idG4tbGluZS1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRidG4tcGFkZGluZy15LXNtOiAgICAgICAgICAgICRpbnB1dC1idG4tcGFkZGluZy15LXNtICFkZWZhdWx0O1xuJGJ0bi1wYWRkaW5nLXgtc206ICAgICAgICAgICAgJGlucHV0LWJ0bi1wYWRkaW5nLXgtc20gIWRlZmF1bHQ7XG4kYnRuLWZvbnQtc2l6ZS1zbTogICAgICAgICAgICAkaW5wdXQtYnRuLWZvbnQtc2l6ZS1zbSAhZGVmYXVsdDtcbiRidG4tbGluZS1oZWlnaHQtc206ICAgICAgICAgICRpbnB1dC1idG4tbGluZS1oZWlnaHQtc20gIWRlZmF1bHQ7XG5cbiRidG4tcGFkZGluZy15LWxnOiAgICAgICAgICAgICRpbnB1dC1idG4tcGFkZGluZy15LWxnICFkZWZhdWx0O1xuJGJ0bi1wYWRkaW5nLXgtbGc6ICAgICAgICAgICAgJGlucHV0LWJ0bi1wYWRkaW5nLXgtbGcgIWRlZmF1bHQ7XG4kYnRuLWZvbnQtc2l6ZS1sZzogICAgICAgICAgICAkaW5wdXQtYnRuLWZvbnQtc2l6ZS1sZyAhZGVmYXVsdDtcbiRidG4tbGluZS1oZWlnaHQtbGc6ICAgICAgICAgICRpbnB1dC1idG4tbGluZS1oZWlnaHQtbGcgIWRlZmF1bHQ7XG5cbiRidG4tYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICRpbnB1dC1idG4tYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuXG4kYnRuLWZvbnQtd2VpZ2h0OiAgICAgICAgICAgICAkZm9udC13ZWlnaHQtbm9ybWFsICFkZWZhdWx0O1xuJGJ0bi1ib3gtc2hhZG93OiAgICAgICAgICAgICAgaW5zZXQgMCAxcHggMCByZ2JhKCR3aGl0ZSwgLjE1KSwgMCAxcHggMXB4IHJnYmEoJGJsYWNrLCAuMDc1KSAhZGVmYXVsdDtcbiRidG4tZm9jdXMtd2lkdGg6ICAgICAgICAgICAgICRpbnB1dC1idG4tZm9jdXMtd2lkdGggIWRlZmF1bHQ7XG4kYnRuLWZvY3VzLWJveC1zaGFkb3c6ICAgICAgICAkaW5wdXQtYnRuLWZvY3VzLWJveC1zaGFkb3cgIWRlZmF1bHQ7XG4kYnRuLWRpc2FibGVkLW9wYWNpdHk6ICAgICAgICAuNjUgIWRlZmF1bHQ7XG4kYnRuLWFjdGl2ZS1ib3gtc2hhZG93OiAgICAgICBpbnNldCAwIDNweCA1cHggcmdiYSgkYmxhY2ssIC4xMjUpICFkZWZhdWx0O1xuXG4kYnRuLWxpbmstZGlzYWJsZWQtY29sb3I6ICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG5cbiRidG4tYmxvY2stc3BhY2luZy15OiAgICAgICAgIC41cmVtICFkZWZhdWx0O1xuXG4vLyBBbGxvd3MgZm9yIGN1c3RvbWl6aW5nIGJ1dHRvbiByYWRpdXMgaW5kZXBlbmRlbnRseSBmcm9tIGdsb2JhbCBib3JkZXIgcmFkaXVzXG4kYnRuLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRidG4tYm9yZGVyLXJhZGl1cy1sZzogICAgICAgICRib3JkZXItcmFkaXVzLWxnICFkZWZhdWx0O1xuJGJ0bi1ib3JkZXItcmFkaXVzLXNtOiAgICAgICAgJGJvcmRlci1yYWRpdXMtc20gIWRlZmF1bHQ7XG5cbiRidG4tdHJhbnNpdGlvbjogICAgICAgICAgICAgIGNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsIGJhY2tncm91bmQtY29sb3IgLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dCAhZGVmYXVsdDtcblxuXG4vLyBGb3Jtc1xuXG4kbGFiZWwtbWFyZ2luLWJvdHRvbTogICAgICAgICAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XG5cbiRpbnB1dC1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteSAhZGVmYXVsdDtcbiRpbnB1dC1wYWRkaW5nLXg6ICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteCAhZGVmYXVsdDtcbiRpbnB1dC1mb250LWZhbWlseTogICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLWZvbnQtZmFtaWx5ICFkZWZhdWx0O1xuJGlucHV0LWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC1idG4tZm9udC1zaXplICFkZWZhdWx0O1xuJGlucHV0LWZvbnQtd2VpZ2h0OiAgICAgICAgICAgICAgICAgICAgICRmb250LXdlaWdodC1iYXNlICFkZWZhdWx0O1xuJGlucHV0LWxpbmUtaGVpZ2h0OiAgICAgICAgICAgICAgICAgICAgICRpbnB1dC1idG4tbGluZS1oZWlnaHQgIWRlZmF1bHQ7XG5cbiRpbnB1dC1wYWRkaW5nLXktc206ICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteS1zbSAhZGVmYXVsdDtcbiRpbnB1dC1wYWRkaW5nLXgtc206ICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLXBhZGRpbmcteC1zbSAhZGVmYXVsdDtcbiRpbnB1dC1mb250LXNpemUtc206ICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLWZvbnQtc2l6ZS1zbSAhZGVmYXVsdDtcbiRpbnB1dC1saW5lLWhlaWdodC1zbTogICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLWxpbmUtaGVpZ2h0LXNtICFkZWZhdWx0O1xuXG4kaW5wdXQtcGFkZGluZy15LWxnOiAgICAgICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1wYWRkaW5nLXktbGcgIWRlZmF1bHQ7XG4kaW5wdXQtcGFkZGluZy14LWxnOiAgICAgICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1wYWRkaW5nLXgtbGcgIWRlZmF1bHQ7XG4kaW5wdXQtZm9udC1zaXplLWxnOiAgICAgICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1mb250LXNpemUtbGcgIWRlZmF1bHQ7XG4kaW5wdXQtbGluZS1oZWlnaHQtbGc6ICAgICAgICAgICAgICAgICAgJGlucHV0LWJ0bi1saW5lLWhlaWdodC1sZyAhZGVmYXVsdDtcblxuJGlucHV0LWJnOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRpbnB1dC1kaXNhYmxlZC1iZzogICAgICAgICAgICAgICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XG5cbiRpbnB1dC1jb2xvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAkZ3JheS03MDAgIWRlZmF1bHQ7XG4kaW5wdXQtYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgJGdyYXktNDAwICFkZWZhdWx0O1xuJGlucHV0LWJvcmRlci13aWR0aDogICAgICAgICAgICAgICAgICAgICRpbnB1dC1idG4tYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuJGlucHV0LWJveC1zaGFkb3c6ICAgICAgICAgICAgICAgICAgICAgIGluc2V0IDAgMXB4IDFweCByZ2JhKCRibGFjaywgLjA3NSkgIWRlZmF1bHQ7XG5cbiRpbnB1dC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRpbnB1dC1ib3JkZXItcmFkaXVzLWxnOiAgICAgICAgICAgICAgICAkYm9yZGVyLXJhZGl1cy1sZyAhZGVmYXVsdDtcbiRpbnB1dC1ib3JkZXItcmFkaXVzLXNtOiAgICAgICAgICAgICAgICAkYm9yZGVyLXJhZGl1cy1zbSAhZGVmYXVsdDtcblxuJGlucHV0LWZvY3VzLWJnOiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC1iZyAhZGVmYXVsdDtcbiRpbnB1dC1mb2N1cy1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICBsaWdodGVuKCRjb21wb25lbnQtYWN0aXZlLWJnLCAyNSUpICFkZWZhdWx0O1xuJGlucHV0LWZvY3VzLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICRpbnB1dC1jb2xvciAhZGVmYXVsdDtcbiRpbnB1dC1mb2N1cy13aWR0aDogICAgICAgICAgICAgICAgICAgICAkaW5wdXQtYnRuLWZvY3VzLXdpZHRoICFkZWZhdWx0O1xuJGlucHV0LWZvY3VzLWJveC1zaGFkb3c6ICAgICAgICAgICAgICAgICRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdyAhZGVmYXVsdDtcblxuJGlucHV0LXBsYWNlaG9sZGVyLWNvbG9yOiAgICAgICAgICAgICAgICRncmF5LTYwMCAhZGVmYXVsdDtcbiRpbnB1dC1wbGFpbnRleHQtY29sb3I6ICAgICAgICAgICAgICAgICAkYm9keS1jb2xvciAhZGVmYXVsdDtcblxuJGlucHV0LWhlaWdodC1ib3JkZXI6ICAgICAgICAgICAgICAgICAgICRpbnB1dC1ib3JkZXItd2lkdGggKiAyICFkZWZhdWx0O1xuXG4kaW5wdXQtaGVpZ2h0LWlubmVyOiAgICAgICAgICAgICAgICAgICAgY2FsYygjeyRpbnB1dC1saW5lLWhlaWdodCAqIDFlbX0gKyAjeyRpbnB1dC1wYWRkaW5nLXkgKiAyfSkgIWRlZmF1bHQ7XG4kaW5wdXQtaGVpZ2h0LWlubmVyLWhhbGY6ICAgICAgICAgICAgICAgY2FsYygjeyRpbnB1dC1saW5lLWhlaWdodCAqIC41ZW19ICsgI3skaW5wdXQtcGFkZGluZy15fSkgIWRlZmF1bHQ7XG4kaW5wdXQtaGVpZ2h0LWlubmVyLXF1YXJ0ZXI6ICAgICAgICAgICAgY2FsYygjeyRpbnB1dC1saW5lLWhlaWdodCAqIC4yNWVtfSArICN7JGlucHV0LXBhZGRpbmcteSAvIDJ9KSAhZGVmYXVsdDtcblxuJGlucHV0LWhlaWdodDogICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGMoI3skaW5wdXQtbGluZS1oZWlnaHQgKiAxZW19ICsgI3skaW5wdXQtcGFkZGluZy15ICogMn0gKyAjeyRpbnB1dC1oZWlnaHQtYm9yZGVyfSkgIWRlZmF1bHQ7XG4kaW5wdXQtaGVpZ2h0LXNtOiAgICAgICAgICAgICAgICAgICAgICAgY2FsYygjeyRpbnB1dC1saW5lLWhlaWdodC1zbSAqIDFlbX0gKyAjeyRpbnB1dC1idG4tcGFkZGluZy15LXNtICogMn0gKyAjeyRpbnB1dC1oZWlnaHQtYm9yZGVyfSkgIWRlZmF1bHQ7XG4kaW5wdXQtaGVpZ2h0LWxnOiAgICAgICAgICAgICAgICAgICAgICAgY2FsYygjeyRpbnB1dC1saW5lLWhlaWdodC1sZyAqIDFlbX0gKyAjeyRpbnB1dC1idG4tcGFkZGluZy15LWxnICogMn0gKyAjeyRpbnB1dC1oZWlnaHQtYm9yZGVyfSkgIWRlZmF1bHQ7XG5cbiRpbnB1dC10cmFuc2l0aW9uOiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3IgLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0ICFkZWZhdWx0O1xuXG4kZm9ybS10ZXh0LW1hcmdpbi10b3A6ICAgICAgICAgICAgICAgICAgLjI1cmVtICFkZWZhdWx0O1xuXG4kZm9ybS1jaGVjay1pbnB1dC1ndXR0ZXI6ICAgICAgICAgICAgICAgMS4yNXJlbSAhZGVmYXVsdDtcbiRmb3JtLWNoZWNrLWlucHV0LW1hcmdpbi15OiAgICAgICAgICAgICAuM3JlbSAhZGVmYXVsdDtcbiRmb3JtLWNoZWNrLWlucHV0LW1hcmdpbi14OiAgICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XG5cbiRmb3JtLWNoZWNrLWlubGluZS1tYXJnaW4teDogICAgICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XG4kZm9ybS1jaGVjay1pbmxpbmUtaW5wdXQtbWFyZ2luLXg6ICAgICAgLjMxMjVyZW0gIWRlZmF1bHQ7XG5cbiRmb3JtLWdyaWQtZ3V0dGVyLXdpZHRoOiAgICAgICAgICAgICAgICAxMHB4ICFkZWZhdWx0O1xuJGZvcm0tZ3JvdXAtbWFyZ2luLWJvdHRvbTogICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XG5cbiRpbnB1dC1ncm91cC1hZGRvbi1jb2xvcjogICAgICAgICAgICAgICAkaW5wdXQtY29sb3IgIWRlZmF1bHQ7XG4kaW5wdXQtZ3JvdXAtYWRkb24tYmc6ICAgICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xuJGlucHV0LWdyb3VwLWFkZG9uLWJvcmRlci1jb2xvcjogICAgICAgICRpbnB1dC1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG5cbiRjdXN0b20tZm9ybXMtdHJhbnNpdGlvbjogICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IC4xNXMgZWFzZS1pbi1vdXQgIWRlZmF1bHQ7XG5cbiRjdXN0b20tY29udHJvbC1ndXR0ZXI6ICAgICAgICAgICAgICAgICAuNXJlbSAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1zcGFjZXIteDogICAgICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuXG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLXNpemU6ICAgICAgICAgMXJlbSAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYmc6ICAgICAgICAgICAkaW5wdXQtYmcgIWRlZmF1bHQ7XG5cbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYmctc2l6ZTogICAgICA1MCUgNTAlICFkZWZhdWx0O1xuJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1ib3gtc2hhZG93OiAgICRpbnB1dC1ib3gtc2hhZG93ICFkZWZhdWx0O1xuJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1ib3JkZXItY29sb3I6ICRncmF5LTUwMCAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYm9yZGVyLXdpZHRoOiAkaW5wdXQtYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuXG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWRpc2FibGVkLWJnOiAgICAgICAgICAkaW5wdXQtZGlzYWJsZWQtYmcgIWRlZmF1bHQ7XG4kY3VzdG9tLWNvbnRyb2wtbGFiZWwtZGlzYWJsZWQtY29sb3I6ICAgICAgICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG5cbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1jb2xvcjogICAgICAgICRjb21wb25lbnQtYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xuJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1jaGVja2VkLWJnOiAgICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtYmcgIWRlZmF1bHQ7XG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtZGlzYWJsZWQtYmc6ICByZ2JhKHRoZW1lLWNvbG9yKFwicHJpbWFyeVwiKSwgLjUpICFkZWZhdWx0O1xuJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1jaGVja2VkLWJveC1zaGFkb3c6ICAgbm9uZSAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1ib3JkZXItY29sb3I6ICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1iZyAhZGVmYXVsdDtcblxuJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1mb2N1cy1ib3gtc2hhZG93OiAgICAgJGlucHV0LWZvY3VzLWJveC1zaGFkb3cgIWRlZmF1bHQ7XG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWZvY3VzLWJvcmRlci1jb2xvcjogICAkaW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWFjdGl2ZS1jb2xvcjogICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1jb2xvciAhZGVmYXVsdDtcbiRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYWN0aXZlLWJnOiAgICAgICAgICAgIGxpZ2h0ZW4oJGNvbXBvbmVudC1hY3RpdmUtYmcsIDM1JSkgIWRlZmF1bHQ7XG4kY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWFjdGl2ZS1ib3gtc2hhZG93OiAgICBub25lICFkZWZhdWx0O1xuJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1hY3RpdmUtYm9yZGVyLWNvbG9yOiAgJGN1c3RvbS1jb250cm9sLWluZGljYXRvci1hY3RpdmUtYmcgIWRlZmF1bHQ7XG5cbiRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWJvcmRlci1yYWRpdXM6ICAgICAgICRib3JkZXItcmFkaXVzICFkZWZhdWx0O1xuJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaWNvbi1jaGVja2VkOiAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBmaWxsPScjeyRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItY2hlY2tlZC1jb2xvcn0nIGQ9J002LjU2NC43NWwtMy41OSAzLjYxMi0xLjUzOC0xLjU1TDAgNC4yNiAyLjk3NCA3LjI1IDggMi4xOTN6Jy8lM2UlM2Mvc3ZnJTNlXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7XG5cbiRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWluZGV0ZXJtaW5hdGUtYmc6ICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcbiRjdXN0b20tY2hlY2tib3gtaW5kaWNhdG9yLWluZGV0ZXJtaW5hdGUtY29sb3I6ICAgICAgICAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtY29sb3IgIWRlZmF1bHQ7XG4kY3VzdG9tLWNoZWNrYm94LWluZGljYXRvci1pY29uLWluZGV0ZXJtaW5hdGU6ICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0IDQnJTNlJTNjcGF0aCBzdHJva2U9JyN7JGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaW5kZXRlcm1pbmF0ZS1jb2xvcn0nIGQ9J00wIDJoNCcvJTNlJTNjL3N2ZyUzZVwiKSwgXCIjXCIsIFwiJTIzXCIpICFkZWZhdWx0O1xuJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaW5kZXRlcm1pbmF0ZS1ib3gtc2hhZG93OiAgIG5vbmUgIWRlZmF1bHQ7XG4kY3VzdG9tLWNoZWNrYm94LWluZGljYXRvci1pbmRldGVybWluYXRlLWJvcmRlci1jb2xvcjogJGN1c3RvbS1jaGVja2JveC1pbmRpY2F0b3ItaW5kZXRlcm1pbmF0ZS1iZyAhZGVmYXVsdDtcblxuJGN1c3RvbS1yYWRpby1pbmRpY2F0b3ItYm9yZGVyLXJhZGl1czogICAgICAgICAgNTAlICFkZWZhdWx0O1xuJGN1c3RvbS1yYWRpby1pbmRpY2F0b3ItaWNvbi1jaGVja2VkOiAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9Jy00IC00IDggOCclM2UlM2NjaXJjbGUgcj0nMycgZmlsbD0nI3skY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLWNoZWNrZWQtY29sb3J9Jy8lM2UlM2Mvc3ZnJTNlXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7XG5cbiRjdXN0b20tc3dpdGNoLXdpZHRoOiAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdXN0b20tY29udHJvbC1pbmRpY2F0b3Itc2l6ZSAqIDEuNzUgIWRlZmF1bHQ7XG4kY3VzdG9tLXN3aXRjaC1pbmRpY2F0b3ItYm9yZGVyLXJhZGl1czogICAgICAgICAkY3VzdG9tLWNvbnRyb2wtaW5kaWNhdG9yLXNpemUgLyAyICFkZWZhdWx0O1xuJGN1c3RvbS1zd2l0Y2gtaW5kaWNhdG9yLXNpemU6ICAgICAgICAgICAgICAgICAgY2FsYygjeyRjdXN0b20tY29udHJvbC1pbmRpY2F0b3Itc2l6ZX0gLSAjeyRjdXN0b20tY29udHJvbC1pbmRpY2F0b3ItYm9yZGVyLXdpZHRoICogNH0pICFkZWZhdWx0O1xuXG4kY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXk6ICAgICAgICAgICAkaW5wdXQtcGFkZGluZy15ICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtcGFkZGluZy14OiAgICAgICAgICAgJGlucHV0LXBhZGRpbmcteCAhZGVmYXVsdDtcbiRjdXN0b20tc2VsZWN0LWZvbnQtZmFtaWx5OiAgICAgICAgICRpbnB1dC1mb250LWZhbWlseSAhZGVmYXVsdDtcbiRjdXN0b20tc2VsZWN0LWZvbnQtc2l6ZTogICAgICAgICAgICRpbnB1dC1mb250LXNpemUgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1oZWlnaHQ6ICAgICAgICAgICAgICAkaW5wdXQtaGVpZ2h0ICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yLXBhZGRpbmc6ICAgMXJlbSAhZGVmYXVsdDsgLy8gRXh0cmEgcGFkZGluZyB0byBhY2NvdW50IGZvciB0aGUgcHJlc2VuY2Ugb2YgdGhlIGJhY2tncm91bmQtaW1hZ2UgYmFzZWQgaW5kaWNhdG9yXG4kY3VzdG9tLXNlbGVjdC1mb250LXdlaWdodDogICAgICAgICAkaW5wdXQtZm9udC13ZWlnaHQgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1saW5lLWhlaWdodDogICAgICAgICAkaW5wdXQtbGluZS1oZWlnaHQgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1jb2xvcjogICAgICAgICAgICAgICAkaW5wdXQtY29sb3IgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1kaXNhYmxlZC1jb2xvcjogICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1iZzogICAgICAgICAgICAgICAgICAkaW5wdXQtYmcgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1kaXNhYmxlZC1iZzogICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1iZy1zaXplOiAgICAgICAgICAgICA4cHggMTBweCAhZGVmYXVsdDsgLy8gSW4gcGl4ZWxzIGJlY2F1c2UgaW1hZ2UgZGltZW5zaW9uc1xuJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yLWNvbG9yOiAgICAgJGdyYXktODAwICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yOiAgICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0IDUnJTNlJTNjcGF0aCBmaWxsPScjeyRjdXN0b20tc2VsZWN0LWluZGljYXRvci1jb2xvcn0nIGQ9J00yIDBMMCAyaDR6bTAgNUwwIDNoNHonLyUzZSUzYy9zdmclM2VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDtcbiRjdXN0b20tc2VsZWN0LWJhY2tncm91bmQ6ICAgICAgICAgICRjdXN0b20tc2VsZWN0LWluZGljYXRvciBuby1yZXBlYXQgcmlnaHQgJGN1c3RvbS1zZWxlY3QtcGFkZGluZy14IGNlbnRlciAvICRjdXN0b20tc2VsZWN0LWJnLXNpemUgIWRlZmF1bHQ7IC8vIFVzZWQgc28gd2UgY2FuIGhhdmUgbXVsdGlwbGUgYmFja2dyb3VuZCBlbGVtZW50cyAoZS5nLiwgYXJyb3cgYW5kIGZlZWRiYWNrIGljb24pXG5cbiRjdXN0b20tc2VsZWN0LWZlZWRiYWNrLWljb24tcGFkZGluZy1yaWdodDogY2FsYygoMWVtICsgI3syICogJGN1c3RvbS1zZWxlY3QtcGFkZGluZy15fSkgKiAzIC8gNCArICN7JGN1c3RvbS1zZWxlY3QtcGFkZGluZy14ICsgJGN1c3RvbS1zZWxlY3QtaW5kaWNhdG9yLXBhZGRpbmd9KSAhZGVmYXVsdDtcbiRjdXN0b20tc2VsZWN0LWZlZWRiYWNrLWljb24tcG9zaXRpb246ICAgICAgY2VudGVyIHJpZ2h0ICgkY3VzdG9tLXNlbGVjdC1wYWRkaW5nLXggKyAkY3VzdG9tLXNlbGVjdC1pbmRpY2F0b3ItcGFkZGluZykgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1mZWVkYmFjay1pY29uLXNpemU6ICAgICAgICAgICRpbnB1dC1oZWlnaHQtaW5uZXItaGFsZiAkaW5wdXQtaGVpZ2h0LWlubmVyLWhhbGYgIWRlZmF1bHQ7XG5cbiRjdXN0b20tc2VsZWN0LWJvcmRlci13aWR0aDogICAgICAgICRpbnB1dC1ib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1ib3JkZXItY29sb3I6ICAgICAgICAkaW5wdXQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtYm9yZGVyLXJhZGl1czogICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1ib3gtc2hhZG93OiAgICAgICAgICBpbnNldCAwIDFweCAycHggcmdiYSgkYmxhY2ssIC4wNzUpICFkZWZhdWx0O1xuXG4kY3VzdG9tLXNlbGVjdC1mb2N1cy1ib3JkZXItY29sb3I6ICAkaW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtZm9jdXMtd2lkdGg6ICAgICAgICAgJGlucHV0LWZvY3VzLXdpZHRoICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtZm9jdXMtYm94LXNoYWRvdzogICAgMCAwIDAgJGN1c3RvbS1zZWxlY3QtZm9jdXMtd2lkdGggJGlucHV0LWJ0bi1mb2N1cy1jb2xvciAhZGVmYXVsdDtcblxuJGN1c3RvbS1zZWxlY3QtcGFkZGluZy15LXNtOiAgICAgICAgJGlucHV0LXBhZGRpbmcteS1zbSAhZGVmYXVsdDtcbiRjdXN0b20tc2VsZWN0LXBhZGRpbmcteC1zbTogICAgICAgICRpbnB1dC1wYWRkaW5nLXgtc20gIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1mb250LXNpemUtc206ICAgICAgICAkaW5wdXQtZm9udC1zaXplLXNtICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtaGVpZ2h0LXNtOiAgICAgICAgICAgJGlucHV0LWhlaWdodC1zbSAhZGVmYXVsdDtcblxuJGN1c3RvbS1zZWxlY3QtcGFkZGluZy15LWxnOiAgICAgICAgJGlucHV0LXBhZGRpbmcteS1sZyAhZGVmYXVsdDtcbiRjdXN0b20tc2VsZWN0LXBhZGRpbmcteC1sZzogICAgICAgICRpbnB1dC1wYWRkaW5nLXgtbGcgIWRlZmF1bHQ7XG4kY3VzdG9tLXNlbGVjdC1mb250LXNpemUtbGc6ICAgICAgICAkaW5wdXQtZm9udC1zaXplLWxnICFkZWZhdWx0O1xuJGN1c3RvbS1zZWxlY3QtaGVpZ2h0LWxnOiAgICAgICAgICAgJGlucHV0LWhlaWdodC1sZyAhZGVmYXVsdDtcblxuJGN1c3RvbS1yYW5nZS10cmFjay13aWR0aDogICAgICAgICAgMTAwJSAhZGVmYXVsdDtcbiRjdXN0b20tcmFuZ2UtdHJhY2staGVpZ2h0OiAgICAgICAgIC41cmVtICFkZWZhdWx0O1xuJGN1c3RvbS1yYW5nZS10cmFjay1jdXJzb3I6ICAgICAgICAgcG9pbnRlciAhZGVmYXVsdDtcbiRjdXN0b20tcmFuZ2UtdHJhY2stYmc6ICAgICAgICAgICAgICRncmF5LTMwMCAhZGVmYXVsdDtcbiRjdXN0b20tcmFuZ2UtdHJhY2stYm9yZGVyLXJhZGl1czogIDFyZW0gIWRlZmF1bHQ7XG4kY3VzdG9tLXJhbmdlLXRyYWNrLWJveC1zaGFkb3c6ICAgICBpbnNldCAwIC4yNXJlbSAuMjVyZW0gcmdiYSgkYmxhY2ssIC4xKSAhZGVmYXVsdDtcblxuJGN1c3RvbS1yYW5nZS10aHVtYi13aWR0aDogICAgICAgICAgICAgICAgICAgMXJlbSAhZGVmYXVsdDtcbiRjdXN0b20tcmFuZ2UtdGh1bWItaGVpZ2h0OiAgICAgICAgICAgICAgICAgICRjdXN0b20tcmFuZ2UtdGh1bWItd2lkdGggIWRlZmF1bHQ7XG4kY3VzdG9tLXJhbmdlLXRodW1iLWJnOiAgICAgICAgICAgICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcbiRjdXN0b20tcmFuZ2UtdGh1bWItYm9yZGVyOiAgICAgICAgICAgICAgICAgIDAgIWRlZmF1bHQ7XG4kY3VzdG9tLXJhbmdlLXRodW1iLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuJGN1c3RvbS1yYW5nZS10aHVtYi1ib3gtc2hhZG93OiAgICAgICAgICAgICAgMCAuMXJlbSAuMjVyZW0gcmdiYSgkYmxhY2ssIC4xKSAhZGVmYXVsdDtcbiRjdXN0b20tcmFuZ2UtdGh1bWItZm9jdXMtYm94LXNoYWRvdzogICAgICAgIDAgMCAwIDFweCAkYm9keS1iZywgJGlucHV0LWZvY3VzLWJveC1zaGFkb3cgIWRlZmF1bHQ7XG4kY3VzdG9tLXJhbmdlLXRodW1iLWZvY3VzLWJveC1zaGFkb3ctd2lkdGg6ICAkaW5wdXQtZm9jdXMtd2lkdGggIWRlZmF1bHQ7IC8vIEZvciBmb2N1cyBib3ggc2hhZG93IGlzc3VlIGluIElFL0VkZ2VcbiRjdXN0b20tcmFuZ2UtdGh1bWItYWN0aXZlLWJnOiAgICAgICAgICAgICAgIGxpZ2h0ZW4oJGNvbXBvbmVudC1hY3RpdmUtYmcsIDM1JSkgIWRlZmF1bHQ7XG4kY3VzdG9tLXJhbmdlLXRodW1iLWRpc2FibGVkLWJnOiAgICAgICAgICAgICAkZ3JheS01MDAgIWRlZmF1bHQ7XG5cbiRjdXN0b20tZmlsZS1oZWlnaHQ6ICAgICAgICAgICAgICAgICRpbnB1dC1oZWlnaHQgIWRlZmF1bHQ7XG4kY3VzdG9tLWZpbGUtaGVpZ2h0LWlubmVyOiAgICAgICAgICAkaW5wdXQtaGVpZ2h0LWlubmVyICFkZWZhdWx0O1xuJGN1c3RvbS1maWxlLWZvY3VzLWJvcmRlci1jb2xvcjogICAgJGlucHV0LWZvY3VzLWJvcmRlci1jb2xvciAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1mb2N1cy1ib3gtc2hhZG93OiAgICAgICRpbnB1dC1mb2N1cy1ib3gtc2hhZG93ICFkZWZhdWx0O1xuJGN1c3RvbS1maWxlLWRpc2FibGVkLWJnOiAgICAgICAgICAgJGlucHV0LWRpc2FibGVkLWJnICFkZWZhdWx0O1xuXG4kY3VzdG9tLWZpbGUtcGFkZGluZy15OiAgICAgICAgICAgICAkaW5wdXQtcGFkZGluZy15ICFkZWZhdWx0O1xuJGN1c3RvbS1maWxlLXBhZGRpbmcteDogICAgICAgICAgICAgJGlucHV0LXBhZGRpbmcteCAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1saW5lLWhlaWdodDogICAgICAgICAgICRpbnB1dC1saW5lLWhlaWdodCAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1mb250LWZhbWlseTogICAgICAgICAgICRpbnB1dC1mb250LWZhbWlseSAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1mb250LXdlaWdodDogICAgICAgICAgICRpbnB1dC1mb250LXdlaWdodCAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1jb2xvcjogICAgICAgICAgICAgICAgICRpbnB1dC1jb2xvciAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1iZzogICAgICAgICAgICAgICAgICAgICRpbnB1dC1iZyAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1ib3JkZXItd2lkdGg6ICAgICAgICAgICRpbnB1dC1ib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kY3VzdG9tLWZpbGUtYm9yZGVyLWNvbG9yOiAgICAgICAgICAkaW5wdXQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJGN1c3RvbS1maWxlLWJvcmRlci1yYWRpdXM6ICAgICAgICAgJGlucHV0LWJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG4kY3VzdG9tLWZpbGUtYm94LXNoYWRvdzogICAgICAgICAgICAkaW5wdXQtYm94LXNoYWRvdyAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1idXR0b24tY29sb3I6ICAgICAgICAgICRjdXN0b20tZmlsZS1jb2xvciAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS1idXR0b24tYmc6ICAgICAgICAgICAgICRpbnB1dC1ncm91cC1hZGRvbi1iZyAhZGVmYXVsdDtcbiRjdXN0b20tZmlsZS10ZXh0OiAoXG4gIGVuOiBcIkJyb3dzZVwiXG4pICFkZWZhdWx0O1xuXG5cbi8vIEZvcm0gdmFsaWRhdGlvblxuXG4kZm9ybS1mZWVkYmFjay1tYXJnaW4tdG9wOiAgICAgICAgICAkZm9ybS10ZXh0LW1hcmdpbi10b3AgIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay1mb250LXNpemU6ICAgICAgICAgICAkc21hbGwtZm9udC1zaXplICFkZWZhdWx0O1xuJGZvcm0tZmVlZGJhY2stdmFsaWQtY29sb3I6ICAgICAgICAgdGhlbWUtY29sb3IoXCJzdWNjZXNzXCIpICFkZWZhdWx0O1xuJGZvcm0tZmVlZGJhY2staW52YWxpZC1jb2xvcjogICAgICAgdGhlbWUtY29sb3IoXCJkYW5nZXJcIikgIWRlZmF1bHQ7XG5cbiRmb3JtLWZlZWRiYWNrLWljb24tdmFsaWQtY29sb3I6ICAgICRmb3JtLWZlZWRiYWNrLXZhbGlkLWNvbG9yICFkZWZhdWx0O1xuJGZvcm0tZmVlZGJhY2staWNvbi12YWxpZDogICAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBmaWxsPScjeyRmb3JtLWZlZWRiYWNrLWljb24tdmFsaWQtY29sb3J9JyBkPSdNMi4zIDYuNzNMLjYgNC41M2MtLjQtMS4wNC40Ni0xLjQgMS4xLS44bDEuMSAxLjQgMy40LTMuOGMuNi0uNjMgMS42LS4yNyAxLjIuN2wtNCA0LjZjLS40My41LS44LjQtMS4xLjF6Jy8lM2UlM2Mvc3ZnJTNlXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay1pY29uLWludmFsaWQtY29sb3I6ICAkZm9ybS1mZWVkYmFjay1pbnZhbGlkLWNvbG9yICFkZWZhdWx0O1xuJGZvcm0tZmVlZGJhY2staWNvbi1pbnZhbGlkOiAgICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGZpbGw9JyN7JGZvcm0tZmVlZGJhY2staWNvbi1pbnZhbGlkLWNvbG9yfScgdmlld0JveD0nLTIgLTIgNyA3JyUzZSUzY3BhdGggc3Ryb2tlPScjeyRmb3JtLWZlZWRiYWNrLWljb24taW52YWxpZC1jb2xvcn0nIGQ9J00wIDBsMyAzbTAtM0wwIDMnLyUzZSUzY2NpcmNsZSByPScuNScvJTNlJTNjY2lyY2xlIGN4PSczJyByPScuNScvJTNlJTNjY2lyY2xlIGN5PSczJyByPScuNScvJTNlJTNjY2lyY2xlIGN4PSczJyBjeT0nMycgcj0nLjUnLyUzZSUzYy9zdmclM0VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDtcblxuJGZvcm0tdmFsaWRhdGlvbi1zdGF0ZXM6ICgpICFkZWZhdWx0O1xuLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNjc3MvZG9sbGFyLXZhcmlhYmxlLWRlZmF1bHRcbiRmb3JtLXZhbGlkYXRpb24tc3RhdGVzOiBtYXAtbWVyZ2UoXG4gIChcbiAgICBcInZhbGlkXCI6IChcbiAgICAgIFwiY29sb3JcIjogJGZvcm0tZmVlZGJhY2stdmFsaWQtY29sb3IsXG4gICAgICBcImljb25cIjogJGZvcm0tZmVlZGJhY2staWNvbi12YWxpZFxuICAgICksXG4gICAgXCJpbnZhbGlkXCI6IChcbiAgICAgIFwiY29sb3JcIjogJGZvcm0tZmVlZGJhY2staW52YWxpZC1jb2xvcixcbiAgICAgIFwiaWNvblwiOiAkZm9ybS1mZWVkYmFjay1pY29uLWludmFsaWRcbiAgICApLFxuICApLFxuICAkZm9ybS12YWxpZGF0aW9uLXN0YXRlc1xuKTtcblxuLy8gWi1pbmRleCBtYXN0ZXIgbGlzdFxuLy9cbi8vIFdhcm5pbmc6IEF2b2lkIGN1c3RvbWl6aW5nIHRoZXNlIHZhbHVlcy4gVGhleSdyZSB1c2VkIGZvciBhIGJpcmQncyBleWUgdmlld1xuLy8gb2YgY29tcG9uZW50cyBkZXBlbmRlbnQgb24gdGhlIHotYXhpcyBhbmQgYXJlIGRlc2lnbmVkIHRvIGFsbCB3b3JrIHRvZ2V0aGVyLlxuXG4kemluZGV4LWRyb3Bkb3duOiAgICAgICAgICAgICAgICAgICAxMDAwICFkZWZhdWx0O1xuJHppbmRleC1zdGlja3k6ICAgICAgICAgICAgICAgICAgICAgMTAyMCAhZGVmYXVsdDtcbiR6aW5kZXgtZml4ZWQ6ICAgICAgICAgICAgICAgICAgICAgIDEwMzAgIWRlZmF1bHQ7XG4kemluZGV4LW1vZGFsLWJhY2tkcm9wOiAgICAgICAgICAgICAxMDQwICFkZWZhdWx0O1xuJHppbmRleC1tb2RhbDogICAgICAgICAgICAgICAgICAgICAgMTA1MCAhZGVmYXVsdDtcbiR6aW5kZXgtcG9wb3ZlcjogICAgICAgICAgICAgICAgICAgIDEwNjAgIWRlZmF1bHQ7XG4kemluZGV4LXRvb2x0aXA6ICAgICAgICAgICAgICAgICAgICAxMDcwICFkZWZhdWx0O1xuXG5cbi8vIE5hdnNcblxuJG5hdi1saW5rLXBhZGRpbmcteTogICAgICAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XG4kbmF2LWxpbmstcGFkZGluZy14OiAgICAgICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuJG5hdi1saW5rLWRpc2FibGVkLWNvbG9yOiAgICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xuXG4kbmF2LXRhYnMtYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICAkZ3JheS0zMDAgIWRlZmF1bHQ7XG4kbmF2LXRhYnMtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuJG5hdi10YWJzLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG4kbmF2LXRhYnMtbGluay1ob3Zlci1ib3JkZXItY29sb3I6ICAkZ3JheS0yMDAgJGdyYXktMjAwICRuYXYtdGFicy1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kbmF2LXRhYnMtbGluay1hY3RpdmUtY29sb3I6ICAgICAgICAkZ3JheS03MDAgIWRlZmF1bHQ7XG4kbmF2LXRhYnMtbGluay1hY3RpdmUtYmc6ICAgICAgICAgICAkYm9keS1iZyAhZGVmYXVsdDtcbiRuYXYtdGFicy1saW5rLWFjdGl2ZS1ib3JkZXItY29sb3I6ICRncmF5LTMwMCAkZ3JheS0zMDAgJG5hdi10YWJzLWxpbmstYWN0aXZlLWJnICFkZWZhdWx0O1xuXG4kbmF2LXBpbGxzLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRuYXYtcGlsbHMtbGluay1hY3RpdmUtY29sb3I6ICAgICAgICRjb21wb25lbnQtYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xuJG5hdi1waWxscy1saW5rLWFjdGl2ZS1iZzogICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtYmcgIWRlZmF1bHQ7XG5cbiRuYXYtZGl2aWRlci1jb2xvcjogICAgICAgICAgICAgICAgICRncmF5LTIwMCAhZGVmYXVsdDtcbiRuYXYtZGl2aWRlci1tYXJnaW4teTogICAgICAgICAgICAgICRzcGFjZXIgLyAyICFkZWZhdWx0O1xuXG5cbi8vIE5hdmJhclxuXG4kbmF2YmFyLXBhZGRpbmcteTogICAgICAgICAgICAgICAgICAkc3BhY2VyIC8gMiAhZGVmYXVsdDtcbiRuYXZiYXItcGFkZGluZy14OiAgICAgICAgICAgICAgICAgICRzcGFjZXIgIWRlZmF1bHQ7XG5cbiRuYXZiYXItbmF2LWxpbmstcGFkZGluZy14OiAgICAgICAgIC41cmVtICFkZWZhdWx0O1xuXG4kbmF2YmFyLWJyYW5kLWZvbnQtc2l6ZTogICAgICAgICAgICAkZm9udC1zaXplLWxnICFkZWZhdWx0O1xuLy8gQ29tcHV0ZSB0aGUgbmF2YmFyLWJyYW5kIHBhZGRpbmcteSBzbyB0aGUgbmF2YmFyLWJyYW5kIHdpbGwgaGF2ZSB0aGUgc2FtZSBoZWlnaHQgYXMgbmF2YmFyLXRleHQgYW5kIG5hdi1saW5rXG4kbmF2LWxpbmstaGVpZ2h0OiAgICAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAkbGluZS1oZWlnaHQtYmFzZSArICRuYXYtbGluay1wYWRkaW5nLXkgKiAyICFkZWZhdWx0O1xuJG5hdmJhci1icmFuZC1oZWlnaHQ6ICAgICAgICAgICAgICAgJG5hdmJhci1icmFuZC1mb250LXNpemUgKiAkbGluZS1oZWlnaHQtYmFzZSAhZGVmYXVsdDtcbiRuYXZiYXItYnJhbmQtcGFkZGluZy15OiAgICAgICAgICAgICgkbmF2LWxpbmstaGVpZ2h0IC0gJG5hdmJhci1icmFuZC1oZWlnaHQpIC8gMiAhZGVmYXVsdDtcblxuJG5hdmJhci10b2dnbGVyLXBhZGRpbmcteTogICAgICAgICAgLjI1cmVtICFkZWZhdWx0O1xuJG5hdmJhci10b2dnbGVyLXBhZGRpbmcteDogICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xuJG5hdmJhci10b2dnbGVyLWZvbnQtc2l6ZTogICAgICAgICAgJGZvbnQtc2l6ZS1sZyAhZGVmYXVsdDtcbiRuYXZiYXItdG9nZ2xlci1ib3JkZXItcmFkaXVzOiAgICAgICRidG4tYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcblxuJG5hdmJhci1kYXJrLWNvbG9yOiAgICAgICAgICAgICAgICAgcmdiYSgkd2hpdGUsIC41KSAhZGVmYXVsdDtcbiRuYXZiYXItZGFyay1ob3Zlci1jb2xvcjogICAgICAgICAgIHJnYmEoJHdoaXRlLCAuNzUpICFkZWZhdWx0O1xuJG5hdmJhci1kYXJrLWFjdGl2ZS1jb2xvcjogICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJG5hdmJhci1kYXJrLWRpc2FibGVkLWNvbG9yOiAgICAgICAgcmdiYSgkd2hpdGUsIC4yNSkgIWRlZmF1bHQ7XG4kbmF2YmFyLWRhcmstdG9nZ2xlci1pY29uLWJnOiAgICAgICBzdHItcmVwbGFjZSh1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHZpZXdCb3g9JzAgMCAzMCAzMCcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzZSUzY3BhdGggc3Ryb2tlPScjeyRuYXZiYXItZGFyay1jb2xvcn0nIHN0cm9rZS13aWR0aD0nMicgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbWl0ZXJsaW1pdD0nMTAnIGQ9J000IDdoMjJNNCAxNWgyMk00IDIzaDIyJy8lM2UlM2Mvc3ZnJTNlXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7XG4kbmF2YmFyLWRhcmstdG9nZ2xlci1ib3JkZXItY29sb3I6ICByZ2JhKCR3aGl0ZSwgLjEpICFkZWZhdWx0O1xuXG4kbmF2YmFyLWxpZ2h0LWNvbG9yOiAgICAgICAgICAgICAgICByZ2JhKCRibGFjaywgLjUpICFkZWZhdWx0O1xuJG5hdmJhci1saWdodC1ob3Zlci1jb2xvcjogICAgICAgICAgcmdiYSgkYmxhY2ssIC43KSAhZGVmYXVsdDtcbiRuYXZiYXItbGlnaHQtYWN0aXZlLWNvbG9yOiAgICAgICAgIHJnYmEoJGJsYWNrLCAuOSkgIWRlZmF1bHQ7XG4kbmF2YmFyLWxpZ2h0LWRpc2FibGVkLWNvbG9yOiAgICAgICByZ2JhKCRibGFjaywgLjMpICFkZWZhdWx0O1xuJG5hdmJhci1saWdodC10b2dnbGVyLWljb24tYmc6ICAgICAgc3RyLXJlcGxhY2UodXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB2aWV3Qm94PScwIDAgMzAgMzAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM2UlM2NwYXRoIHN0cm9rZT0nI3skbmF2YmFyLWxpZ2h0LWNvbG9yfScgc3Ryb2tlLXdpZHRoPScyJyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1taXRlcmxpbWl0PScxMCcgZD0nTTQgN2gyMk00IDE1aDIyTTQgMjNoMjInLyUzZSUzYy9zdmclM2VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDtcbiRuYXZiYXItbGlnaHQtdG9nZ2xlci1ib3JkZXItY29sb3I6IHJnYmEoJGJsYWNrLCAuMSkgIWRlZmF1bHQ7XG5cbiRuYXZiYXItbGlnaHQtYnJhbmQtY29sb3I6ICAgICAgICAgICAgICAgICRuYXZiYXItbGlnaHQtYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xuJG5hdmJhci1saWdodC1icmFuZC1ob3Zlci1jb2xvcjogICAgICAgICAgJG5hdmJhci1saWdodC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XG4kbmF2YmFyLWRhcmstYnJhbmQtY29sb3I6ICAgICAgICAgICAgICAgICAkbmF2YmFyLWRhcmstYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xuJG5hdmJhci1kYXJrLWJyYW5kLWhvdmVyLWNvbG9yOiAgICAgICAgICAgJG5hdmJhci1kYXJrLWFjdGl2ZS1jb2xvciAhZGVmYXVsdDtcblxuXG4vLyBEcm9wZG93bnNcbi8vXG4vLyBEcm9wZG93biBtZW51IGNvbnRhaW5lciBhbmQgY29udGVudHMuXG5cbiRkcm9wZG93bi1taW4td2lkdGg6ICAgICAgICAgICAgICAgIDEwcmVtICFkZWZhdWx0O1xuJGRyb3Bkb3duLXBhZGRpbmcteTogICAgICAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XG4kZHJvcGRvd24tc3BhY2VyOiAgICAgICAgICAgICAgICAgICAuMTI1cmVtICFkZWZhdWx0O1xuJGRyb3Bkb3duLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1iYXNlICFkZWZhdWx0O1xuJGRyb3Bkb3duLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgJGJvZHktY29sb3IgIWRlZmF1bHQ7XG4kZHJvcGRvd24tYmc6ICAgICAgICAgICAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kZHJvcGRvd24tYm9yZGVyLWNvbG9yOiAgICAgICAgICAgICByZ2JhKCRibGFjaywgLjE1KSAhZGVmYXVsdDtcbiRkcm9wZG93bi1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICRib3JkZXItcmFkaXVzICFkZWZhdWx0O1xuJGRyb3Bkb3duLWJvcmRlci13aWR0aDogICAgICAgICAgICAgJGJvcmRlci13aWR0aCAhZGVmYXVsdDtcbiRkcm9wZG93bi1pbm5lci1ib3JkZXItcmFkaXVzOiAgICAgIGNhbGMoI3skZHJvcGRvd24tYm9yZGVyLXJhZGl1c30gLSAjeyRkcm9wZG93bi1ib3JkZXItd2lkdGh9KSAhZGVmYXVsdDtcbiRkcm9wZG93bi1kaXZpZGVyLWJnOiAgICAgICAgICAgICAgICRncmF5LTIwMCAhZGVmYXVsdDtcbiRkcm9wZG93bi1kaXZpZGVyLW1hcmdpbi15OiAgICAgICAgICRuYXYtZGl2aWRlci1tYXJnaW4teSAhZGVmYXVsdDtcbiRkcm9wZG93bi1ib3gtc2hhZG93OiAgICAgICAgICAgICAgIDAgLjVyZW0gMXJlbSByZ2JhKCRibGFjaywgLjE3NSkgIWRlZmF1bHQ7XG5cbiRkcm9wZG93bi1saW5rLWNvbG9yOiAgICAgICAgICAgICAgICRncmF5LTkwMCAhZGVmYXVsdDtcbiRkcm9wZG93bi1saW5rLWhvdmVyLWNvbG9yOiAgICAgICAgIGRhcmtlbigkZ3JheS05MDAsIDUlKSAhZGVmYXVsdDtcbiRkcm9wZG93bi1saW5rLWhvdmVyLWJnOiAgICAgICAgICAgICRncmF5LTEwMCAhZGVmYXVsdDtcblxuJGRyb3Bkb3duLWxpbmstYWN0aXZlLWNvbG9yOiAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XG4kZHJvcGRvd24tbGluay1hY3RpdmUtYmc6ICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcblxuJGRyb3Bkb3duLWxpbmstZGlzYWJsZWQtY29sb3I6ICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xuXG4kZHJvcGRvd24taXRlbS1wYWRkaW5nLXk6ICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XG4kZHJvcGRvd24taXRlbS1wYWRkaW5nLXg6ICAgICAgICAgICAxLjVyZW0gIWRlZmF1bHQ7XG5cbiRkcm9wZG93bi1oZWFkZXItY29sb3I6ICAgICAgICAgICAgICRncmF5LTYwMCAhZGVmYXVsdDtcblxuXG4vLyBQYWdpbmF0aW9uXG5cbiRwYWdpbmF0aW9uLXBhZGRpbmcteTogICAgICAgICAgICAgIC41cmVtICFkZWZhdWx0O1xuJHBhZ2luYXRpb24tcGFkZGluZy14OiAgICAgICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xuJHBhZ2luYXRpb24tcGFkZGluZy15LXNtOiAgICAgICAgICAgLjI1cmVtICFkZWZhdWx0O1xuJHBhZ2luYXRpb24tcGFkZGluZy14LXNtOiAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1wYWRkaW5nLXktbGc6ICAgICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1wYWRkaW5nLXgtbGc6ICAgICAgICAgICAxLjVyZW0gIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1saW5lLWhlaWdodDogICAgICAgICAgICAxLjI1ICFkZWZhdWx0O1xuXG4kcGFnaW5hdGlvbi1jb2xvcjogICAgICAgICAgICAgICAgICAkbGluay1jb2xvciAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLWJnOiAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLWJvcmRlci13aWR0aDogICAgICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1ib3JkZXItY29sb3I6ICAgICAgICAgICAkZ3JheS0zMDAgIWRlZmF1bHQ7XG5cbiRwYWdpbmF0aW9uLWZvY3VzLWJveC1zaGFkb3c6ICAgICAgICRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdyAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLWZvY3VzLW91dGxpbmU6ICAgICAgICAgIDAgIWRlZmF1bHQ7XG5cbiRwYWdpbmF0aW9uLWhvdmVyLWNvbG9yOiAgICAgICAgICAgICRsaW5rLWhvdmVyLWNvbG9yICFkZWZhdWx0O1xuJHBhZ2luYXRpb24taG92ZXItYmc6ICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xuJHBhZ2luYXRpb24taG92ZXItYm9yZGVyLWNvbG9yOiAgICAgJGdyYXktMzAwICFkZWZhdWx0O1xuXG4kcGFnaW5hdGlvbi1hY3RpdmUtY29sb3I6ICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1jb2xvciAhZGVmYXVsdDtcbiRwYWdpbmF0aW9uLWFjdGl2ZS1iZzogICAgICAgICAgICAgICRjb21wb25lbnQtYWN0aXZlLWJnICFkZWZhdWx0O1xuJHBhZ2luYXRpb24tYWN0aXZlLWJvcmRlci1jb2xvcjogICAgJHBhZ2luYXRpb24tYWN0aXZlLWJnICFkZWZhdWx0O1xuXG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1jb2xvcjogICAgICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1iZzogICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1ib3JkZXItY29sb3I6ICAkZ3JheS0zMDAgIWRlZmF1bHQ7XG5cblxuLy8gSnVtYm90cm9uXG5cbiRqdW1ib3Ryb24tcGFkZGluZzogICAgICAgICAgICAgICAgIDJyZW0gIWRlZmF1bHQ7XG4kanVtYm90cm9uLWNvbG9yOiAgICAgICAgICAgICAgICAgICBudWxsICFkZWZhdWx0O1xuJGp1bWJvdHJvbi1iZzogICAgICAgICAgICAgICAgICAgICAgJGdyYXktMjAwICFkZWZhdWx0O1xuXG5cbi8vIENhcmRzXG5cbiRjYXJkLXNwYWNlci15OiAgICAgICAgICAgICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcbiRjYXJkLXNwYWNlci14OiAgICAgICAgICAgICAgICAgICAgIDEuMjVyZW0gIWRlZmF1bHQ7XG4kY2FyZC1ib3JkZXItd2lkdGg6ICAgICAgICAgICAgICAgICAkYm9yZGVyLXdpZHRoICFkZWZhdWx0O1xuJGNhcmQtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG4kY2FyZC1ib3JkZXItY29sb3I6ICAgICAgICAgICAgICAgICByZ2JhKCRibGFjaywgLjEyNSkgIWRlZmF1bHQ7XG4kY2FyZC1pbm5lci1ib3JkZXItcmFkaXVzOiAgICAgICAgICBjYWxjKCN7JGNhcmQtYm9yZGVyLXJhZGl1c30gLSAjeyRjYXJkLWJvcmRlci13aWR0aH0pICFkZWZhdWx0O1xuJGNhcmQtY2FwLWJnOiAgICAgICAgICAgICAgICAgICAgICAgcmdiYSgkYmxhY2ssIC4wMykgIWRlZmF1bHQ7XG4kY2FyZC1jYXAtY29sb3I6ICAgICAgICAgICAgICAgICAgICBudWxsICFkZWZhdWx0O1xuJGNhcmQtY29sb3I6ICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhZGVmYXVsdDtcbiRjYXJkLWJnOiAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcblxuJGNhcmQtaW1nLW92ZXJsYXktcGFkZGluZzogICAgICAgICAgMS4yNXJlbSAhZGVmYXVsdDtcblxuJGNhcmQtZ3JvdXAtbWFyZ2luOiAgICAgICAgICAgICAgICAgJGdyaWQtZ3V0dGVyLXdpZHRoIC8gMiAhZGVmYXVsdDtcbiRjYXJkLWRlY2stbWFyZ2luOiAgICAgICAgICAgICAgICAgICRjYXJkLWdyb3VwLW1hcmdpbiAhZGVmYXVsdDtcblxuJGNhcmQtY29sdW1ucy1jb3VudDogICAgICAgICAgICAgICAgMyAhZGVmYXVsdDtcbiRjYXJkLWNvbHVtbnMtZ2FwOiAgICAgICAgICAgICAgICAgIDEuMjVyZW0gIWRlZmF1bHQ7XG4kY2FyZC1jb2x1bW5zLW1hcmdpbjogICAgICAgICAgICAgICAkY2FyZC1zcGFjZXIteSAhZGVmYXVsdDtcblxuXG4vLyBUb29sdGlwc1xuXG4kdG9vbHRpcC1mb250LXNpemU6ICAgICAgICAgICAgICAgICAkZm9udC1zaXplLXNtICFkZWZhdWx0O1xuJHRvb2x0aXAtbWF4LXdpZHRoOiAgICAgICAgICAgICAgICAgMjAwcHggIWRlZmF1bHQ7XG4kdG9vbHRpcC1jb2xvcjogICAgICAgICAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kdG9vbHRpcC1iZzogICAgICAgICAgICAgICAgICAgICAgICAkYmxhY2sgIWRlZmF1bHQ7XG4kdG9vbHRpcC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiR0b29sdGlwLW9wYWNpdHk6ICAgICAgICAgICAgICAgICAgIC45ICFkZWZhdWx0O1xuJHRvb2x0aXAtcGFkZGluZy15OiAgICAgICAgICAgICAgICAgLjI1cmVtICFkZWZhdWx0O1xuJHRvb2x0aXAtcGFkZGluZy14OiAgICAgICAgICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XG4kdG9vbHRpcC1tYXJnaW46ICAgICAgICAgICAgICAgICAgICAwICFkZWZhdWx0O1xuXG4kdG9vbHRpcC1hcnJvdy13aWR0aDogICAgICAgICAgICAgICAuOHJlbSAhZGVmYXVsdDtcbiR0b29sdGlwLWFycm93LWhlaWdodDogICAgICAgICAgICAgIC40cmVtICFkZWZhdWx0O1xuJHRvb2x0aXAtYXJyb3ctY29sb3I6ICAgICAgICAgICAgICAgJHRvb2x0aXAtYmcgIWRlZmF1bHQ7XG5cbi8vIEZvcm0gdG9vbHRpcHMgbXVzdCBjb21lIGFmdGVyIHJlZ3VsYXIgdG9vbHRpcHNcbiRmb3JtLWZlZWRiYWNrLXRvb2x0aXAtcGFkZGluZy15OiAgICAgJHRvb2x0aXAtcGFkZGluZy15ICFkZWZhdWx0O1xuJGZvcm0tZmVlZGJhY2stdG9vbHRpcC1wYWRkaW5nLXg6ICAgICAkdG9vbHRpcC1wYWRkaW5nLXggIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay10b29sdGlwLWZvbnQtc2l6ZTogICAgICR0b29sdGlwLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRmb3JtLWZlZWRiYWNrLXRvb2x0aXAtbGluZS1oZWlnaHQ6ICAgJGxpbmUtaGVpZ2h0LWJhc2UgIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay10b29sdGlwLW9wYWNpdHk6ICAgICAgICR0b29sdGlwLW9wYWNpdHkgIWRlZmF1bHQ7XG4kZm9ybS1mZWVkYmFjay10b29sdGlwLWJvcmRlci1yYWRpdXM6ICR0b29sdGlwLWJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG5cblxuLy8gUG9wb3ZlcnNcblxuJHBvcG92ZXItZm9udC1zaXplOiAgICAgICAgICAgICAgICAgJGZvbnQtc2l6ZS1zbSAhZGVmYXVsdDtcbiRwb3BvdmVyLWJnOiAgICAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRwb3BvdmVyLW1heC13aWR0aDogICAgICAgICAgICAgICAgIDI3NnB4ICFkZWZhdWx0O1xuJHBvcG92ZXItYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICAgJGJvcmRlci13aWR0aCAhZGVmYXVsdDtcbiRwb3BvdmVyLWJvcmRlci1jb2xvcjogICAgICAgICAgICAgIHJnYmEoJGJsYWNrLCAuMikgIWRlZmF1bHQ7XG4kcG9wb3Zlci1ib3JkZXItcmFkaXVzOiAgICAgICAgICAgICAkYm9yZGVyLXJhZGl1cy1sZyAhZGVmYXVsdDtcbiRwb3BvdmVyLWJveC1zaGFkb3c6ICAgICAgICAgICAgICAgIDAgLjI1cmVtIC41cmVtIHJnYmEoJGJsYWNrLCAuMikgIWRlZmF1bHQ7XG5cbiRwb3BvdmVyLWhlYWRlci1iZzogICAgICAgICAgICAgICAgIGRhcmtlbigkcG9wb3Zlci1iZywgMyUpICFkZWZhdWx0O1xuJHBvcG92ZXItaGVhZGVyLWNvbG9yOiAgICAgICAgICAgICAgJGhlYWRpbmdzLWNvbG9yICFkZWZhdWx0O1xuJHBvcG92ZXItaGVhZGVyLXBhZGRpbmcteTogICAgICAgICAgLjVyZW0gIWRlZmF1bHQ7XG4kcG9wb3Zlci1oZWFkZXItcGFkZGluZy14OiAgICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XG5cbiRwb3BvdmVyLWJvZHktY29sb3I6ICAgICAgICAgICAgICAgICRib2R5LWNvbG9yICFkZWZhdWx0O1xuJHBvcG92ZXItYm9keS1wYWRkaW5nLXk6ICAgICAgICAgICAgJHBvcG92ZXItaGVhZGVyLXBhZGRpbmcteSAhZGVmYXVsdDtcbiRwb3BvdmVyLWJvZHktcGFkZGluZy14OiAgICAgICAgICAgICRwb3BvdmVyLWhlYWRlci1wYWRkaW5nLXggIWRlZmF1bHQ7XG5cbiRwb3BvdmVyLWFycm93LXdpZHRoOiAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XG4kcG9wb3Zlci1hcnJvdy1oZWlnaHQ6ICAgICAgICAgICAgICAuNXJlbSAhZGVmYXVsdDtcbiRwb3BvdmVyLWFycm93LWNvbG9yOiAgICAgICAgICAgICAgICRwb3BvdmVyLWJnICFkZWZhdWx0O1xuXG4kcG9wb3Zlci1hcnJvdy1vdXRlci1jb2xvcjogICAgICAgICBmYWRlLWluKCRwb3BvdmVyLWJvcmRlci1jb2xvciwgLjA1KSAhZGVmYXVsdDtcblxuXG4vLyBUb2FzdHNcblxuJHRvYXN0LW1heC13aWR0aDogICAgICAgICAgICAgICAgICAgMzUwcHggIWRlZmF1bHQ7XG4kdG9hc3QtcGFkZGluZy14OiAgICAgICAgICAgICAgICAgICAuNzVyZW0gIWRlZmF1bHQ7XG4kdG9hc3QtcGFkZGluZy15OiAgICAgICAgICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XG4kdG9hc3QtZm9udC1zaXplOiAgICAgICAgICAgICAgICAgICAuODc1cmVtICFkZWZhdWx0O1xuJHRvYXN0LWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhZGVmYXVsdDtcbiR0b2FzdC1iYWNrZ3JvdW5kLWNvbG9yOiAgICAgICAgICAgIHJnYmEoJHdoaXRlLCAuODUpICFkZWZhdWx0O1xuJHRvYXN0LWJvcmRlci13aWR0aDogICAgICAgICAgICAgICAgMXB4ICFkZWZhdWx0O1xuJHRvYXN0LWJvcmRlci1jb2xvcjogICAgICAgICAgICAgICAgcmdiYSgwLCAwLCAwLCAuMSkgIWRlZmF1bHQ7XG4kdG9hc3QtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XG4kdG9hc3QtYm94LXNoYWRvdzogICAgICAgICAgICAgICAgICAwIC4yNXJlbSAuNzVyZW0gcmdiYSgkYmxhY2ssIC4xKSAhZGVmYXVsdDtcblxuJHRvYXN0LWhlYWRlci1jb2xvcjogICAgICAgICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xuJHRvYXN0LWhlYWRlci1iYWNrZ3JvdW5kLWNvbG9yOiAgICAgcmdiYSgkd2hpdGUsIC44NSkgIWRlZmF1bHQ7XG4kdG9hc3QtaGVhZGVyLWJvcmRlci1jb2xvcjogICAgICAgICByZ2JhKDAsIDAsIDAsIC4wNSkgIWRlZmF1bHQ7XG5cblxuLy8gQmFkZ2VzXG5cbiRiYWRnZS1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgIDc1JSAhZGVmYXVsdDtcbiRiYWRnZS1mb250LXdlaWdodDogICAgICAgICAgICAgICAgICRmb250LXdlaWdodC1ib2xkICFkZWZhdWx0O1xuJGJhZGdlLXBhZGRpbmcteTogICAgICAgICAgICAgICAgICAgLjI1ZW0gIWRlZmF1bHQ7XG4kYmFkZ2UtcGFkZGluZy14OiAgICAgICAgICAgICAgICAgICAuNGVtICFkZWZhdWx0O1xuJGJhZGdlLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG5cbiRiYWRnZS10cmFuc2l0aW9uOiAgICAgICAgICAgICAgICAgICRidG4tdHJhbnNpdGlvbiAhZGVmYXVsdDtcbiRiYWRnZS1mb2N1cy13aWR0aDogICAgICAgICAgICAgICAgICRpbnB1dC1idG4tZm9jdXMtd2lkdGggIWRlZmF1bHQ7XG5cbiRiYWRnZS1waWxsLXBhZGRpbmcteDogICAgICAgICAgICAgIC42ZW0gIWRlZmF1bHQ7XG4vLyBVc2UgYSBoaWdoZXIgdGhhbiBub3JtYWwgdmFsdWUgdG8gZW5zdXJlIGNvbXBsZXRlbHkgcm91bmRlZCBlZGdlcyB3aGVuXG4vLyBjdXN0b21pemluZyBwYWRkaW5nIG9yIGZvbnQtc2l6ZSBvbiBsYWJlbHMuXG4kYmFkZ2UtcGlsbC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAxMHJlbSAhZGVmYXVsdDtcblxuXG4vLyBNb2RhbHNcblxuLy8gUGFkZGluZyBhcHBsaWVkIHRvIHRoZSBtb2RhbCBib2R5XG4kbW9kYWwtaW5uZXItcGFkZGluZzogICAgICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuXG4kbW9kYWwtZGlhbG9nLW1hcmdpbjogICAgICAgICAgICAgICAuNXJlbSAhZGVmYXVsdDtcbiRtb2RhbC1kaWFsb2ctbWFyZ2luLXktc20tdXA6ICAgICAgIDEuNzVyZW0gIWRlZmF1bHQ7XG5cbiRtb2RhbC10aXRsZS1saW5lLWhlaWdodDogICAgICAgICAgICRsaW5lLWhlaWdodC1iYXNlICFkZWZhdWx0O1xuXG4kbW9kYWwtY29udGVudC1jb2xvcjogICAgICAgICAgICAgICBudWxsICFkZWZhdWx0O1xuJG1vZGFsLWNvbnRlbnQtYmc6ICAgICAgICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJG1vZGFsLWNvbnRlbnQtYm9yZGVyLWNvbG9yOiAgICAgICAgcmdiYSgkYmxhY2ssIC4yKSAhZGVmYXVsdDtcbiRtb2RhbC1jb250ZW50LWJvcmRlci13aWR0aDogICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kbW9kYWwtY29udGVudC1ib3JkZXItcmFkaXVzOiAgICAgICAkYm9yZGVyLXJhZGl1cy1sZyAhZGVmYXVsdDtcbiRtb2RhbC1jb250ZW50LWJveC1zaGFkb3cteHM6ICAgICAgIDAgLjI1cmVtIC41cmVtIHJnYmEoJGJsYWNrLCAuNSkgIWRlZmF1bHQ7XG4kbW9kYWwtY29udGVudC1ib3gtc2hhZG93LXNtLXVwOiAgICAwIC41cmVtIDFyZW0gcmdiYSgkYmxhY2ssIC41KSAhZGVmYXVsdDtcblxuJG1vZGFsLWJhY2tkcm9wLWJnOiAgICAgICAgICAgICAgICAgJGJsYWNrICFkZWZhdWx0O1xuJG1vZGFsLWJhY2tkcm9wLW9wYWNpdHk6ICAgICAgICAgICAgLjUgIWRlZmF1bHQ7XG4kbW9kYWwtaGVhZGVyLWJvcmRlci1jb2xvcjogICAgICAgICAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJG1vZGFsLWZvb3Rlci1ib3JkZXItY29sb3I6ICAgICAgICAgJG1vZGFsLWhlYWRlci1ib3JkZXItY29sb3IgIWRlZmF1bHQ7XG4kbW9kYWwtaGVhZGVyLWJvcmRlci13aWR0aDogICAgICAgICAkbW9kYWwtY29udGVudC1ib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kbW9kYWwtZm9vdGVyLWJvcmRlci13aWR0aDogICAgICAgICAkbW9kYWwtaGVhZGVyLWJvcmRlci13aWR0aCAhZGVmYXVsdDtcbiRtb2RhbC1oZWFkZXItcGFkZGluZy15OiAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XG4kbW9kYWwtaGVhZGVyLXBhZGRpbmcteDogICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuJG1vZGFsLWhlYWRlci1wYWRkaW5nOiAgICAgICAgICAgICAgJG1vZGFsLWhlYWRlci1wYWRkaW5nLXkgJG1vZGFsLWhlYWRlci1wYWRkaW5nLXggIWRlZmF1bHQ7IC8vIEtlZXAgdGhpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuJG1vZGFsLXhsOiAgICAgICAgICAgICAgICAgICAgICAgICAgMTE0MHB4ICFkZWZhdWx0O1xuJG1vZGFsLWxnOiAgICAgICAgICAgICAgICAgICAgICAgICAgODAwcHggIWRlZmF1bHQ7XG4kbW9kYWwtbWQ6ICAgICAgICAgICAgICAgICAgICAgICAgICA1MDBweCAhZGVmYXVsdDtcbiRtb2RhbC1zbTogICAgICAgICAgICAgICAgICAgICAgICAgIDMwMHB4ICFkZWZhdWx0O1xuXG4kbW9kYWwtZmFkZS10cmFuc2Zvcm06ICAgICAgICAgICAgICB0cmFuc2xhdGUoMCwgLTUwcHgpICFkZWZhdWx0O1xuJG1vZGFsLXNob3ctdHJhbnNmb3JtOiAgICAgICAgICAgICAgbm9uZSAhZGVmYXVsdDtcbiRtb2RhbC10cmFuc2l0aW9uOiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSAuM3MgZWFzZS1vdXQgIWRlZmF1bHQ7XG5cblxuLy8gQWxlcnRzXG4vL1xuLy8gRGVmaW5lIGFsZXJ0IGNvbG9ycywgYm9yZGVyIHJhZGl1cywgYW5kIHBhZGRpbmcuXG5cbiRhbGVydC1wYWRkaW5nLXk6ICAgICAgICAgICAgICAgICAgIC43NXJlbSAhZGVmYXVsdDtcbiRhbGVydC1wYWRkaW5nLXg6ICAgICAgICAgICAgICAgICAgIDEuMjVyZW0gIWRlZmF1bHQ7XG4kYWxlcnQtbWFyZ2luLWJvdHRvbTogICAgICAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuJGFsZXJ0LWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAgICAgJGJvcmRlci1yYWRpdXMgIWRlZmF1bHQ7XG4kYWxlcnQtbGluay1mb250LXdlaWdodDogICAgICAgICAgICAkZm9udC13ZWlnaHQtYm9sZCAhZGVmYXVsdDtcbiRhbGVydC1ib3JkZXItd2lkdGg6ICAgICAgICAgICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG5cbiRhbGVydC1iZy1sZXZlbDogICAgICAgICAgICAgICAgICAgIC0xMCAhZGVmYXVsdDtcbiRhbGVydC1ib3JkZXItbGV2ZWw6ICAgICAgICAgICAgICAgIC05ICFkZWZhdWx0O1xuJGFsZXJ0LWNvbG9yLWxldmVsOiAgICAgICAgICAgICAgICAgNiAhZGVmYXVsdDtcblxuXG4vLyBQcm9ncmVzcyBiYXJzXG5cbiRwcm9ncmVzcy1oZWlnaHQ6ICAgICAgICAgICAgICAgICAgIDFyZW0gIWRlZmF1bHQ7XG4kcHJvZ3Jlc3MtZm9udC1zaXplOiAgICAgICAgICAgICAgICAkZm9udC1zaXplLWJhc2UgKiAuNzUgIWRlZmF1bHQ7XG4kcHJvZ3Jlc3MtYmc6ICAgICAgICAgICAgICAgICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XG4kcHJvZ3Jlc3MtYm9yZGVyLXJhZGl1czogICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiRwcm9ncmVzcy1ib3gtc2hhZG93OiAgICAgICAgICAgICAgIGluc2V0IDAgLjFyZW0gLjFyZW0gcmdiYSgkYmxhY2ssIC4xKSAhZGVmYXVsdDtcbiRwcm9ncmVzcy1iYXItY29sb3I6ICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRwcm9ncmVzcy1iYXItYmc6ICAgICAgICAgICAgICAgICAgIHRoZW1lLWNvbG9yKFwicHJpbWFyeVwiKSAhZGVmYXVsdDtcbiRwcm9ncmVzcy1iYXItYW5pbWF0aW9uLXRpbWluZzogICAgIDFzIGxpbmVhciBpbmZpbml0ZSAhZGVmYXVsdDtcbiRwcm9ncmVzcy1iYXItdHJhbnNpdGlvbjogICAgICAgICAgIHdpZHRoIC42cyBlYXNlICFkZWZhdWx0O1xuXG5cbi8vIExpc3QgZ3JvdXBcblxuJGxpc3QtZ3JvdXAtY29sb3I6ICAgICAgICAgICAgICAgICAgbnVsbCAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWJnOiAgICAgICAgICAgICAgICAgICAgICR3aGl0ZSAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWJvcmRlci1jb2xvcjogICAgICAgICAgIHJnYmEoJGJsYWNrLCAuMTI1KSAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWJvcmRlci13aWR0aDogICAgICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1ib3JkZXItcmFkaXVzOiAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcblxuJGxpc3QtZ3JvdXAtaXRlbS1wYWRkaW5nLXk6ICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xuJGxpc3QtZ3JvdXAtaXRlbS1wYWRkaW5nLXg6ICAgICAgICAgMS4yNXJlbSAhZGVmYXVsdDtcblxuJGxpc3QtZ3JvdXAtaG92ZXItYmc6ICAgICAgICAgICAgICAgJGdyYXktMTAwICFkZWZhdWx0O1xuJGxpc3QtZ3JvdXAtYWN0aXZlLWNvbG9yOiAgICAgICAgICAgJGNvbXBvbmVudC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1hY3RpdmUtYmc6ICAgICAgICAgICAgICAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWFjdGl2ZS1ib3JkZXItY29sb3I6ICAgICRsaXN0LWdyb3VwLWFjdGl2ZS1iZyAhZGVmYXVsdDtcblxuJGxpc3QtZ3JvdXAtZGlzYWJsZWQtY29sb3I6ICAgICAgICAgJGdyYXktNjAwICFkZWZhdWx0O1xuJGxpc3QtZ3JvdXAtZGlzYWJsZWQtYmc6ICAgICAgICAgICAgJGxpc3QtZ3JvdXAtYmcgIWRlZmF1bHQ7XG5cbiRsaXN0LWdyb3VwLWFjdGlvbi1jb2xvcjogICAgICAgICAgICRncmF5LTcwMCAhZGVmYXVsdDtcbiRsaXN0LWdyb3VwLWFjdGlvbi1ob3Zlci1jb2xvcjogICAgICRsaXN0LWdyb3VwLWFjdGlvbi1jb2xvciAhZGVmYXVsdDtcblxuJGxpc3QtZ3JvdXAtYWN0aW9uLWFjdGl2ZS1jb2xvcjogICAgJGJvZHktY29sb3IgIWRlZmF1bHQ7XG4kbGlzdC1ncm91cC1hY3Rpb24tYWN0aXZlLWJnOiAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XG5cblxuLy8gSW1hZ2UgdGh1bWJuYWlsc1xuXG4kdGh1bWJuYWlsLXBhZGRpbmc6ICAgICAgICAgICAgICAgICAuMjVyZW0gIWRlZmF1bHQ7XG4kdGh1bWJuYWlsLWJnOiAgICAgICAgICAgICAgICAgICAgICAkYm9keS1iZyAhZGVmYXVsdDtcbiR0aHVtYm5haWwtYm9yZGVyLXdpZHRoOiAgICAgICAgICAgICRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kdGh1bWJuYWlsLWJvcmRlci1jb2xvcjogICAgICAgICAgICAkZ3JheS0zMDAgIWRlZmF1bHQ7XG4kdGh1bWJuYWlsLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcbiR0aHVtYm5haWwtYm94LXNoYWRvdzogICAgICAgICAgICAgIDAgMXB4IDJweCByZ2JhKCRibGFjaywgLjA3NSkgIWRlZmF1bHQ7XG5cblxuLy8gRmlndXJlc1xuXG4kZmlndXJlLWNhcHRpb24tZm9udC1zaXplOiAgICAgICAgICA5MCUgIWRlZmF1bHQ7XG4kZmlndXJlLWNhcHRpb24tY29sb3I6ICAgICAgICAgICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG5cblxuLy8gQnJlYWRjcnVtYnNcblxuJGJyZWFkY3J1bWItcGFkZGluZy15OiAgICAgICAgICAgICAgLjc1cmVtICFkZWZhdWx0O1xuJGJyZWFkY3J1bWItcGFkZGluZy14OiAgICAgICAgICAgICAgMXJlbSAhZGVmYXVsdDtcbiRicmVhZGNydW1iLWl0ZW0tcGFkZGluZzogICAgICAgICAgIC41cmVtICFkZWZhdWx0O1xuXG4kYnJlYWRjcnVtYi1tYXJnaW4tYm90dG9tOiAgICAgICAgICAxcmVtICFkZWZhdWx0O1xuXG4kYnJlYWRjcnVtYi1iZzogICAgICAgICAgICAgICAgICAgICAkZ3JheS0yMDAgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yOiAgICAgICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1hY3RpdmUtY29sb3I6ICAgICAgICAgICAkZ3JheS02MDAgIWRlZmF1bHQ7XG4kYnJlYWRjcnVtYi1kaXZpZGVyOiAgICAgICAgICAgICAgICBxdW90ZShcIi9cIikgIWRlZmF1bHQ7XG5cbiRicmVhZGNydW1iLWJvcmRlci1yYWRpdXM6ICAgICAgICAgICRib3JkZXItcmFkaXVzICFkZWZhdWx0O1xuXG5cbi8vIENhcm91c2VsXG5cbiRjYXJvdXNlbC1jb250cm9sLWNvbG9yOiAgICAgICAgICAgICAkd2hpdGUgIWRlZmF1bHQ7XG4kY2Fyb3VzZWwtY29udHJvbC13aWR0aDogICAgICAgICAgICAgMTUlICFkZWZhdWx0O1xuJGNhcm91c2VsLWNvbnRyb2wtb3BhY2l0eTogICAgICAgICAgIC41ICFkZWZhdWx0O1xuJGNhcm91c2VsLWNvbnRyb2wtaG92ZXItb3BhY2l0eTogICAgIC45ICFkZWZhdWx0O1xuJGNhcm91c2VsLWNvbnRyb2wtdHJhbnNpdGlvbjogICAgICAgIG9wYWNpdHkgLjE1cyBlYXNlICFkZWZhdWx0O1xuXG4kY2Fyb3VzZWwtaW5kaWNhdG9yLXdpZHRoOiAgICAgICAgICAgMzBweCAhZGVmYXVsdDtcbiRjYXJvdXNlbC1pbmRpY2F0b3ItaGVpZ2h0OiAgICAgICAgICAzcHggIWRlZmF1bHQ7XG4kY2Fyb3VzZWwtaW5kaWNhdG9yLWhpdC1hcmVhLWhlaWdodDogMTBweCAhZGVmYXVsdDtcbiRjYXJvdXNlbC1pbmRpY2F0b3Itc3BhY2VyOiAgICAgICAgICAzcHggIWRlZmF1bHQ7XG4kY2Fyb3VzZWwtaW5kaWNhdG9yLWFjdGl2ZS1iZzogICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGNhcm91c2VsLWluZGljYXRvci10cmFuc2l0aW9uOiAgICAgIG9wYWNpdHkgLjZzIGVhc2UgIWRlZmF1bHQ7XG5cbiRjYXJvdXNlbC1jYXB0aW9uLXdpZHRoOiAgICAgICAgICAgICA3MCUgIWRlZmF1bHQ7XG4kY2Fyb3VzZWwtY2FwdGlvbi1jb2xvcjogICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuXG4kY2Fyb3VzZWwtY29udHJvbC1pY29uLXdpZHRoOiAgICAgICAgMjBweCAhZGVmYXVsdDtcblxuJGNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uLWJnOiAgICAgIHN0ci1yZXBsYWNlKHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBmaWxsPScjeyRjYXJvdXNlbC1jb250cm9sLWNvbG9yfScgdmlld0JveD0nMCAwIDggOCclM2UlM2NwYXRoIGQ9J001LjI1IDBsLTQgNCA0IDQgMS41LTEuNS0yLjUtMi41IDIuNS0yLjUtMS41LTEuNXonLyUzZSUzYy9zdmclM2VcIiksIFwiI1wiLCBcIiUyM1wiKSAhZGVmYXVsdDtcbiRjYXJvdXNlbC1jb250cm9sLW5leHQtaWNvbi1iZzogICAgICBzdHItcmVwbGFjZSh1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nI3skY2Fyb3VzZWwtY29udHJvbC1jb2xvcn0nIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBkPSdNMi43NSAwbC0xLjUgMS41IDIuNSAyLjUtMi41IDIuNSAxLjUgMS41IDQtNC00LTR6Jy8lM2UlM2Mvc3ZnJTNlXCIpLCBcIiNcIiwgXCIlMjNcIikgIWRlZmF1bHQ7XG5cbiRjYXJvdXNlbC10cmFuc2l0aW9uLWR1cmF0aW9uOiAgICAgICAuNnMgIWRlZmF1bHQ7XG4kY2Fyb3VzZWwtdHJhbnNpdGlvbjogICAgICAgICAgICAgICAgdHJhbnNmb3JtICRjYXJvdXNlbC10cmFuc2l0aW9uLWR1cmF0aW9uIGVhc2UtaW4tb3V0ICFkZWZhdWx0OyAvLyBEZWZpbmUgdHJhbnNmb3JtIHRyYW5zaXRpb24gZmlyc3QgaWYgdXNpbmcgbXVsdGlwbGUgdHJhbnNpdGlvbnMgKGUuZy4sIGB0cmFuc2Zvcm0gMnMgZWFzZSwgb3BhY2l0eSAuNXMgZWFzZS1vdXRgKVxuXG5cbi8vIFNwaW5uZXJzXG5cbiRzcGlubmVyLXdpZHRoOiAgICAgICAgIDJyZW0gIWRlZmF1bHQ7XG4kc3Bpbm5lci1oZWlnaHQ6ICAgICAgICAkc3Bpbm5lci13aWR0aCAhZGVmYXVsdDtcbiRzcGlubmVyLWJvcmRlci13aWR0aDogIC4yNWVtICFkZWZhdWx0O1xuXG4kc3Bpbm5lci13aWR0aC1zbTogICAgICAgIDFyZW0gIWRlZmF1bHQ7XG4kc3Bpbm5lci1oZWlnaHQtc206ICAgICAgICRzcGlubmVyLXdpZHRoLXNtICFkZWZhdWx0O1xuJHNwaW5uZXItYm9yZGVyLXdpZHRoLXNtOiAuMmVtICFkZWZhdWx0O1xuXG5cbi8vIENsb3NlXG5cbiRjbG9zZS1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgICRmb250LXNpemUtYmFzZSAqIDEuNSAhZGVmYXVsdDtcbiRjbG9zZS1mb250LXdlaWdodDogICAgICAgICAgICAgICAgICRmb250LXdlaWdodC1ib2xkICFkZWZhdWx0O1xuJGNsb3NlLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgJGJsYWNrICFkZWZhdWx0O1xuJGNsb3NlLXRleHQtc2hhZG93OiAgICAgICAgICAgICAgICAgMCAxcHggMCAkd2hpdGUgIWRlZmF1bHQ7XG5cblxuLy8gQ29kZVxuXG4kY29kZS1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgICA4Ny41JSAhZGVmYXVsdDtcbiRjb2RlLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgICRwaW5rICFkZWZhdWx0O1xuXG4ka2JkLXBhZGRpbmcteTogICAgICAgICAgICAgICAgICAgICAuMnJlbSAhZGVmYXVsdDtcbiRrYmQtcGFkZGluZy14OiAgICAgICAgICAgICAgICAgICAgIC40cmVtICFkZWZhdWx0O1xuJGtiZC1mb250LXNpemU6ICAgICAgICAgICAgICAgICAgICAgJGNvZGUtZm9udC1zaXplICFkZWZhdWx0O1xuJGtiZC1jb2xvcjogICAgICAgICAgICAgICAgICAgICAgICAgJHdoaXRlICFkZWZhdWx0O1xuJGtiZC1iZzogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdyYXktOTAwICFkZWZhdWx0O1xuXG4kcHJlLWNvbG9yOiAgICAgICAgICAgICAgICAgICAgICAgICAkZ3JheS05MDAgIWRlZmF1bHQ7XG4kcHJlLXNjcm9sbGFibGUtbWF4LWhlaWdodDogICAgICAgICAzNDBweCAhZGVmYXVsdDtcblxuXG4vLyBVdGlsaXRpZXNcblxuJGRpc3BsYXlzOiBub25lLCBpbmxpbmUsIGlubGluZS1ibG9jaywgYmxvY2ssIHRhYmxlLCB0YWJsZS1yb3csIHRhYmxlLWNlbGwsIGZsZXgsIGlubGluZS1mbGV4ICFkZWZhdWx0O1xuJG92ZXJmbG93czogYXV0bywgaGlkZGVuICFkZWZhdWx0O1xuJHBvc2l0aW9uczogc3RhdGljLCByZWxhdGl2ZSwgYWJzb2x1dGUsIGZpeGVkLCBzdGlja3kgIWRlZmF1bHQ7XG5cblxuLy8gUHJpbnRpbmdcblxuJHByaW50LXBhZ2Utc2l6ZTogICAgICAgICAgICAgICAgICAgYTMgIWRlZmF1bHQ7XG4kcHJpbnQtYm9keS1taW4td2lkdGg6ICAgICAgICAgICAgICBtYXAtZ2V0KCRncmlkLWJyZWFrcG9pbnRzLCBcImxnXCIpICFkZWZhdWx0O1xuIiwiQG1peGluIGJveC1zaGFkb3coJHNoYWRvdy4uLikge1xuICBAaWYgJGVuYWJsZS1zaGFkb3dzIHtcbiAgICAkcmVzdWx0OiAoKTtcblxuICAgIEBpZiAobGVuZ3RoKCRzaGFkb3cpID09IDEpIHtcbiAgICAgIC8vIFdlIGNhbiBwYXNzIGBAaW5jbHVkZSBib3gtc2hhZG93KG5vbmUpO2BcbiAgICAgICRyZXN1bHQ6ICRzaGFkb3c7XG4gICAgfSBAZWxzZSB7XG4gICAgICAvLyBGaWx0ZXIgdG8gYXZvaWQgaW52YWxpZCBwcm9wZXJ0aWVzIGZvciBleGFtcGxlIGBib3gtc2hhZG93OiBub25lLCAxcHggMXB4IGJsYWNrO2BcbiAgICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRzaGFkb3cpIHtcbiAgICAgICAgQGlmIG50aCgkc2hhZG93LCAkaSkgIT0gXCJub25lXCIge1xuICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJHNoYWRvdywgJGkpLCBcImNvbW1hXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIEBpZiAobGVuZ3RoKCRyZXN1bHQpID4gMCkge1xuICAgICAgYm94LXNoYWRvdzogJHJlc3VsdDtcbiAgICB9XG4gIH1cbn1cbiJdfQ== */
