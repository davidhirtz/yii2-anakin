/**
 * CKEditor editor.
 */
/*
Config.
 */
/*
Colors.
 */
/*
Grid.
 */
/*
Spacers.
 */
/*
Border.
 */
/*
Text.
 */
/*
Navs.
 */
/*
Navbar.
 */
/*
Breadcrumbs.
 */
/*
Alert.
 */
/*
Card.
 */
/*
Input.
 */
/*
List group.
 */
/*
Title.
 */
/*
Panel.
 */
/*
Lists.
 */
/*
Buttons.
 */
/*
Forms.
 */
/*
Tables.
 */
/*
Badge.
 */
/*
Colors.
 */
/*
Grid.
 */
/*
Spacers.
 */
/**
Border.
 */
/*
Text.
 */
/*
Navs.
 */
/*
Navbar.
 */
/*
Breadcrumbs.
 */
/*
Alert.
 */
/*
Card.
 */
/*
Grid view.
 */
/*
Buttons.
 */
/*
Input.
 */
/*
List group.
 */
/*
Tables.
 */
/*
Pagination.
 */
/*
Dropdown.
 */
/*
Badge.
 */
/*
Tooltip.
 */
/**
Thumbnail.
 */
/*
Icon.
 */
/**
 * CKEditor dialog.
 */
/*
Colors.
 */
/*
Grid.
 */
/*
Spacers.
 */
/**
Border.
 */
/*
Text.
 */
/*
Navs.
 */
/*
Navbar.
 */
/*
Breadcrumbs.
 */
/*
Alert.
 */
/*
Card.
 */
/*
Grid view.
 */
/*
Buttons.
 */
/*
Input.
 */
/*
List group.
 */
/*
Tables.
 */
/*
Pagination.
 */
/*
Dropdown.
 */
/*
Badge.
 */
/*
Tooltip.
 */
/**
Thumbnail.
 */
/*
Icon.
 */
/*
Main.
 */
/*
Toolbar.
 */
/*
Panel.
 */
/*
Content.
 */
/*
Dialog.
 */
/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or http://ckeditor.com/license
*/
/*
mainui.css (part of editor.css)
=================================

This file styles the basic structure of the CKEditor user interface - the box
that holds everything.

CKEditor offers two main editing modes. The main UI blocks that compose these
modes are:

    For "Theme UI" mode, the one most generally used:

    +-- .cke_chrome ----------------------+
    |+-- .cke_inner ---------------------+|
    || +-- .cke_top -------------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    || +-- .cke_contents --------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    || +-- .cke_bottom ----------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    |+-----------------------------------+|
    +-------------------------------------+

    For "Inline Editing" mode:

    +-- .cke_chrome .cke_float------------+
    |+-- .cke_inner ---------------------+|
    || +-- .cke_top -------------------+ ||
    || |                               | ||
    || +-------------------------------+ ||
    |+-----------------------------------+|
    +-------------------------------------+

Special outer level classes used in this file:

    .cke_hc: Available when the editor is rendered on "High Contrast".

*/
.cke_chrome {
  display: block;
  width: 100%;
  padding: 0;
  font-size: 14px;
  line-height: 1.4;
  background-color: transparent;
  border: 0;
  border-radius: 0;
  visibility: inherit;
}

.cke_inner {
  display: block;
  -webkit-touch-callout: none;
  background: transparent;
  padding: 0;
}

.cke_top, .cke_contents, .cke_bottom {
  display: block;
  overflow: hidden;
}

.cke_top {
  color: #000;
  background-color: #fff;
  border-bottom: 0;
  padding: 2px 0 0;
  white-space: normal;
}

.cke_bottom {
  position: relative;
}

/* On iOS we need to manually enable scrolling in the contents block. (#9945) */
.cke_browser_ios .cke_contents {
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
}

.cke_ltr {
  overflow-y: hidden;
}

/* For accessibility purposes, several "voice labels" are present in the UI.
   These are usually <span> elements that show not be visible, but that are
   used by screen-readers to announce other elements. Here, we hide these
   <spans>, in fact. */
.cke_voice_label {
  display: none;
}

.cke_resizer {
  display: none;
}

/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or http://ckeditor.com/license
*/
/*
toolbar.css (part of editor.css)
==================================

This files styles the CKEditor toolbar and its buttons. For toolbar combo
styles, check richcombo.css.

The toolbar is rendered as a big container (called toolbox), which contains
smaller "toolbars". Each toolbar represents a group of items that cannot be
separated. The following is the visual representation of the toolbox.

+-- .cke_toolbox ----------------------------------------------------------+
| +-- .cke_toolbar --+ +-- .cke_toolbar --+ ... +-- .cke_toolbar_break --+ |
| |                  | |                  |     |                        | |
| +------------------+ +------------------+     +------------------------+ |
| +-- .cke_toolbar --+ +-- .cke_toolbar --+ ...                            |
| |                  | |                  |                                |
| +------------------+ +------------------+                                |
+--------------------------------------------------------------------------+

The following instead is the visual representation of a single toolbar:

+-- .cke_toolbar ----------------------------------------------------------------+
| +-- .cke_toolbar_start --+ +-- .cke_toolgroup (*) --+ +-- .cke_toolbar_end --+ |
| |                        | |                        | |                      | |
| +------------------------+ +------------------------+ +----------------------+ |
+--------------------------------------------------------------------------------+
(*) .cke_toolgroup is available only when the toolbar items can be grouped
    (buttons). If the items can't be group (combos), this box is not available
    and the items are rendered straight in that place.

This file also styles toolbar buttons, which are rendered inside the above
.cke_toolgroup containers. This is the visual representation of a button:

+-- .cke_button -------------------------------------+
| +-- .cke_button_icon --+ +-- .cke_button_label --+ |
| |                      | |                       | |
| +----------------------+ +-----------------------+ |
+----------------------------------------------------+

Special outer level classes used in this file:

    .cke_hc: Available when the editor is rendered on "High Contrast".
    .cke_rtl: Available when the editor UI is on RTL.
*/
.cke_toolbox, .cke_toolbar {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap;
}

.cke_toolgroup {
  float: left;
  margin: 0 10px 0 0;
  padding: 0;
  border: 0;
  border-radius: 0;
}

.cke_button {
  display: block;
  margin: 0 1px 0 0;
  padding: 12px 12px;
  outline: none;
  cursor: default;
  float: left;
  border: 1px solid transparent;
  border-radius: 0;
  background: #fff;
  text-decoration: none !important;
}

/* This class is applied to the button when it is "active" (pushed).
   This style indicates that the feature associated with the button is active
   i.e. currently writing in bold or when spell checking is enabled. */
.cke_button_on {
  background: #eee;
  border-color: transparent;
}

/* This class is applied to the button when the feature associated with the
   button cannot be used (grayed-out).
   i.e. paste button remains disabled when there is nothing in the clipboard to
   be pasted. */
.cke_button_disabled .cke_button_icon {
  opacity: 0.3;
}

.cke_button_off:hover, .cke_button_off:focus, .cke_button_off:active, .cke_button_disabled:hover, .cke_button_disabled:focus, .cke_button_disabled:active {
  background: #eee;
  border-color: #f5f5f5;
}

/* The icon which is a visual representation of the button. */
.cke_button_icon {
  display: block;
  margin: 0;
  width: 16px;
  height: 16px;
  cursor: inherit;
  background-repeat: no-repeat;
}

/* The label of the button that stores the name of the feature. By default,
   labels are invisible. They can be revealed on demand though. */
.cke_button_label {
  display: none;
}

/* The small arrow available on buttons that can be expanded
   (e.g. the color buttons). */
/* The vertical separator which is used within a single toolbar to split
   buttons into sub-groups. */
/* The button, which when clicked hides (collapses) all the toolbars. */
/*
Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or http://ckeditor.com/license
*/
/*
panel.css (part of editor.css)
================================

Panels are floating elements that can hold different types of contents.
The following are common uses of it:

    - The element that toolbar combos display when opening them.
    - The context menu.
    - The list of items displayed by "menu buttons" (e.g. scayt).
    - The panel shown when opening "panel buttons" (e.g. color buttons).

Panel contents are wrapped into an iframe, so it is possible to have additional
CSS loaded inside them (e.g. to have more accurate preview on the styles combo).

The following is a visual representation of the outer elements of a panel:

+-- .cke_panel(*) ---------------------+
| +-- IFRAME.cke_panel_frame --------+ |
| | +-- HTML.cke_panel_container --+ | |
| | | +-- .cke_panel_block ------+ | | |
| | | |                          | | | |
| | | |     (contents here)      | | | |
| | | |                          | | | |
| | | +--------------------------+ | | |
| | +------------------------------+ | |
| +----------------------------------+ |
+--------------------------------------+

(*) All kinds of panel share the above structure. Menu panels adds the
    .cke_menu_panel class to the outer element, while toolbar combos add the
    .cke_combopanel class.

This file also defines styles for panel lists (used by combos). For menu-like
panel contents and color panels check menu.css and colorpanel.css.
*/
/* The box that holds an IFRAME. It's inserted into a host document and positioned
   absolutely by the application. It floats above the host document/editor. */
.cke_panel {
  visibility: visible;
  width: 120px;
  height: 100px;
  margin: 5px 0 0;
  overflow: hidden;
  background-color: #fff;
  border: 0 solid #000;
  border-radius: 0;
}

/* This class represents panels which are used as context menus. */
.cke_menu_panel {
  padding: 0;
  margin: 0;
}

/* This class represents panels which are used by rich combos. */
.cke_combopanel {
  width: 150px;
  height: 110px;
}

/* The IFRAME the panel is wrapped into. */
.cke_panel_frame {
  width: 100%;
  height: 100%;
  overflow: auto;
  overflow-x: hidden;
}

/* The HTML document which is a direct descendant of the IFRAME */
.cke_panel_container {
  overflow-y: auto;
  overflow-x: hidden;
}

/*
Here we start the definition of panel lists (e.g. combo panels). The following
is its visual representation:

+-- .cke_panel_block -----------------+
| +-- .cke_panel_grouptitle --------+ |
| |                                 | |
| +---------------------------------+ |
| +-- .cke_panel_list --------------+ |
| | +-- .cke_panel_listItem ------+ | |
| | | +-- a --------------------+ | | |
| | | | +-- span -------------+ | | | |
| | | | |                     | | | | |
| | | | +---------------------+ | | | |
| | | +-------------------------+ | | |
| | +-----------------------------+ | |
| | +-- .cke_panel_listItem ------+ | |
| | | +-- a --------------------+ | | |
| | | | +-- span -------------+ | | | |
| | | | |                     | | | | |
| | | | +---------------------+ | | | |
| | | +-------------------------+ | | |
| | +-----------------------------+ | |
| | ...                             | |
| +---------------------------------+ |
+-------------------------------------+
*/
/* The list of panel items. */
.cke_panel_list {
  list-style-type: none;
  margin: 0;
  padding: 0;
  white-space: nowrap;
}

/* The item of .cke_panel_list */
.cke_panel_listItem {
  margin: 0;
  padding: 0;
}

/* The child of .cke_panel_listItem. These elements contain spans which are
   to display a real name of the property which is visible for an end-user. */
.cke_panel_listItem a {
  padding: 6px 10px;
  display: block;
  color: inherit;
  text-decoration: none;
  overflow: hidden;
  text-overflow: ellipsis;
}

.cke_panel_listItem a:hover, .cke_panel_listItem a:focus, .cke_panel_listItem a:active {
  background-color: #ddd;
  outline: 0;
}

.cke_panel_listItem a > * {
  font-size: inherit !important;
  font-weight: inherit !important;
}

.cke_panel_listItem.cke_selected a {
  background-color: #ddd;
  outline: none;
}

.cke_hc .cke_panel_listItem a {
  border-style: none;
}

/* The title of the entire panel which is visible on top of the list. */
.cke_panel_grouptitle {
  display: none;
}

/* The following styles set defaults of the elements used by the Paragraph
   Format panel. */
.cke_panel_listItem p, .cke_panel_listItem h1, .cke_panel_listItem h2, .cke_panel_listItem h3, .cke_panel_listItem h4, .cke_panel_listItem h5, .cke_panel_listItem h6, .cke_panel_listItem pre {
  margin-top: 0;
  margin-bottom: 0;
}

/**
 * CKEditor config.
 */
.cke_editable {
  padding: 12px 12px;
  font-size: 0.875rem;
  font-weight: 400;
  line-height: 1.4;
  color: #000;
  background-color: transparent;
  border: 0;
  background-clip: padding-box;
  height: 100%;
  outline: 0;
}

.cke_focus .cke_editable {
  color: #000;
}

.cke_editable a {
  color: #000;
  text-decoration: none;
}

.cke_editable blockquote {
  padding: 12px;
  background-color: #f5f5f5;
}

.cke_editable h1 {
  font-size: 24px;
}

.cke_editable h2 {
  font-size: 22px;
}

.cke_editable h3 {
  font-size: 20px;
}

.cke_editable h4 {
  font-size: 18px;
}

.cke_editable h5 {
  font-size: 16px;
}

.cke_editable p:last-child {
  margin-bottom: 0;
}

.cke_editable table {
  margin-bottom: 1em;
  width: 100%;
}

.cke_editable td {
  vertical-align: top;
  padding: .5em;
  border: 1px dotted #ddd;
}

.cke_source {
  font-family: 'Courier New', monospace;
  font-size: small;
  background-color: #fff;
  white-space: pre;
}

.cke_editable {
  -webkit-box-shadow: inset 2px 2px 6px 0 rgba(0, 0, 0, 0.13) !important;
          box-shadow: inset 2px 2px 6px 0 rgba(0, 0, 0, 0.13) !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
